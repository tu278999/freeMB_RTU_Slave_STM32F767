
freeModbusRTU_Slave_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009960  08009960  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009968  08009968  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800996c  0800996c  0001996c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013140  200000fc  08009a6c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001323c  08009a6c  0002323c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028275  00000000  00000000  0002012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005650  00000000  00000000  0004839f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0004d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  0004f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6a6  00000000  00000000  000506a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023455  00000000  00000000  0007ed4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d50  00000000  00000000  000a21a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001aaef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006650  00000000  00000000  001aaf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000fc 	.word	0x200000fc
 800021c:	00000000 	.word	0x00000000
 8000220:	080094a4 	.word	0x080094a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000100 	.word	0x20000100
 800023c:	080094a4 	.word	0x080094a4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fcb9 	bl	8000f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f80e 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f934 	bl	8000850 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f902 	bl	80007f0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8ce 	bl	800078c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005f0:	f000 f896 	bl	8000720 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  initMBSlaveTask();
 80005f4:	f007 fed2 	bl	800839c <initMBSlaveTask>
  vTaskStartScheduler();
 80005f8:	f004 fbfe 	bl	8004df8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x24>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0b8      	sub	sp, #224	; 0xe0
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800060a:	2234      	movs	r2, #52	; 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 ffb6 	bl	8008580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2290      	movs	r2, #144	; 0x90
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f007 ffa7 	bl	8008580 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000632:	f001 f80f 	bl	8001654 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <SystemClock_Config+0x118>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a37      	ldr	r2, [pc, #220]	; (8000718 <SystemClock_Config+0x118>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b35      	ldr	r3, [pc, #212]	; (8000718 <SystemClock_Config+0x118>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <SystemClock_Config+0x11c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a32      	ldr	r2, [pc, #200]	; (800071c <SystemClock_Config+0x11c>)
 8000654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <SystemClock_Config+0x11c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000666:	2301      	movs	r3, #1
 8000668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000688:	23b4      	movs	r3, #180	; 0xb4
 800068a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ffe5 	bl	8001674 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006b0:	f000 f9e4 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006da:	2105      	movs	r1, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fa77 	bl	8001bd0 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xec>
  {
    Error_Handler();
 80006e8:	f000 f9c8 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80006ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fc9a 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800070a:	f000 f9b7 	bl	8000a7c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	37e0      	adds	r7, #224	; 0xe0
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_TIM7_Init+0x64>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_TIM7_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_TIM7_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_TIM7_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_TIM7_Init+0x64>)
 8000744:	2231      	movs	r2, #49	; 0x31
 8000746:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_TIM7_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_TIM7_Init+0x64>)
 8000750:	f002 f89a 	bl	8002888 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800075a:	f000 f98f 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800075e:	2320      	movs	r3, #32
 8000760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_TIM7_Init+0x64>)
 800076c:	f002 fb72 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000776:	f000 f981 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20012ff4 	.word	0x20012ff4
 8000788:	40001400 	.word	0x40001400

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_USART2_UART_Init+0x60>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 80007d6:	f003 fa89 	bl	8003cec <HAL_RS485Ex_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 f94c 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20012f70 	.word	0x20012f70
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART3_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART3_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART3_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000834:	f002 fbba 	bl	8002fac <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f91d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20012eec 	.word	0x20012eec
 800084c:	40004800 	.word	0x40004800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b76      	ldr	r3, [pc, #472]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a75      	ldr	r2, [pc, #468]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b73      	ldr	r3, [pc, #460]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a6f      	ldr	r2, [pc, #444]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a69      	ldr	r2, [pc, #420]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a63      	ldr	r2, [pc, #396]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a5d      	ldr	r2, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a57      	ldr	r2, [pc, #348]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <MX_GPIO_Init+0x1f0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008fc:	4851      	ldr	r0, [pc, #324]	; (8000a44 <MX_GPIO_Init+0x1f4>)
 80008fe:	f000 fe75 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4850      	ldr	r0, [pc, #320]	; (8000a48 <MX_GPIO_Init+0x1f8>)
 8000908:	f000 fe70 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <MX_GPIO_Init+0x1fc>)
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	484b      	ldr	r0, [pc, #300]	; (8000a50 <MX_GPIO_Init+0x200>)
 8000922:	f000 fcb7 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000926:	2332      	movs	r3, #50	; 0x32
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000936:	230b      	movs	r3, #11
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4843      	ldr	r0, [pc, #268]	; (8000a50 <MX_GPIO_Init+0x200>)
 8000942:	f000 fca7 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000946:	2386      	movs	r3, #134	; 0x86
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000956:	230b      	movs	r3, #11
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x204>)
 8000962:	f000 fc97 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000966:	f244 0381 	movw	r3, #16513	; 0x4081
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4831      	ldr	r0, [pc, #196]	; (8000a44 <MX_GPIO_Init+0x1f4>)
 8000980:	f000 fc88 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x1f4>)
 80009a2:	f000 fc77 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4822      	ldr	r0, [pc, #136]	; (8000a48 <MX_GPIO_Init+0x1f8>)
 80009be:	f000 fc69 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_GPIO_Init+0x1f8>)
 80009d6:	f000 fc5d 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ec:	230a      	movs	r3, #10
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x204>)
 80009f8:	f000 fc4c 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x204>)
 8000a12:	f000 fc3f 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a28:	230b      	movs	r3, #11
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_GPIO_Init+0x1f8>)
 8000a34:	f000 fc2e 	bl	8001294 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3730      	adds	r7, #48	; 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40021800 	.word	0x40021800
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 fa7f 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40001000 	.word	0x40001000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_TIM_Base_MspInit+0x44>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d113      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_TIM_Base_MspInit+0x48>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_TIM_Base_MspInit+0x48>)
 8000ae8:	f043 0320 	orr.w	r3, r3, #32
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_TIM_Base_MspInit+0x48>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2105      	movs	r1, #5
 8000afe:	2037      	movs	r0, #55	; 0x37
 8000b00:	f000 fb0c 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b04:	2037      	movs	r0, #55	; 0x37
 8000b06:	f000 fb25 	bl	8001154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40001400 	.word	0x40001400
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <HAL_UART_MspInit+0x130>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d14c      	bne.n	8000bd8 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a3d      	ldr	r2, [pc, #244]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a37      	ldr	r2, [pc, #220]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD4     ------> USART2_DE
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b86:	2308      	movs	r3, #8
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b96:	2307      	movs	r3, #7
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	482c      	ldr	r0, [pc, #176]	; (8000c54 <HAL_UART_MspInit+0x138>)
 8000ba2:	f000 fb77 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ba6:	2330      	movs	r3, #48	; 0x30
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4825      	ldr	r0, [pc, #148]	; (8000c58 <HAL_UART_MspInit+0x13c>)
 8000bc2:	f000 fb67 	bl	8001294 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2105      	movs	r1, #5
 8000bca:	2026      	movs	r0, #38	; 0x26
 8000bcc:	f000 faa6 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd0:	2026      	movs	r0, #38	; 0x26
 8000bd2:	f000 fabf 	bl	8001154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bd6:	e035      	b.n	8000c44 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d130      	bne.n	8000c44 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_UART_MspInit+0x134>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c24:	2307      	movs	r3, #7
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <HAL_UART_MspInit+0x13c>)
 8000c30:	f000 fb30 	bl	8001294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2105      	movs	r1, #5
 8000c38:	2027      	movs	r0, #39	; 0x27
 8000c3a:	f000 fa6f 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c3e:	2027      	movs	r0, #39	; 0x27
 8000c40:	f000 fa88 	bl	8001154 <HAL_NVIC_EnableIRQ>
}
 8000c44:	bf00      	nop
 8000c46:	3730      	adds	r7, #48	; 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40004800 	.word	0x40004800

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2036      	movs	r0, #54	; 0x36
 8000c76:	f000 fa51 	bl	800111c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c7a:	2036      	movs	r0, #54	; 0x36
 8000c7c:	f000 fa6a 	bl	8001154 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_InitTick+0xa0>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_InitTick+0xa0>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_InitTick+0xa0>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c98:	f107 0210 	add.w	r2, r7, #16
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f996 	bl	8001fd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ca8:	f001 f96c 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8000cac:	4603      	mov	r3, r0
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <HAL_InitTick+0xa4>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	0c9b      	lsrs	r3, r3, #18
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <HAL_InitTick+0xac>)
 8000cc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ccc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_InitTick+0xa8>)
 8000ce2:	f001 fdd1 	bl	8002888 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d104      	bne.n	8000cf6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cee:	f001 fe23 	bl	8002938 <HAL_TIM_Base_Start_IT>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3730      	adds	r7, #48	; 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	20013040 	.word	0x20013040
 8000d0c:	40001000 	.word	0x40001000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <TIM6_DAC_IRQHandler+0x10>)
 8000d42:	f001 fea0 	bl	8002a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20013040 	.word	0x20013040

08000d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_kill>:

int _kill(int pid, int sig)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6a:	f007 fbbf 	bl	80084ec <__errno>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2216      	movs	r2, #22
 8000d72:	601a      	str	r2, [r3, #0]
	return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_exit>:

void _exit (int status)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffe7 	bl	8000d60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d92:	e7fe      	b.n	8000d92 <_exit+0x12>

08000d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
	}

return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
	}
	return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f007 fb24 	bl	80084ec <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20080000 	.word	0x20080000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	20000118 	.word	0x20000118
 8000ed8:	20013240 	.word	0x20013240

08000edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f007 faf5 	bl	800851c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb51 	bl	80005d8 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f44:	08009970 	.word	0x08009970
  ldr r2, =_sbss
 8000f48:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000f4c:	2001323c 	.word	0x2001323c

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>

08000f52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f8d5 	bl	8001106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f7ff fe7f 	bl	8000c60 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fd91 	bl	8000a88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	2001308c 	.word	0x2001308c

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2001308c 	.word	0x2001308c

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <__NVIC_SetPriorityGrouping+0x40>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x40>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	05fa0000 	.word	0x05fa0000

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff4c 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112e:	f7ff ff61 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff ffb1 	bl	80010a0 <NVIC_EncodePriority>
 800113e:	4602      	mov	r2, r0
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff80 	bl	800104c <__NVIC_SetPriority>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff54 	bl	8001010 <__NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800117e:	f7ff ff09 	bl	8000f94 <HAL_GetTick>
 8001182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d008      	beq.n	80011a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e052      	b.n	8001248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0216 	bic.w	r2, r2, #22
 80011b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d103      	bne.n	80011d2 <HAL_DMA_Abort+0x62>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0208 	bic.w	r2, r2, #8
 80011e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f2:	e013      	b.n	800121c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f4:	f7ff fece 	bl	8000f94 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d90c      	bls.n	800121c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2220      	movs	r2, #32
 8001206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e015      	b.n	8001248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1e4      	bne.n	80011f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122e:	223f      	movs	r2, #63	; 0x3f
 8001230:	409a      	lsls	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d004      	beq.n	800126e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00c      	b.n	8001288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2205      	movs	r2, #5
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e175      	b.n	80015a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8164 	bne.w	800159a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d00b      	beq.n	80012f2 <HAL_GPIO_Init+0x5e>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d130      	bne.n	8001354 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x100>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80be 	beq.w	800159a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_GPIO_Init+0x324>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_GPIO_Init+0x324>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_GPIO_Init+0x324>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001436:	4a61      	ldr	r2, [pc, #388]	; (80015bc <HAL_GPIO_Init+0x328>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_GPIO_Init+0x32c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d037      	beq.n	80014d2 <HAL_GPIO_Init+0x23e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d031      	beq.n	80014ce <HAL_GPIO_Init+0x23a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d02b      	beq.n	80014ca <HAL_GPIO_Init+0x236>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a55      	ldr	r2, [pc, #340]	; (80015cc <HAL_GPIO_Init+0x338>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d025      	beq.n	80014c6 <HAL_GPIO_Init+0x232>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <HAL_GPIO_Init+0x33c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01f      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <HAL_GPIO_Init+0x340>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0x22a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x344>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x348>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00d      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_GPIO_Init+0x34c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x350>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_GPIO_Init+0x21a>
 80014aa:	2309      	movs	r3, #9
 80014ac:	e012      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ae:	230a      	movs	r3, #10
 80014b0:	e010      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014b2:	2308      	movs	r3, #8
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x328>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_GPIO_Init+0x354>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001516:	4a34      	ldr	r2, [pc, #208]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_GPIO_Init+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156a:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <HAL_GPIO_Init+0x354>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae86 	bls.w	80012b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40022400 	.word	0x40022400
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001630:	887a      	ldrh	r2, [r7, #2]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43d9      	mvns	r1, r3
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	400b      	ands	r3, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800165e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000

08001674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e29b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8087 	beq.w	80017a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001698:	4b96      	ldr	r3, [pc, #600]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d00c      	beq.n	80016be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a4:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d112      	bne.n	80016d6 <HAL_RCC_OscConfig+0x62>
 80016b0:	4b90      	ldr	r3, [pc, #576]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016bc:	d10b      	bne.n	80016d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	4b8d      	ldr	r3, [pc, #564]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x130>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d168      	bne.n	80017a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e275      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x7a>
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e02e      	b.n	800174c <HAL_RCC_OscConfig+0xd8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x9c>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7e      	ldr	r2, [pc, #504]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7b      	ldr	r2, [pc, #492]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e01d      	b.n	800174c <HAL_RCC_OscConfig+0xd8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0xc0>
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a72      	ldr	r2, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0xd8>
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6b      	ldr	r2, [pc, #428]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fc1e 	bl	8000f94 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fc1a 	bl	8000f94 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e229      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0xe8>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fc0a 	bl	8000f94 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc06 	bl	8000f94 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e215      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x110>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d069      	beq.n	8001886 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d11c      	bne.n	8001804 <HAL_RCC_OscConfig+0x190>
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d116      	bne.n	8001804 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x17a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e1e9      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	493d      	ldr	r1, [pc, #244]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	e040      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fbbc 	bl	8000f94 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fbb8 	bl	8000f94 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1c7      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4929      	ldr	r1, [pc, #164]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
 8001852:	e018      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb98 	bl	8000f94 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb94 	bl	8000f94 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1a3      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d038      	beq.n	8001904 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800189c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb75 	bl	8000f94 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb71 	bl	8000f94 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e180      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x23a>
 80018cc:	e01a      	b.n	8001904 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fb5b 	bl	8000f94 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fb57 	bl	8000f94 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d903      	bls.n	80018f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e166      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
 80018f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a4 	beq.w	8001a5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10d      	bne.n	800193a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a88      	ldr	r2, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001946:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001952:	f7ff fb1f 	bl	8000f94 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff fb1b 	bl	8000f94 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b64      	cmp	r3, #100	; 0x64
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e12a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x31a>
 8001980:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a6f      	ldr	r2, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e02d      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x33c>
 8001996:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	e01c      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d10c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x35e>
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a61      	ldr	r2, [pc, #388]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	4b5f      	ldr	r3, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a5e      	ldr	r2, [pc, #376]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e00b      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a5b      	ldr	r2, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff facf 	bl	8000f94 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff facb 	bl	8000f94 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0d8      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ee      	beq.n	80019fa <HAL_RCC_OscConfig+0x386>
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fab9 	bl	8000f94 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fab5 	bl	8000f94 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0c2      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80ae 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d06d      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d14b      	bne.n	8001b10 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a31      	ldr	r2, [pc, #196]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa86 	bl	8000f94 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fa82 	bl	8000f94 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e091      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	071b      	lsls	r3, r3, #28
 8001ad6:	491b      	ldr	r1, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa54 	bl	8000f94 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fa50 	bl	8000f94 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e05f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x47c>
 8001b0e:	e057      	b.n	8001bc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fa3a 	bl	8000f94 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fa36 	bl	8000f94 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e045      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4b0>
 8001b42:	e03d      	b.n	8001bc0 <HAL_RCC_OscConfig+0x54c>
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_OscConfig+0x558>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d030      	beq.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d129      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d122      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d119      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10f      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d0      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e073      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4936      	ldr	r1, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f966 	bl	8000f94 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff f962 	bl	8000f94 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e053      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 020f 	bic.w	r2, r3, #15
 8001d0a:	4922      	ldr	r1, [pc, #136]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f821 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x1cc>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1d4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ff6c 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08009614 	.word	0x08009614
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	2300      	movs	r3, #0
 8001dba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc0:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d00d      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x40>
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	f200 80bd 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x34>
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dda:	e0b7      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dde:	60bb      	str	r3, [r7, #8]
      break;
 8001de0:	e0b7      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de2:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001de4:	60bb      	str	r3, [r7, #8]
      break;
 8001de6:	e0b4      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de8:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001df2:	4b5b      	ldr	r3, [pc, #364]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d04d      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	461a      	mov	r2, r3
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	ea02 0800 	and.w	r8, r2, r0
 8001e16:	ea03 0901 	and.w	r9, r3, r1
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	014b      	lsls	r3, r1, #5
 8001e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e2c:	0142      	lsls	r2, r0, #5
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	ebb0 0008 	subs.w	r0, r0, r8
 8001e36:	eb61 0109 	sbc.w	r1, r1, r9
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	018b      	lsls	r3, r1, #6
 8001e44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e48:	0182      	lsls	r2, r0, #6
 8001e4a:	1a12      	subs	r2, r2, r0
 8001e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	00d9      	lsls	r1, r3, #3
 8001e5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e5e:	00d0      	lsls	r0, r2, #3
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	eb12 0208 	adds.w	r2, r2, r8
 8001e68:	eb43 0309 	adc.w	r3, r3, r9
 8001e6c:	f04f 0000 	mov.w	r0, #0
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	0259      	lsls	r1, r3, #9
 8001e76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e7a:	0250      	lsls	r0, r2, #9
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	461a      	mov	r2, r3
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	f7fe fa28 	bl	80002e0 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4613      	mov	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e04a      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	ea02 0400 	and.w	r4, r2, r0
 8001eb2:	ea03 0501 	and.w	r5, r3, r1
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	014b      	lsls	r3, r1, #5
 8001ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ec8:	0142      	lsls	r2, r0, #5
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	1b00      	subs	r0, r0, r4
 8001ed0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	018b      	lsls	r3, r1, #6
 8001ede:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ee2:	0182      	lsls	r2, r0, #6
 8001ee4:	1a12      	subs	r2, r2, r0
 8001ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eea:	f04f 0000 	mov.w	r0, #0
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	00d9      	lsls	r1, r3, #3
 8001ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ef8:	00d0      	lsls	r0, r2, #3
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	1912      	adds	r2, r2, r4
 8001f00:	eb45 0303 	adc.w	r3, r5, r3
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0299      	lsls	r1, r3, #10
 8001f0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f12:	0290      	lsls	r0, r2, #10
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	f7fe f9dc 	bl	80002e0 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	60bb      	str	r3, [r7, #8]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f4e:	60bb      	str	r3, [r7, #8]
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	68bb      	ldr	r3, [r7, #8]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	007a1200 	.word	0x007a1200

08001f6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08009624 	.word	0x08009624

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffdc 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08009624 	.word	0x08009624

08001fd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_GetClockConfig+0x5c>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_RCC_GetClockConfig+0x60>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40023c00 	.word	0x40023c00

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002060:	4b69      	ldr	r3, [pc, #420]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a68      	ldr	r2, [pc, #416]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800206a:	6093      	str	r3, [r2, #8]
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	4964      	ldr	r1, [pc, #400]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d017      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	4959      	ldr	r1, [pc, #356]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d017      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	494a      	ldr	r1, [pc, #296]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 808b 	beq.w	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a34      	ldr	r2, [pc, #208]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe ff28 	bl	8000f94 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe ff24 	bl	8000f94 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e38f      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002166:	4b28      	ldr	r3, [pc, #160]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d035      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d02e      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d114      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe feec 	bl	8000f94 <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fee8 	bl	8000f94 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e351      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ee:	d111      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021fe:	400b      	ands	r3, r1
 8002200:	4901      	ldr	r1, [pc, #4]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
 8002206:	e00b      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
 8002210:	0ffffcff 	.word	0x0ffffcff
 8002214:	4bb3      	ldr	r3, [pc, #716]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4ab2      	ldr	r2, [pc, #712]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800221a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800221e:	6093      	str	r3, [r2, #8]
 8002220:	4bb0      	ldr	r3, [pc, #704]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002222:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	49ad      	ldr	r1, [pc, #692]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222e:	4313      	orrs	r3, r2
 8002230:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800223e:	4ba9      	ldr	r3, [pc, #676]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	4aa7      	ldr	r2, [pc, #668]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800224e:	4ba5      	ldr	r3, [pc, #660]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002250:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	49a2      	ldr	r1, [pc, #648]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226c:	4b9d      	ldr	r3, [pc, #628]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227a:	499a      	ldr	r1, [pc, #616]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228e:	4b95      	ldr	r3, [pc, #596]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800229c:	4991      	ldr	r1, [pc, #580]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b0:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022be:	4989      	ldr	r1, [pc, #548]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022d2:	4b84      	ldr	r3, [pc, #528]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4980      	ldr	r1, [pc, #512]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f4:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4978      	ldr	r1, [pc, #480]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f023 020c 	bic.w	r2, r3, #12
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	496f      	ldr	r1, [pc, #444]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4967      	ldr	r1, [pc, #412]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800235a:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	495e      	ldr	r1, [pc, #376]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	4956      	ldr	r1, [pc, #344]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	4945      	ldr	r1, [pc, #276]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	493c      	ldr	r1, [pc, #240]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002404:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002412:	4934      	ldr	r1, [pc, #208]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002434:	492b      	ldr	r1, [pc, #172]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002474:	491b      	ldr	r1, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002498:	4912      	ldr	r1, [pc, #72]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00f      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	e002      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	4986      	ldr	r1, [pc, #536]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024fc:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002502:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800250c:	497d      	ldr	r1, [pc, #500]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d006      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80d6 	beq.w	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a75      	ldr	r2, [pc, #468]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002534:	f7fe fd2e 	bl	8000f94 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800253c:	f7fe fd2a 	bl	8000f94 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e195      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d021      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11d      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	019a      	lsls	r2, r3, #6
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	071b      	lsls	r3, r3, #28
 80025a2:	4958      	ldr	r1, [pc, #352]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02e      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d129      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ea:	0f1b      	lsrs	r3, r3, #28
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	019a      	lsls	r2, r3, #6
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	493e      	ldr	r1, [pc, #248]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f023 021f 	bic.w	r2, r3, #31
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	3b01      	subs	r3, #1
 8002622:	4938      	ldr	r1, [pc, #224]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01d      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264a:	0f1b      	lsrs	r3, r3, #28
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	019a      	lsls	r2, r3, #6
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	071b      	lsls	r3, r3, #28
 800266a:	4926      	ldr	r1, [pc, #152]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	019a      	lsls	r2, r3, #6
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	491a      	ldr	r1, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ae:	f7fe fc71 	bl	8000f94 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026b6:	f7fe fc6d 	bl	8000f94 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0d8      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80ce 	bne.w	8002878 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe fc54 	bl	8000f94 <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f0:	f7fe fc50 	bl	8000f94 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d904      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0bb      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d0ec      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02e      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	0f1b      	lsrs	r3, r3, #28
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4944      	ldr	r1, [pc, #272]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	493d      	ldr	r1, [pc, #244]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d022      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a8:	d11d      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	0f1b      	lsrs	r3, r3, #28
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	019a      	lsls	r2, r3, #6
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4929      	ldr	r1, [pc, #164]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	0e1b      	lsrs	r3, r3, #24
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4911      	ldr	r1, [pc, #68]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe fba0 	bl	8000f94 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002858:	f7fe fb9c 	bl	8000f94 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e007      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002876:	d1ef      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e049      	b.n	800292e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe f90e 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 fa24 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d001      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e054      	b.n	80029fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <HAL_TIM_Base_Start_IT+0xd0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d022      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d01d      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d018      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_TIM_Base_Start_IT+0xd8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00e      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_TIM_Base_Start_IT+0xe0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_TIM_Base_Start_IT+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_TIM_Base_Start_IT+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d115      	bne.n	80029e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_TIM_Base_Start_IT+0xec>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d015      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0xbe>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d011      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	e008      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e000      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40001800 	.word	0x40001800
 8002a24:	00010007 	.word	0x00010007

08002a28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10f      	bne.n	8002a70 <HAL_TIM_Base_Stop_IT+0x48>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	f240 4344 	movw	r3, #1092	; 0x444
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_Base_Stop_IT+0x48>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d122      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f06f 0202 	mvn.w	r2, #2
 8002ab2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f905 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002ace:	e005      	b.n	8002adc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8f7 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f908 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d122      	bne.n	8002b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d11b      	bne.n	8002b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0204 	mvn.w	r2, #4
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8db 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002b22:	e005      	b.n	8002b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8cd 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8de 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d122      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d11b      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0208 	mvn.w	r2, #8
 8002b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8b1 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002b76:	e005      	b.n	8002b84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8a3 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8b4 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d122      	bne.n	8002bde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d11b      	bne.n	8002bde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0210 	mvn.w	r2, #16
 8002bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f887 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002bca:	e005      	b.n	8002bd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f879 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f88a 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10e      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f06f 0201 	mvn.w	r2, #1
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fd ff27 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d10e      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f9a7 	bl	8002f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f99a 	bl	8002f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f838 	bl	8002d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0220 	mvn.w	r2, #32
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f95a 	bl	8002f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a40      	ldr	r2, [pc, #256]	; (8002e28 <TIM_Base_SetConfig+0x114>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d00f      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3d      	ldr	r2, [pc, #244]	; (8002e2c <TIM_Base_SetConfig+0x118>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	; (8002e30 <TIM_Base_SetConfig+0x11c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3b      	ldr	r2, [pc, #236]	; (8002e34 <TIM_Base_SetConfig+0x120>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <TIM_Base_SetConfig+0x124>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d108      	bne.n	8002d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <TIM_Base_SetConfig+0x114>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d027      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <TIM_Base_SetConfig+0x118>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d023      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2b      	ldr	r2, [pc, #172]	; (8002e30 <TIM_Base_SetConfig+0x11c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <TIM_Base_SetConfig+0x120>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <TIM_Base_SetConfig+0x124>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d017      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a28      	ldr	r2, [pc, #160]	; (8002e3c <TIM_Base_SetConfig+0x128>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <TIM_Base_SetConfig+0x12c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <TIM_Base_SetConfig+0x130>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <TIM_Base_SetConfig+0x134>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <TIM_Base_SetConfig+0x138>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <TIM_Base_SetConfig+0x13c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <TIM_Base_SetConfig+0x114>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <TIM_Base_SetConfig+0x124>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d103      	bne.n	8002e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	615a      	str	r2, [r3, #20]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	40010400 	.word	0x40010400
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800
 8002e48:	40001800 	.word	0x40001800
 8002e4c:	40001c00 	.word	0x40001c00
 8002e50:	40002000 	.word	0x40002000

08002e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e06d      	b.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d01d      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10c      	bne.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40001800 	.word	0x40001800

08002f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e040      	b.n	8003040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fda4 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa56 	bl	800349c <UART_SetConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fcac 	bl	8003960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fd33 	bl	8003aa4 <UART_CheckIdleState>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f640 030f 	movw	r3, #2063	; 0x80f
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d113      	bne.n	80030a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00e      	beq.n	80030a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 81cc 	beq.w	800342e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
      }
      return;
 800309e:	e1c6      	b.n	800342e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80e3 	beq.w	800326e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4ba5      	ldr	r3, [pc, #660]	; (800334c <HAL_UART_IRQHandler+0x304>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80d8 	beq.w	800326e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_UART_IRQHandler+0xa2>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2201      	movs	r2, #1
 80030d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_UART_IRQHandler+0xce>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <HAL_UART_IRQHandler+0xfa>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2204      	movs	r2, #4
 8003130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003138:	f043 0202 	orr.w	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316e:	f043 0208 	orr.w	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d011      	beq.n	80031a6 <HAL_UART_IRQHandler+0x15e>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8140 	beq.w	8003432 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d004      	beq.n	80031f6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d031      	beq.n	800325a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fd19 	bl	8003c2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d123      	bne.n	8003252 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003218:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <HAL_UART_IRQHandler+0x308>)
 8003228:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f80e 	bl	8001250 <HAL_DMA_Abort_IT>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d017      	beq.n	800326a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e00f      	b.n	800326a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f906 	bl	800345c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00b      	b.n	800326a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f902 	bl	800345c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e007      	b.n	800326a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8fe 	bl	800345c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003268:	e0e3      	b.n	8003432 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326a:	bf00      	nop
    return;
 800326c:	e0e1      	b.n	8003432 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	2b01      	cmp	r3, #1
 8003274:	f040 80a7 	bne.w	80033c6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80a1 	beq.w	80033c6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 809b 	beq.w	80033c6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d156      	bne.n	8003354 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80bf 	beq.w	8003436 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032be:	893a      	ldrh	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f080 80b8 	bcs.w	8003436 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	893a      	ldrh	r2, [r7, #8]
 80032ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d8:	d02a      	beq.n	8003330 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003308:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0210 	bic.w	r2, r2, #16
 8003324:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd ff20 	bl	8001170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	b29b      	uxth	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f893 	bl	8003470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800334a:	e074      	b.n	8003436 <HAL_UART_IRQHandler+0x3ee>
 800334c:	04000120 	.word	0x04000120
 8003350:	08003c8d 	.word	0x08003c8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d060      	beq.n	800343a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003386:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0210 	bic.w	r2, r2, #16
 80033b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f856 	bl	8003470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033c4:	e039      	b.n	800343a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_UART_IRQHandler+0x3a4>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f84f 	bl	8003488 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033ea:	e029      	b.n	8003440 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
    }
    return;
 8003410:	e015      	b.n	800343e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d011      	beq.n	8003440 <HAL_UART_IRQHandler+0x3f8>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fc46 	bl	8003cb8 <UART_EndTransmit_IT>
    return;
 800342c:	e008      	b.n	8003440 <HAL_UART_IRQHandler+0x3f8>
      return;
 800342e:	bf00      	nop
 8003430:	e006      	b.n	8003440 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003432:	bf00      	nop
 8003434:	e004      	b.n	8003440 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <HAL_UART_IRQHandler+0x3f8>
      return;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_UART_IRQHandler+0x3f8>
    return;
 800343e:	bf00      	nop
  }

}
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4ba7      	ldr	r3, [pc, #668]	; (8003764 <UART_SetConfig+0x2c8>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a95      	ldr	r2, [pc, #596]	; (8003768 <UART_SetConfig+0x2cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d120      	bne.n	800355a <UART_SetConfig+0xbe>
 8003518:	4b94      	ldr	r3, [pc, #592]	; (800376c <UART_SetConfig+0x2d0>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d816      	bhi.n	8003554 <UART_SetConfig+0xb8>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x90>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003549 	.word	0x08003549
 8003534:	08003543 	.word	0x08003543
 8003538:	0800354f 	.word	0x0800354f
 800353c:	2301      	movs	r3, #1
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e14f      	b.n	80037e2 <UART_SetConfig+0x346>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e14c      	b.n	80037e2 <UART_SetConfig+0x346>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e149      	b.n	80037e2 <UART_SetConfig+0x346>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e146      	b.n	80037e2 <UART_SetConfig+0x346>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e143      	b.n	80037e2 <UART_SetConfig+0x346>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a84      	ldr	r2, [pc, #528]	; (8003770 <UART_SetConfig+0x2d4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d132      	bne.n	80035ca <UART_SetConfig+0x12e>
 8003564:	4b81      	ldr	r3, [pc, #516]	; (800376c <UART_SetConfig+0x2d0>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d828      	bhi.n	80035c4 <UART_SetConfig+0x128>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0xdc>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035c5 	.word	0x080035c5
 8003580:	080035c5 	.word	0x080035c5
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035b9 	.word	0x080035b9
 800358c:	080035c5 	.word	0x080035c5
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035b3 	.word	0x080035b3
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035c5 	.word	0x080035c5
 80035a8:	080035bf 	.word	0x080035bf
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e117      	b.n	80037e2 <UART_SetConfig+0x346>
 80035b2:	2302      	movs	r3, #2
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e114      	b.n	80037e2 <UART_SetConfig+0x346>
 80035b8:	2304      	movs	r3, #4
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e111      	b.n	80037e2 <UART_SetConfig+0x346>
 80035be:	2308      	movs	r3, #8
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e10e      	b.n	80037e2 <UART_SetConfig+0x346>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e10b      	b.n	80037e2 <UART_SetConfig+0x346>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a69      	ldr	r2, [pc, #420]	; (8003774 <UART_SetConfig+0x2d8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d120      	bne.n	8003616 <UART_SetConfig+0x17a>
 80035d4:	4b65      	ldr	r3, [pc, #404]	; (800376c <UART_SetConfig+0x2d0>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d013      	beq.n	800360a <UART_SetConfig+0x16e>
 80035e2:	2b30      	cmp	r3, #48	; 0x30
 80035e4:	d814      	bhi.n	8003610 <UART_SetConfig+0x174>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d009      	beq.n	80035fe <UART_SetConfig+0x162>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d810      	bhi.n	8003610 <UART_SetConfig+0x174>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <UART_SetConfig+0x15c>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d006      	beq.n	8003604 <UART_SetConfig+0x168>
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x174>
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e0f1      	b.n	80037e2 <UART_SetConfig+0x346>
 80035fe:	2302      	movs	r3, #2
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e0ee      	b.n	80037e2 <UART_SetConfig+0x346>
 8003604:	2304      	movs	r3, #4
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0eb      	b.n	80037e2 <UART_SetConfig+0x346>
 800360a:	2308      	movs	r3, #8
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0e8      	b.n	80037e2 <UART_SetConfig+0x346>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0e5      	b.n	80037e2 <UART_SetConfig+0x346>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a57      	ldr	r2, [pc, #348]	; (8003778 <UART_SetConfig+0x2dc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d120      	bne.n	8003662 <UART_SetConfig+0x1c6>
 8003620:	4b52      	ldr	r3, [pc, #328]	; (800376c <UART_SetConfig+0x2d0>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800362a:	2bc0      	cmp	r3, #192	; 0xc0
 800362c:	d013      	beq.n	8003656 <UART_SetConfig+0x1ba>
 800362e:	2bc0      	cmp	r3, #192	; 0xc0
 8003630:	d814      	bhi.n	800365c <UART_SetConfig+0x1c0>
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d009      	beq.n	800364a <UART_SetConfig+0x1ae>
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d810      	bhi.n	800365c <UART_SetConfig+0x1c0>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <UART_SetConfig+0x1a8>
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d006      	beq.n	8003650 <UART_SetConfig+0x1b4>
 8003642:	e00b      	b.n	800365c <UART_SetConfig+0x1c0>
 8003644:	2300      	movs	r3, #0
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e0cb      	b.n	80037e2 <UART_SetConfig+0x346>
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e0c8      	b.n	80037e2 <UART_SetConfig+0x346>
 8003650:	2304      	movs	r3, #4
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e0c5      	b.n	80037e2 <UART_SetConfig+0x346>
 8003656:	2308      	movs	r3, #8
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e0c2      	b.n	80037e2 <UART_SetConfig+0x346>
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e0bf      	b.n	80037e2 <UART_SetConfig+0x346>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a45      	ldr	r2, [pc, #276]	; (800377c <UART_SetConfig+0x2e0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d125      	bne.n	80036b8 <UART_SetConfig+0x21c>
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <UART_SetConfig+0x2d0>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367a:	d017      	beq.n	80036ac <UART_SetConfig+0x210>
 800367c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003680:	d817      	bhi.n	80036b2 <UART_SetConfig+0x216>
 8003682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003686:	d00b      	beq.n	80036a0 <UART_SetConfig+0x204>
 8003688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368c:	d811      	bhi.n	80036b2 <UART_SetConfig+0x216>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <UART_SetConfig+0x1fe>
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	d006      	beq.n	80036a6 <UART_SetConfig+0x20a>
 8003698:	e00b      	b.n	80036b2 <UART_SetConfig+0x216>
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0a0      	b.n	80037e2 <UART_SetConfig+0x346>
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e09d      	b.n	80037e2 <UART_SetConfig+0x346>
 80036a6:	2304      	movs	r3, #4
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e09a      	b.n	80037e2 <UART_SetConfig+0x346>
 80036ac:	2308      	movs	r3, #8
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e097      	b.n	80037e2 <UART_SetConfig+0x346>
 80036b2:	2310      	movs	r3, #16
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e094      	b.n	80037e2 <UART_SetConfig+0x346>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a30      	ldr	r2, [pc, #192]	; (8003780 <UART_SetConfig+0x2e4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d125      	bne.n	800370e <UART_SetConfig+0x272>
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <UART_SetConfig+0x2d0>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d0:	d017      	beq.n	8003702 <UART_SetConfig+0x266>
 80036d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d6:	d817      	bhi.n	8003708 <UART_SetConfig+0x26c>
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	d00b      	beq.n	80036f6 <UART_SetConfig+0x25a>
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d811      	bhi.n	8003708 <UART_SetConfig+0x26c>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x254>
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d006      	beq.n	80036fc <UART_SetConfig+0x260>
 80036ee:	e00b      	b.n	8003708 <UART_SetConfig+0x26c>
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e075      	b.n	80037e2 <UART_SetConfig+0x346>
 80036f6:	2302      	movs	r3, #2
 80036f8:	77fb      	strb	r3, [r7, #31]
 80036fa:	e072      	b.n	80037e2 <UART_SetConfig+0x346>
 80036fc:	2304      	movs	r3, #4
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e06f      	b.n	80037e2 <UART_SetConfig+0x346>
 8003702:	2308      	movs	r3, #8
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e06c      	b.n	80037e2 <UART_SetConfig+0x346>
 8003708:	2310      	movs	r3, #16
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e069      	b.n	80037e2 <UART_SetConfig+0x346>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <UART_SetConfig+0x2e8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d137      	bne.n	8003788 <UART_SetConfig+0x2ec>
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <UART_SetConfig+0x2d0>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003726:	d017      	beq.n	8003758 <UART_SetConfig+0x2bc>
 8003728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372c:	d817      	bhi.n	800375e <UART_SetConfig+0x2c2>
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003732:	d00b      	beq.n	800374c <UART_SetConfig+0x2b0>
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d811      	bhi.n	800375e <UART_SetConfig+0x2c2>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <UART_SetConfig+0x2aa>
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d006      	beq.n	8003752 <UART_SetConfig+0x2b6>
 8003744:	e00b      	b.n	800375e <UART_SetConfig+0x2c2>
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e04a      	b.n	80037e2 <UART_SetConfig+0x346>
 800374c:	2302      	movs	r3, #2
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e047      	b.n	80037e2 <UART_SetConfig+0x346>
 8003752:	2304      	movs	r3, #4
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e044      	b.n	80037e2 <UART_SetConfig+0x346>
 8003758:	2308      	movs	r3, #8
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e041      	b.n	80037e2 <UART_SetConfig+0x346>
 800375e:	2310      	movs	r3, #16
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e03e      	b.n	80037e2 <UART_SetConfig+0x346>
 8003764:	efff69f3 	.word	0xefff69f3
 8003768:	40011000 	.word	0x40011000
 800376c:	40023800 	.word	0x40023800
 8003770:	40004400 	.word	0x40004400
 8003774:	40004800 	.word	0x40004800
 8003778:	40004c00 	.word	0x40004c00
 800377c:	40005000 	.word	0x40005000
 8003780:	40011400 	.word	0x40011400
 8003784:	40007800 	.word	0x40007800
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a71      	ldr	r2, [pc, #452]	; (8003954 <UART_SetConfig+0x4b8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d125      	bne.n	80037de <UART_SetConfig+0x342>
 8003792:	4b71      	ldr	r3, [pc, #452]	; (8003958 <UART_SetConfig+0x4bc>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800379c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a0:	d017      	beq.n	80037d2 <UART_SetConfig+0x336>
 80037a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a6:	d817      	bhi.n	80037d8 <UART_SetConfig+0x33c>
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d00b      	beq.n	80037c6 <UART_SetConfig+0x32a>
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b2:	d811      	bhi.n	80037d8 <UART_SetConfig+0x33c>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <UART_SetConfig+0x324>
 80037b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037bc:	d006      	beq.n	80037cc <UART_SetConfig+0x330>
 80037be:	e00b      	b.n	80037d8 <UART_SetConfig+0x33c>
 80037c0:	2300      	movs	r3, #0
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e00d      	b.n	80037e2 <UART_SetConfig+0x346>
 80037c6:	2302      	movs	r3, #2
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e00a      	b.n	80037e2 <UART_SetConfig+0x346>
 80037cc:	2304      	movs	r3, #4
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e007      	b.n	80037e2 <UART_SetConfig+0x346>
 80037d2:	2308      	movs	r3, #8
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e004      	b.n	80037e2 <UART_SetConfig+0x346>
 80037d8:	2310      	movs	r3, #16
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e001      	b.n	80037e2 <UART_SetConfig+0x346>
 80037de:	2310      	movs	r3, #16
 80037e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d15b      	bne.n	80038a4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d827      	bhi.n	8003842 <UART_SetConfig+0x3a6>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <UART_SetConfig+0x35c>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	08003825 	.word	0x08003825
 8003800:	0800382d 	.word	0x0800382d
 8003804:	08003843 	.word	0x08003843
 8003808:	08003833 	.word	0x08003833
 800380c:	08003843 	.word	0x08003843
 8003810:	08003843 	.word	0x08003843
 8003814:	08003843 	.word	0x08003843
 8003818:	0800383b 	.word	0x0800383b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381c:	f7fe fbb2 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8003820:	61b8      	str	r0, [r7, #24]
        break;
 8003822:	e013      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003824:	f7fe fbc2 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 8003828:	61b8      	str	r0, [r7, #24]
        break;
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <UART_SetConfig+0x4c0>)
 800382e:	61bb      	str	r3, [r7, #24]
        break;
 8003830:	e00c      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003832:	f7fe fab9 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8003836:	61b8      	str	r0, [r7, #24]
        break;
 8003838:	e008      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e004      	b.n	800384c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	77bb      	strb	r3, [r7, #30]
        break;
 800384a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d074      	beq.n	800393c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	005a      	lsls	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	b29b      	uxth	r3, r3
 8003868:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b0f      	cmp	r3, #15
 800386e:	d916      	bls.n	800389e <UART_SetConfig+0x402>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d212      	bcs.n	800389e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f023 030f 	bic.w	r3, r3, #15
 8003880:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	b29a      	uxth	r2, r3
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	4313      	orrs	r3, r2
 8003892:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e04e      	b.n	800393c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	77bb      	strb	r3, [r7, #30]
 80038a2:	e04b      	b.n	800393c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d827      	bhi.n	80038fa <UART_SetConfig+0x45e>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0x414>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038d5 	.word	0x080038d5
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038e5 	.word	0x080038e5
 80038bc:	080038fb 	.word	0x080038fb
 80038c0:	080038eb 	.word	0x080038eb
 80038c4:	080038fb 	.word	0x080038fb
 80038c8:	080038fb 	.word	0x080038fb
 80038cc:	080038fb 	.word	0x080038fb
 80038d0:	080038f3 	.word	0x080038f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d4:	f7fe fb56 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 80038d8:	61b8      	str	r0, [r7, #24]
        break;
 80038da:	e013      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe fb66 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 80038e0:	61b8      	str	r0, [r7, #24]
        break;
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <UART_SetConfig+0x4c0>)
 80038e6:	61bb      	str	r3, [r7, #24]
        break;
 80038e8:	e00c      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ea:	f7fe fa5d 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 80038ee:	61b8      	str	r0, [r7, #24]
        break;
 80038f0:	e008      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f6:	61bb      	str	r3, [r7, #24]
        break;
 80038f8:	e004      	b.n	8003904 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
        break;
 8003902:	bf00      	nop
    }

    if (pclk != 0U)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	085a      	lsrs	r2, r3, #1
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	b29b      	uxth	r3, r3
 800391e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	d908      	bls.n	8003938 <UART_SetConfig+0x49c>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d204      	bcs.n	8003938 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	e001      	b.n	800393c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003948:	7fbb      	ldrb	r3, [r7, #30]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40007c00 	.word	0x40007c00
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400

08003960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01a      	beq.n	8003a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d10a      	bne.n	8003a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab4:	f7fd fa6e 	bl	8000f94 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d10e      	bne.n	8003ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f82d 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e023      	b.n	8003b2e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d10e      	bne.n	8003b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f817 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e00d      	b.n	8003b2e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b46:	e05e      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d05a      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b50:	f7fd fa20 	bl	8000f94 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11b      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e043      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02c      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bba:	d124      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d091      	beq.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0210 	bic.w	r2, r2, #16
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fbd6 	bl	800345c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fbb3 	bl	8003448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e054      	b.n	8003dae <HAL_RS485Ex_Init+0xc2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7fc ff01 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2224      	movs	r2, #36	; 0x24
 8003d1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fbb3 	bl	800349c <UART_SetConfig>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e036      	b.n	8003dae <HAL_RS485Ex_Init+0xc2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff fe09 	bl	8003960 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	055b      	lsls	r3, r3, #21
 8003d76:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RS485Ex_Init+0xcc>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	430b      	orrs	r3, r1
 8003d94:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff fe7c 	bl	8003aa4 <UART_CheckIdleState>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	fc00ffff 	.word	0xfc00ffff

08003dbc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003dc2:	201c      	movs	r0, #28
 8003dc4:	f002 fcca 	bl	800675c <pvPortMalloc>
 8003dc8:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f9a2 	bl	8004124 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8003de0:	687b      	ldr	r3, [r7, #4]
    }
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b090      	sub	sp, #64	; 0x40
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xEventGroupWaitBits+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <xEventGroupWaitBits+0x56>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	61fb      	str	r3, [r7, #28]
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xEventGroupWaitBits+0x72>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	61bb      	str	r3, [r7, #24]
    }
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e5e:	f001 fe39 	bl	8005ad4 <xTaskGetSchedulerState>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <xEventGroupWaitBits+0x82>
 8003e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xEventGroupWaitBits+0x86>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xEventGroupWaitBits+0x88>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xEventGroupWaitBits+0xa2>
        __asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	617b      	str	r3, [r7, #20]
    }
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 8003e8e:	f001 f805 	bl	8004e9c <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e9e:	f000 f90b 	bl	80040b8 <prvTestWaitCondition>
 8003ea2:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00e      	beq.n	8003ec8 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d028      	beq.n	8003f0a <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e020      	b.n	8003f0a <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed6:	e018      	b.n	8003f0a <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	1d18      	adds	r0, r3, #4
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	4313      	orrs	r3, r2
 8003efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f00:	4619      	mov	r1, r3
 8003f02:	f001 fa7b 	bl	80053fc <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8003f0a:	f000 ffd5 	bl	8004eb8 <xTaskResumeAll>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 8003f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d031      	beq.n	8003f7a <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <xEventGroupWaitBits+0x198>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8003f2c:	f001 fe6a 	bl	8005c04 <uxTaskResetEventItemValue>
 8003f30:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11a      	bne.n	8003f72 <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 8003f3c:	f002 faec 	bl	8006518 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f4c:	f000 f8b4 	bl	80040b8 <prvTestWaitCondition>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 8003f6e:	f002 fb03 	bl	8006578 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3740      	adds	r7, #64	; 0x40
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08e      	sub	sp, #56	; 0x38
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003f92:	2300      	movs	r3, #0
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xEventGroupSetBits+0x32>
        __asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	613b      	str	r3, [r7, #16]
    }
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <xEventGroupSetBits+0x52>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	3304      	adds	r3, #4
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8003fe6:	f000 ff59 	bl	8004e9c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8003ffc:	e03c      	b.n	8004078 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004014:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800401c:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d108      	bne.n	800403a <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004038:	e008      	b.n	800404c <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	429a      	cmp	r2, r3
 8004046:	d101      	bne.n	800404c <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800406c:	4619      	mov	r1, r3
 800406e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004070:	f001 fb36 	bl	80056e0 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 8004078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d1be      	bne.n	8003ffe <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	43db      	mvns	r3, r3
 8004088:	401a      	ands	r2, r3
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 800408e:	f000 ff13 	bl	8004eb8 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	681b      	ldr	r3, [r3, #0]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3738      	adds	r7, #56	; 0x38
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
void vEventGroupSetBitsCallback( void * pvEventGroup,
                                 const uint32_t ulBitsToSet )
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ff6c 	bl	8003f88 <xEventGroupSetBits>
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e007      	b.n	80040ee <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d101      	bne.n	80040ee <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 80040ee:	697b      	ldr	r3, [r7, #20]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	4804      	ldr	r0, [pc, #16]	; (8004120 <xEventGroupSetBitsFromISR+0x24>)
 8004110:	f002 f8b0 	bl	8006274 <xTimerPendFunctionCallFromISR>
 8004114:	6178      	str	r0, [r7, #20]

        return xReturn;
 8004116:	697b      	ldr	r3, [r7, #20]
    }
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	0800409f 	.word	0x0800409f

08004124 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f103 0208 	add.w	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f103 0208 	add.w	r2, r3, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d103      	bne.n	80041e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e00c      	b.n	8004200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3308      	adds	r3, #8
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e002      	b.n	80041f4 <vListInsert+0x2e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d2f6      	bcs.n	80041ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6852      	ldr	r2, [r2, #4]
 8004258:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d103      	bne.n	800426c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004296:	2301      	movs	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueGenericReset+0x2e>
        __asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	60fb      	str	r3, [r7, #12]
    }
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05d      	beq.n	800437c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d059      	beq.n	800437c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	2100      	movs	r1, #0
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d000      	beq.n	80042dc <xQueueGenericReset+0x50>
 80042da:	2101      	movs	r1, #1
 80042dc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d14c      	bne.n	800437c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80042e2:	f002 f919 	bl	8006518 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	441a      	add	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2200      	movs	r2, #0
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	3b01      	subs	r3, #1
 8004314:	6939      	ldr	r1, [r7, #16]
 8004316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	441a      	add	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d114      	bne.n	8004362 <xQueueGenericReset+0xd6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01a      	beq.n	8004376 <xQueueGenericReset+0xea>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	3310      	adds	r3, #16
 8004344:	4618      	mov	r0, r3
 8004346:	f001 f8f5 	bl	8005534 <xTaskRemoveFromEventList>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <xQueueGenericReset+0xea>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004350:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <xQueueGenericReset+0x11c>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	e009      	b.n	8004376 <xQueueGenericReset+0xea>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3310      	adds	r3, #16
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fedc 	bl	8004124 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3324      	adds	r3, #36	; 0x24
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fed7 	bl	8004124 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8004376:	f002 f8ff 	bl	8006578 <vPortExitCritical>
 800437a:	e001      	b.n	8004380 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <xQueueGenericReset+0x110>
        __asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60bb      	str	r3, [r7, #8]
    }
 8004398:	bf00      	nop
 800439a:	e7fe      	b.n	800439a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02e      	beq.n	8004422 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043c4:	2100      	movs	r1, #0
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	fba3 2302 	umull	r2, r3, r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d000      	beq.n	80043d4 <xQueueGenericCreate+0x28>
 80043d2:	2101      	movs	r1, #1
 80043d4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d123      	bne.n	8004422 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043e2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80043e6:	d81c      	bhi.n	8004422 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3350      	adds	r3, #80	; 0x50
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 f9b0 	bl	800675c <pvPortMalloc>
 80043fc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3350      	adds	r3, #80	; 0x50
 800440c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800440e:	79fa      	ldrb	r2, [r7, #7]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f814 	bl	8004448 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004420:	e00d      	b.n	800443e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <xQueueGenericCreate+0x92>
        __asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
    }
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800443e:	69fb      	ldr	r3, [r7, #28]
    }
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e002      	b.n	800446a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004476:	2101      	movs	r1, #1
 8004478:	69b8      	ldr	r0, [r7, #24]
 800447a:	f7ff ff07 	bl	800428c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b090      	sub	sp, #64	; 0x40
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80044b8:	bf00      	nop
 80044ba:	e7fe      	b.n	80044ba <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <xQueueGenericSendFromISR+0x3c>
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <xQueueGenericSendFromISR+0x40>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <xQueueGenericSendFromISR+0x42>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d103      	bne.n	80044f8 <xQueueGenericSendFromISR+0x6a>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <xQueueGenericSendFromISR+0x6e>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <xQueueGenericSendFromISR+0x70>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	623b      	str	r3, [r7, #32]
    }
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004518:	f002 f8e0 	bl	80066dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800451c:	f3ef 8211 	mrs	r2, BASEPRI
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	61fa      	str	r2, [r7, #28]
 8004532:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004534:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <xQueueGenericSendFromISR+0xbc>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d13e      	bne.n	80045c8 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004560:	f000 f920 	bl	80047a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004564:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d112      	bne.n	8004594 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d025      	beq.n	80045c2 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	3324      	adds	r3, #36	; 0x24
 800457a:	4618      	mov	r0, r3
 800457c:	f000 ffda 	bl	8005534 <xTaskRemoveFromEventList>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01d      	beq.n	80045c2 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01a      	beq.n	80045c2 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e016      	b.n	80045c2 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004594:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004598:	2b7f      	cmp	r3, #127	; 0x7f
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	617b      	str	r3, [r7, #20]
    }
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045b6:	3301      	adds	r3, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	b25a      	sxtb	r2, r3
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80045c2:	2301      	movs	r3, #1
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80045c6:	e001      	b.n	80045cc <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80045d6:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3740      	adds	r7, #64	; 0x40
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	; 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <xQueueReceive+0x30>
        __asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	623b      	str	r3, [r7, #32]
    }
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <xQueueReceive+0x3e>
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <xQueueReceive+0x42>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <xQueueReceive+0x44>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueReceive+0x5e>
        __asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	61fb      	str	r3, [r7, #28]
    }
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004642:	f001 fa47 	bl	8005ad4 <xTaskGetSchedulerState>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <xQueueReceive+0x6e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xQueueReceive+0x72>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueReceive+0x74>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueReceive+0x8e>
        __asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	61bb      	str	r3, [r7, #24]
    }
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004672:	f001 ff51 	bl	8006518 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01f      	beq.n	80046c2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004686:	f000 f8f7 	bl	8004878 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00f      	beq.n	80046ba <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	3310      	adds	r3, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff48 	bl	8005534 <xTaskRemoveFromEventList>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <xQueueReceive+0x1bc>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80046ba:	f001 ff5d 	bl	8006578 <vPortExitCritical>
                return pdPASS;
 80046be:	2301      	movs	r3, #1
 80046c0:	e069      	b.n	8004796 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80046c8:	f001 ff56 	bl	8006578 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e062      	b.n	8004796 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046d6:	f107 0310 	add.w	r3, r7, #16
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 f8c0 	bl	8005860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046e4:	f001 ff48 	bl	8006578 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046e8:	f000 fbd8 	bl	8004e9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046ec:	f001 ff14 	bl	8006518 <vPortEnterCritical>
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d103      	bne.n	8004706 <xQueueReceive+0x122>
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470c:	b25b      	sxtb	r3, r3
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d103      	bne.n	800471c <xQueueReceive+0x138>
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471c:	f001 ff2c 	bl	8006578 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004720:	1d3a      	adds	r2, r7, #4
 8004722:	f107 0310 	add.w	r3, r7, #16
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f001 f8af 	bl	800588c <xTaskCheckForTimeOut>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d123      	bne.n	800477c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004736:	f000 f917 	bl	8004968 <prvIsQueueEmpty>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d017      	beq.n	8004770 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fe33 	bl	80053b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800474e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004750:	f000 f8b8 	bl	80048c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004754:	f000 fbb0 	bl	8004eb8 <xTaskResumeAll>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d189      	bne.n	8004672 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <xQueueReceive+0x1bc>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	e780      	b.n	8004672 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004772:	f000 f8a7 	bl	80048c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004776:	f000 fb9f 	bl	8004eb8 <xTaskResumeAll>
 800477a:	e77a      	b.n	8004672 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800477c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477e:	f000 f8a1 	bl	80048c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004782:	f000 fb99 	bl	8004eb8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004788:	f000 f8ee 	bl	8004968 <prvIsQueueEmpty>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	f43f af6f 	beq.w	8004672 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004794:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004796:	4618      	mov	r0, r3
 8004798:	3730      	adds	r7, #48	; 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10d      	bne.n	80047de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d14d      	bne.n	8004866 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f99e 	bl	8005b10 <xTaskPriorityDisinherit>
 80047d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	e043      	b.n	8004866 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d119      	bne.n	8004818 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6858      	ldr	r0, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	461a      	mov	r2, r3
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	f003 feb8 	bl	8008564 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d32b      	bcc.n	8004866 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	e026      	b.n	8004866 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68d8      	ldr	r0, [r3, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	461a      	mov	r2, r3
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	f003 fe9e 	bl	8008564 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	425b      	negs	r3, r3
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d207      	bcs.n	8004854 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	425b      	negs	r3, r3
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d105      	bne.n	8004866 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3b01      	subs	r3, #1
 8004864:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800486e:	697b      	ldr	r3, [r7, #20]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	441a      	add	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d303      	bcc.n	80048ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68d9      	ldr	r1, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	461a      	mov	r2, r3
 80048b6:	6838      	ldr	r0, [r7, #0]
 80048b8:	f003 fe54 	bl	8008564 <memcpy>
    }
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80048cc:	f001 fe24 	bl	8006518 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80048d8:	e011      	b.n	80048fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d012      	beq.n	8004908 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3324      	adds	r3, #36	; 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fe24 	bl	8005534 <xTaskRemoveFromEventList>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80048f2:	f001 f831 	bl	8005958 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	dce9      	bgt.n	80048da <prvUnlockQueue+0x16>
 8004906:	e000      	b.n	800490a <prvUnlockQueue+0x46>
                        break;
 8004908:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	22ff      	movs	r2, #255	; 0xff
 800490e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004912:	f001 fe31 	bl	8006578 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004916:	f001 fdff 	bl	8006518 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004920:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004922:	e011      	b.n	8004948 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d012      	beq.n	8004952 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3310      	adds	r3, #16
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fdff 	bl	8005534 <xTaskRemoveFromEventList>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800493c:	f001 f80c 	bl	8005958 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	3b01      	subs	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800494c:	2b00      	cmp	r3, #0
 800494e:	dce9      	bgt.n	8004924 <prvUnlockQueue+0x60>
 8004950:	e000      	b.n	8004954 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004952:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800495c:	f001 fe0c 	bl	8006578 <vPortExitCritical>
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004970:	f001 fdd2 	bl	8006518 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e001      	b.n	8004986 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004986:	f001 fdf7 	bl	8006578 <vPortExitCritical>

    return xReturn;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <vQueueAddToRegistry+0x26>
        __asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
    }
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d024      	beq.n	8004a0e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e01e      	b.n	8004a08 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <vQueueAddToRegistry+0x98>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d105      	bne.n	80049e6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <vQueueAddToRegistry+0x98>)
 80049e0:	4413      	add	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
                    break;
 80049e4:	e013      	b.n	8004a0e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <vQueueAddToRegistry+0x6e>
 80049ec:	4a0f      	ldr	r2, [pc, #60]	; (8004a2c <vQueueAddToRegistry+0x98>)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4a0b      	ldr	r2, [pc, #44]	; (8004a2c <vQueueAddToRegistry+0x98>)
 80049fe:	4413      	add	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3301      	adds	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	d9dd      	bls.n	80049ca <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004a20:	bf00      	nop
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20013090 	.word	0x20013090

08004a30 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004a40:	f001 fd6a 	bl	8006518 <vPortEnterCritical>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d103      	bne.n	8004a5a <vQueueWaitForMessageRestricted+0x2a>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d103      	bne.n	8004a70 <vQueueWaitForMessageRestricted+0x40>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a70:	f001 fd82 	bl	8006578 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3324      	adds	r3, #36	; 0x24
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd0f 	bl	80054a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004a8a:	6978      	ldr	r0, [r7, #20]
 8004a8c:	f7ff ff1a 	bl	80048c4 <prvUnlockQueue>
    }
 8004a90:	bf00      	nop
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08c      	sub	sp, #48	; 0x30
 8004a9c:	af04      	add	r7, sp, #16
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 fe55 	bl	800675c <pvPortMalloc>
 8004ab2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004aba:	2058      	movs	r0, #88	; 0x58
 8004abc:	f001 fe4e 	bl	800675c <pvPortMalloc>
 8004ac0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ace:	e005      	b.n	8004adc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8004ad0:	6978      	ldr	r0, [r7, #20]
 8004ad2:	f001 ff23 	bl	800691c <vPortFree>
 8004ad6:	e001      	b.n	8004adc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9303      	str	r3, [sp, #12]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	9302      	str	r3, [sp, #8]
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f80e 	bl	8004b1a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004afe:	69f8      	ldr	r0, [r7, #28]
 8004b00:	f000 f8b0 	bl	8004c64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004b04:	2301      	movs	r3, #1
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e002      	b.n	8004b10 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004b10:	69bb      	ldr	r3, [r7, #24]
    }
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b088      	sub	sp, #32
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	461a      	mov	r2, r3
 8004b32:	21a5      	movs	r1, #165	; 0xa5
 8004b34:	f003 fd24 	bl	8008580 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004b42:	440b      	add	r3, r1
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f023 0307 	bic.w	r3, r3, #7
 8004b50:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	617b      	str	r3, [r7, #20]
    }
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01f      	beq.n	8004bb8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e012      	b.n	8004ba4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	7819      	ldrb	r1, [r3, #0]
 8004b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3334      	adds	r3, #52	; 0x34
 8004b8e:	460a      	mov	r2, r1
 8004b90:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b09      	cmp	r3, #9
 8004ba8:	d9e9      	bls.n	8004b7e <prvInitialiseNewTask+0x64>
 8004baa:	e000      	b.n	8004bae <prvInitialiseNewTask+0x94>
            {
                break;
 8004bac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bb6:	e003      	b.n	8004bc0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d90a      	bls.n	8004bdc <prvInitialiseNewTask+0xc2>
        __asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	613b      	str	r3, [r7, #16]
    }
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d901      	bls.n	8004be6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be2:	2304      	movs	r3, #4
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fab1 	bl	8004164 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	3318      	adds	r3, #24
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff faac 	bl	8004164 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c10:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	f1c3 0205 	rsb	r2, r3, #5
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	3350      	adds	r3, #80	; 0x50
 8004c26:	2204      	movs	r2, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f003 fca8 	bl	8008580 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	3354      	adds	r3, #84	; 0x54
 8004c34:	2201      	movs	r2, #1
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f003 fca1 	bl	8008580 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	69b8      	ldr	r0, [r7, #24]
 8004c44:	f001 fb36 	bl	80062b4 <pxPortInitialiseStack>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c5a:	bf00      	nop
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004c6c:	f001 fc54 	bl	8006518 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004c70:	4b40      	ldr	r3, [pc, #256]	; (8004d74 <prvAddNewTaskToReadyList+0x110>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a3f      	ldr	r2, [pc, #252]	; (8004d74 <prvAddNewTaskToReadyList+0x110>)
 8004c78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <prvAddNewTaskToReadyList+0x114>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <prvAddNewTaskToReadyList+0x114>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c88:	4b3a      	ldr	r3, [pc, #232]	; (8004d74 <prvAddNewTaskToReadyList+0x110>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d110      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004c90:	f000 fe86 	bl	80059a0 <prvInitialiseTaskLists>
 8004c94:	e00d      	b.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004c96:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <prvAddNewTaskToReadyList+0x118>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c9e:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <prvAddNewTaskToReadyList+0x114>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d802      	bhi.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004cac:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <prvAddNewTaskToReadyList+0x114>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004cb2:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <prvAddNewTaskToReadyList+0x11c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a31      	ldr	r2, [pc, #196]	; (8004d80 <prvAddNewTaskToReadyList+0x11c>)
 8004cba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cbc:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <prvAddNewTaskToReadyList+0x11c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	2201      	movs	r2, #1
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <prvAddNewTaskToReadyList+0x120>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <prvAddNewTaskToReadyList+0x120>)
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	492b      	ldr	r1, [pc, #172]	; (8004d88 <prvAddNewTaskToReadyList+0x124>)
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	3204      	adds	r2, #4
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <prvAddNewTaskToReadyList+0x124>)
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	615a      	str	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4918      	ldr	r1, [pc, #96]	; (8004d88 <prvAddNewTaskToReadyList+0x124>)
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	1c59      	adds	r1, r3, #1
 8004d34:	4814      	ldr	r0, [pc, #80]	; (8004d88 <prvAddNewTaskToReadyList+0x124>)
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4403      	add	r3, r0
 8004d40:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004d42:	f001 fc19 	bl	8006578 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <prvAddNewTaskToReadyList+0x118>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00e      	beq.n	8004d6c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <prvAddNewTaskToReadyList+0x114>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d207      	bcs.n	8004d6c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <prvAddNewTaskToReadyList+0x128>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	200001f4 	.word	0x200001f4
 8004d78:	2000011c 	.word	0x2000011c
 8004d7c:	20000200 	.word	0x20000200
 8004d80:	20000210 	.word	0x20000210
 8004d84:	200001fc 	.word	0x200001fc
 8004d88:	20000120 	.word	0x20000120
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d017      	beq.n	8004dd2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <vTaskDelay+0x60>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <vTaskDelay+0x30>
        __asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	60bb      	str	r3, [r7, #8]
    }
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004dc0:	f000 f86c 	bl	8004e9c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 ff34 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004dcc:	f000 f874 	bl	8004eb8 <xTaskResumeAll>
 8004dd0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d107      	bne.n	8004de8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <vTaskDelay+0x64>)
 8004dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	2000021c 	.word	0x2000021c
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <vTaskStartScheduler+0x88>)
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	2282      	movs	r2, #130	; 0x82
 8004e0a:	491e      	ldr	r1, [pc, #120]	; (8004e84 <vTaskStartScheduler+0x8c>)
 8004e0c:	481e      	ldr	r0, [pc, #120]	; (8004e88 <vTaskStartScheduler+0x90>)
 8004e0e:	f7ff fe43 	bl	8004a98 <xTaskCreate>
 8004e12:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004e1a:	f000 ff8b 	bl	8005d34 <xTimerCreateTimerTask>
 8004e1e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d116      	bne.n	8004e54 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60bb      	str	r3, [r7, #8]
    }
 8004e38:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <vTaskStartScheduler+0x94>)
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <vTaskStartScheduler+0x98>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <vTaskStartScheduler+0x9c>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004e4e:	f001 fac1 	bl	80063d4 <xPortStartScheduler>
 8004e52:	e00e      	b.n	8004e72 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d10a      	bne.n	8004e72 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	607b      	str	r3, [r7, #4]
    }
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <vTaskStartScheduler+0xa0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000218 	.word	0x20000218
 8004e84:	080094bc 	.word	0x080094bc
 8004e88:	08005971 	.word	0x08005971
 8004e8c:	20000214 	.word	0x20000214
 8004e90:	20000200 	.word	0x20000200
 8004e94:	200001f8 	.word	0x200001f8
 8004e98:	2000000c 	.word	0x2000000c

08004e9c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <vTaskSuspendAll+0x18>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	4a03      	ldr	r2, [pc, #12]	; (8004eb4 <vTaskSuspendAll+0x18>)
 8004ea8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	2000021c 	.word	0x2000021c

08004eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004ec6:	4b71      	ldr	r3, [pc, #452]	; (800508c <xTaskResumeAll+0x1d4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <xTaskResumeAll+0x2c>
        __asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
    }
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004ee4:	f001 fb18 	bl	8006518 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004ee8:	4b68      	ldr	r3, [pc, #416]	; (800508c <xTaskResumeAll+0x1d4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	4a67      	ldr	r2, [pc, #412]	; (800508c <xTaskResumeAll+0x1d4>)
 8004ef0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef2:	4b66      	ldr	r3, [pc, #408]	; (800508c <xTaskResumeAll+0x1d4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 80c0 	bne.w	800507c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004efc:	4b64      	ldr	r3, [pc, #400]	; (8005090 <xTaskResumeAll+0x1d8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80bb 	beq.w	800507c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f06:	e08a      	b.n	800501e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f08:	4b62      	ldr	r3, [pc, #392]	; (8005094 <xTaskResumeAll+0x1dc>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	6a12      	ldr	r2, [r2, #32]
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	69d2      	ldr	r2, [r2, #28]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3318      	adds	r3, #24
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d103      	bne.n	8004f3e <xTaskResumeAll+0x86>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2200      	movs	r2, #0
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	1e5a      	subs	r2, r3, #1
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	68d2      	ldr	r2, [r2, #12]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	6892      	ldr	r2, [r2, #8]
 8004f66:	605a      	str	r2, [r3, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d103      	bne.n	8004f7c <xTaskResumeAll+0xc4>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	615a      	str	r2, [r3, #20]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	2201      	movs	r2, #1
 8004f92:	409a      	lsls	r2, r3
 8004f94:	4b40      	ldr	r3, [pc, #256]	; (8005098 <xTaskResumeAll+0x1e0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	; (8005098 <xTaskResumeAll+0x1e0>)
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	493e      	ldr	r1, [pc, #248]	; (800509c <xTaskResumeAll+0x1e4>)
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	3304      	adds	r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	3204      	adds	r2, #4
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	1d1a      	adds	r2, r3, #4
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	609a      	str	r2, [r3, #8]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	; (800509c <xTaskResumeAll+0x1e4>)
 8004fe2:	441a      	add	r2, r3
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	615a      	str	r2, [r3, #20]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	492b      	ldr	r1, [pc, #172]	; (800509c <xTaskResumeAll+0x1e4>)
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	4827      	ldr	r0, [pc, #156]	; (800509c <xTaskResumeAll+0x1e4>)
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4403      	add	r3, r0
 8005008:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <xTaskResumeAll+0x1e8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005018:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <xTaskResumeAll+0x1ec>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <xTaskResumeAll+0x1dc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f47f af70 	bne.w	8004f08 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800502e:	f000 fd35 	bl	8005a9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <xTaskResumeAll+0x1f0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800503e:	f000 f847 	bl	80050d0 <xTaskIncrementTick>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005048:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <xTaskResumeAll+0x1ec>)
 800504a:	2201      	movs	r2, #1
 800504c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	3b01      	subs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f1      	bne.n	800503e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <xTaskResumeAll+0x1f0>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005060:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <xTaskResumeAll+0x1ec>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <xTaskResumeAll+0x1f4>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800507c:	f001 fa7c 	bl	8006578 <vPortExitCritical>

    return xAlreadyYielded;
 8005080:	69bb      	ldr	r3, [r7, #24]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	2000021c 	.word	0x2000021c
 8005090:	200001f4 	.word	0x200001f4
 8005094:	200001b4 	.word	0x200001b4
 8005098:	200001fc 	.word	0x200001fc
 800509c:	20000120 	.word	0x20000120
 80050a0:	2000011c 	.word	0x2000011c
 80050a4:	20000208 	.word	0x20000208
 80050a8:	20000204 	.word	0x20000204
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <xTaskGetTickCount+0x1c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80050bc:	687b      	ldr	r3, [r7, #4]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	200001f8 	.word	0x200001f8

080050d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050da:	4b7d      	ldr	r3, [pc, #500]	; (80052d0 <xTaskIncrementTick+0x200>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 80ec 	bne.w	80052bc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050e4:	4b7b      	ldr	r3, [pc, #492]	; (80052d4 <xTaskIncrementTick+0x204>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80050ec:	4a79      	ldr	r2, [pc, #484]	; (80052d4 <xTaskIncrementTick+0x204>)
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d120      	bne.n	800513a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80050f8:	4b77      	ldr	r3, [pc, #476]	; (80052d8 <xTaskIncrementTick+0x208>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <xTaskIncrementTick+0x48>
        __asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	607b      	str	r3, [r7, #4]
    }
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <xTaskIncrementTick+0x46>
 8005118:	4b6f      	ldr	r3, [pc, #444]	; (80052d8 <xTaskIncrementTick+0x208>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	4b6f      	ldr	r3, [pc, #444]	; (80052dc <xTaskIncrementTick+0x20c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6d      	ldr	r2, [pc, #436]	; (80052d8 <xTaskIncrementTick+0x208>)
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4a6d      	ldr	r2, [pc, #436]	; (80052dc <xTaskIncrementTick+0x20c>)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b6c      	ldr	r3, [pc, #432]	; (80052e0 <xTaskIncrementTick+0x210>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a6b      	ldr	r2, [pc, #428]	; (80052e0 <xTaskIncrementTick+0x210>)
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	f000 fcb1 	bl	8005a9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800513a:	4b6a      	ldr	r3, [pc, #424]	; (80052e4 <xTaskIncrementTick+0x214>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	429a      	cmp	r2, r3
 8005142:	f0c0 80a6 	bcc.w	8005292 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005146:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <xTaskIncrementTick+0x208>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005150:	4b64      	ldr	r3, [pc, #400]	; (80052e4 <xTaskIncrementTick+0x214>)
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	601a      	str	r2, [r3, #0]
                    break;
 8005158:	e09b      	b.n	8005292 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515a:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <xTaskIncrementTick+0x208>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	429a      	cmp	r2, r3
 8005170:	d203      	bcs.n	800517a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005172:	4a5c      	ldr	r2, [pc, #368]	; (80052e4 <xTaskIncrementTick+0x214>)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005178:	e08b      	b.n	8005292 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	68d2      	ldr	r2, [r2, #12]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	6892      	ldr	r2, [r2, #8]
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3304      	adds	r3, #4
 800519c:	429a      	cmp	r2, r3
 800519e:	d103      	bne.n	80051a8 <xTaskIncrementTick+0xd8>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2200      	movs	r2, #0
 80051ac:	615a      	str	r2, [r3, #20]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01e      	beq.n	80051fe <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	6a12      	ldr	r2, [r2, #32]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	69d2      	ldr	r2, [r2, #28]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	3318      	adds	r3, #24
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d103      	bne.n	80051ee <xTaskIncrementTick+0x11e>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2200      	movs	r2, #0
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	2201      	movs	r2, #1
 8005204:	409a      	lsls	r2, r3
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <xTaskIncrementTick+0x218>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4313      	orrs	r3, r2
 800520c:	4a36      	ldr	r2, [pc, #216]	; (80052e8 <xTaskIncrementTick+0x218>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4935      	ldr	r1, [pc, #212]	; (80052ec <xTaskIncrementTick+0x21c>)
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3304      	adds	r3, #4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	60da      	str	r2, [r3, #12]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	3204      	adds	r2, #4
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4a26      	ldr	r2, [pc, #152]	; (80052ec <xTaskIncrementTick+0x21c>)
 8005254:	441a      	add	r2, r3
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	615a      	str	r2, [r3, #20]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4923      	ldr	r1, [pc, #140]	; (80052ec <xTaskIncrementTick+0x21c>)
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	481f      	ldr	r0, [pc, #124]	; (80052ec <xTaskIncrementTick+0x21c>)
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4403      	add	r3, r0
 800527a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <xTaskIncrementTick+0x220>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	429a      	cmp	r2, r3
 8005288:	f4ff af5d 	bcc.w	8005146 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005290:	e759      	b.n	8005146 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <xTaskIncrementTick+0x220>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4914      	ldr	r1, [pc, #80]	; (80052ec <xTaskIncrementTick+0x21c>)
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d901      	bls.n	80052ae <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <xTaskIncrementTick+0x224>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	e004      	b.n	80052c6 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <xTaskIncrementTick+0x228>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <xTaskIncrementTick+0x228>)
 80052c4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	; 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	2000021c 	.word	0x2000021c
 80052d4:	200001f8 	.word	0x200001f8
 80052d8:	200001ac 	.word	0x200001ac
 80052dc:	200001b0 	.word	0x200001b0
 80052e0:	2000020c 	.word	0x2000020c
 80052e4:	20000214 	.word	0x20000214
 80052e8:	200001fc 	.word	0x200001fc
 80052ec:	20000120 	.word	0x20000120
 80052f0:	2000011c 	.word	0x2000011c
 80052f4:	20000208 	.word	0x20000208
 80052f8:	20000204 	.word	0x20000204

080052fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005302:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <vTaskSwitchContext+0xa4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <vTaskSwitchContext+0xa8>)
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005310:	e03f      	b.n	8005392 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <vTaskSwitchContext+0xa8>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005318:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <vTaskSwitchContext+0xac>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	f1c3 031f 	rsb	r3, r3, #31
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	491f      	ldr	r1, [pc, #124]	; (80053ac <vTaskSwitchContext+0xb0>)
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	607b      	str	r3, [r7, #4]
    }
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <vTaskSwitchContext+0x5a>
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4a12      	ldr	r2, [pc, #72]	; (80053ac <vTaskSwitchContext+0xb0>)
 8005364:	4413      	add	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3308      	adds	r3, #8
 800537a:	429a      	cmp	r2, r3
 800537c:	d104      	bne.n	8005388 <vTaskSwitchContext+0x8c>
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <vTaskSwitchContext+0xb4>)
 8005390:	6013      	str	r3, [r2, #0]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	2000021c 	.word	0x2000021c
 80053a4:	20000208 	.word	0x20000208
 80053a8:	200001fc 	.word	0x200001fc
 80053ac:	20000120 	.word	0x20000120
 80053b0:	2000011c 	.word	0x2000011c

080053b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60fb      	str	r3, [r7, #12]
    }
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <vTaskPlaceOnEventList+0x44>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3318      	adds	r3, #24
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe feef 	bl	80041c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053e8:	2101      	movs	r1, #1
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f000 fc22 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	2000011c 	.word	0x2000011c

080053fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <vTaskPlaceOnUnorderedEventList+0x28>
        __asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	61bb      	str	r3, [r7, #24]
    }
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8005424:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <vTaskPlaceOnUnorderedEventList+0xa4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <vTaskPlaceOnUnorderedEventList+0x46>
        __asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	617b      	str	r3, [r7, #20]
    }
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <vTaskPlaceOnUnorderedEventList+0x44>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800544c:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	61da      	str	r2, [r3, #28]
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <vTaskPlaceOnUnorderedEventList+0xa8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	6892      	ldr	r2, [r2, #8]
 8005464:	621a      	str	r2, [r3, #32]
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	3218      	adds	r2, #24
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f103 0218 	add.w	r2, r3, #24
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	629a      	str	r2, [r3, #40]	; 0x28
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005490:	2101      	movs	r1, #1
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fbce 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
}
 8005498:	bf00      	nop
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	2000021c 	.word	0x2000021c
 80054a4:	2000011c 	.word	0x2000011c

080054a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	613b      	str	r3, [r7, #16]
    }
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	4b16      	ldr	r3, [pc, #88]	; (8005530 <vTaskPlaceOnEventListRestricted+0x88>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	61da      	str	r2, [r3, #28]
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <vTaskPlaceOnEventListRestricted+0x88>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	621a      	str	r2, [r3, #32]
 80054e8:	4b11      	ldr	r3, [pc, #68]	; (8005530 <vTaskPlaceOnEventListRestricted+0x88>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	3218      	adds	r2, #24
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <vTaskPlaceOnEventListRestricted+0x88>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f103 0218 	add.w	r2, r3, #24
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vTaskPlaceOnEventListRestricted+0x88>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	68b8      	ldr	r0, [r7, #8]
 8005522:	f000 fb87 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
    }
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	2000011c 	.word	0x2000011c

08005534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005534:	b480      	push	{r7}
 8005536:	b08b      	sub	sp, #44	; 0x2c
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	60fb      	str	r3, [r7, #12]
    }
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	6a12      	ldr	r2, [r2, #32]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	6a3a      	ldr	r2, [r7, #32]
 8005576:	69d2      	ldr	r2, [r2, #28]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	3318      	adds	r3, #24
 8005582:	429a      	cmp	r2, r3
 8005584:	d103      	bne.n	800558e <xTaskRemoveFromEventList+0x5a>
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	2200      	movs	r2, #0
 8005592:	629a      	str	r2, [r3, #40]	; 0x28
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1e5a      	subs	r2, r3, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800559e:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <xTaskRemoveFromEventList+0x194>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d15e      	bne.n	8005664 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	68d2      	ldr	r2, [r2, #12]
 80055b4:	609a      	str	r2, [r3, #8]
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	6892      	ldr	r2, [r2, #8]
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	3304      	adds	r3, #4
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d103      	bne.n	80055d4 <xTaskRemoveFromEventList+0xa0>
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	605a      	str	r2, [r3, #4]
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	2200      	movs	r2, #0
 80055d8:	615a      	str	r2, [r3, #20]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1e5a      	subs	r2, r3, #1
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	2201      	movs	r2, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	4b37      	ldr	r3, [pc, #220]	; (80056cc <xTaskRemoveFromEventList+0x198>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	4a36      	ldr	r2, [pc, #216]	; (80056cc <xTaskRemoveFromEventList+0x198>)
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	4935      	ldr	r1, [pc, #212]	; (80056d0 <xTaskRemoveFromEventList+0x19c>)
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3304      	adds	r3, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	3204      	adds	r2, #4
 8005622:	605a      	str	r2, [r3, #4]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	609a      	str	r2, [r3, #8]
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <xTaskRemoveFromEventList+0x19c>)
 800563a:	441a      	add	r2, r3
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	615a      	str	r2, [r3, #20]
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	4922      	ldr	r1, [pc, #136]	; (80056d0 <xTaskRemoveFromEventList+0x19c>)
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	481e      	ldr	r0, [pc, #120]	; (80056d0 <xTaskRemoveFromEventList+0x19c>)
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4403      	add	r3, r0
 8005660:	6019      	str	r1, [r3, #0]
 8005662:	e01b      	b.n	800569c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <xTaskRemoveFromEventList+0x1a0>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	61da      	str	r2, [r3, #28]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	621a      	str	r2, [r3, #32]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	3218      	adds	r2, #24
 8005680:	605a      	str	r2, [r3, #4]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f103 0218 	add.w	r2, r3, #24
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <xTaskRemoveFromEventList+0x1a0>)
 8005690:	629a      	str	r2, [r3, #40]	; 0x28
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <xTaskRemoveFromEventList+0x1a0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <xTaskRemoveFromEventList+0x1a0>)
 800569a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <xTaskRemoveFromEventList+0x1a4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d905      	bls.n	80056b6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <xTaskRemoveFromEventList+0x1a8>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e001      	b.n	80056ba <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056bc:	4618      	mov	r0, r3
 80056be:	372c      	adds	r7, #44	; 0x2c
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	2000021c 	.word	0x2000021c
 80056cc:	200001fc 	.word	0x200001fc
 80056d0:	20000120 	.word	0x20000120
 80056d4:	200001b4 	.word	0x200001b4
 80056d8:	2000011c 	.word	0x2000011c
 80056dc:	20000208 	.word	0x20000208

080056e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80056ea:	4b58      	ldr	r3, [pc, #352]	; (800584c <vTaskRemoveFromUnorderedEventList+0x16c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <vTaskRemoveFromUnorderedEventList+0x28>
        __asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
    }
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10a      	bne.n	8005734 <vTaskRemoveFromUnorderedEventList+0x54>
        __asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
    }
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <vTaskRemoveFromUnorderedEventList+0x52>
    listREMOVE_ITEM( pxEventListItem );
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6892      	ldr	r2, [r2, #8]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6852      	ldr	r2, [r2, #4]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d103      	bne.n	8005760 <vTaskRemoveFromUnorderedEventList+0x80>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	609a      	str	r2, [r3, #8]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	6892      	ldr	r2, [r2, #8]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3304      	adds	r3, #4
 8005792:	429a      	cmp	r2, r3
 8005794:	d103      	bne.n	800579e <vTaskRemoveFromUnorderedEventList+0xbe>
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2200      	movs	r2, #0
 80057a2:	615a      	str	r2, [r3, #20]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	2201      	movs	r2, #1
 80057b4:	409a      	lsls	r2, r3
 80057b6:	4b26      	ldr	r3, [pc, #152]	; (8005850 <vTaskRemoveFromUnorderedEventList+0x170>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	4a24      	ldr	r2, [pc, #144]	; (8005850 <vTaskRemoveFromUnorderedEventList+0x170>)
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c4:	4923      	ldr	r1, [pc, #140]	; (8005854 <vTaskRemoveFromUnorderedEventList+0x174>)
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	3304      	adds	r3, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	3204      	adds	r2, #4
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1d1a      	adds	r2, r3, #4
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4a14      	ldr	r2, [pc, #80]	; (8005854 <vTaskRemoveFromUnorderedEventList+0x174>)
 8005804:	441a      	add	r2, r3
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4911      	ldr	r1, [pc, #68]	; (8005854 <vTaskRemoveFromUnorderedEventList+0x174>)
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	480d      	ldr	r0, [pc, #52]	; (8005854 <vTaskRemoveFromUnorderedEventList+0x174>)
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4403      	add	r3, r0
 800582a:	6019      	str	r1, [r3, #0]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4b09      	ldr	r3, [pc, #36]	; (8005858 <vTaskRemoveFromUnorderedEventList+0x178>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	429a      	cmp	r2, r3
 8005838:	d902      	bls.n	8005840 <vTaskRemoveFromUnorderedEventList+0x160>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 800583a:	4b08      	ldr	r3, [pc, #32]	; (800585c <vTaskRemoveFromUnorderedEventList+0x17c>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
    }
}
 8005840:	bf00      	nop
 8005842:	3724      	adds	r7, #36	; 0x24
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	2000021c 	.word	0x2000021c
 8005850:	200001fc 	.word	0x200001fc
 8005854:	20000120 	.word	0x20000120
 8005858:	2000011c 	.word	0x2000011c
 800585c:	20000208 	.word	0x20000208

08005860 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <vTaskInternalSetTimeOutState+0x24>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <vTaskInternalSetTimeOutState+0x28>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	605a      	str	r2, [r3, #4]
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	2000020c 	.word	0x2000020c
 8005888:	200001f8 	.word	0x200001f8

0800588c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	613b      	str	r3, [r7, #16]
    }
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
    }
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80058ce:	f000 fe23 	bl	8006518 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80058d2:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <xTaskCheckForTimeOut+0xc4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d102      	bne.n	80058f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e026      	b.n	8005940 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b17      	ldr	r3, [pc, #92]	; (8005954 <xTaskCheckForTimeOut+0xc8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d00a      	beq.n	8005914 <xTaskCheckForTimeOut+0x88>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d305      	bcc.n	8005914 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e015      	b.n	8005940 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	429a      	cmp	r2, r3
 800591c:	d20b      	bcs.n	8005936 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff ff98 	bl	8005860 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e004      	b.n	8005940 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800593c:	2301      	movs	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005940:	f000 fe1a 	bl	8006578 <vPortExitCritical>

    return xReturn;
 8005944:	69fb      	ldr	r3, [r7, #28]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	200001f8 	.word	0x200001f8
 8005954:	2000020c 	.word	0x2000020c

08005958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <vTaskMissedYield+0x14>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000208 	.word	0x20000208

08005970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005978:	f000 f852 	bl	8005a20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <prvIdleTask+0x28>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d9f9      	bls.n	8005978 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <prvIdleTask+0x2c>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005994:	e7f0      	b.n	8005978 <prvIdleTask+0x8>
 8005996:	bf00      	nop
 8005998:	20000120 	.word	0x20000120
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e00c      	b.n	80059c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <prvInitialiseTaskLists+0x60>)
 80059b8:	4413      	add	r3, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fbb2 	bl	8004124 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3301      	adds	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d9ef      	bls.n	80059ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80059cc:	480d      	ldr	r0, [pc, #52]	; (8005a04 <prvInitialiseTaskLists+0x64>)
 80059ce:	f7fe fba9 	bl	8004124 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80059d2:	480d      	ldr	r0, [pc, #52]	; (8005a08 <prvInitialiseTaskLists+0x68>)
 80059d4:	f7fe fba6 	bl	8004124 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80059d8:	480c      	ldr	r0, [pc, #48]	; (8005a0c <prvInitialiseTaskLists+0x6c>)
 80059da:	f7fe fba3 	bl	8004124 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80059de:	480c      	ldr	r0, [pc, #48]	; (8005a10 <prvInitialiseTaskLists+0x70>)
 80059e0:	f7fe fba0 	bl	8004124 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80059e4:	480b      	ldr	r0, [pc, #44]	; (8005a14 <prvInitialiseTaskLists+0x74>)
 80059e6:	f7fe fb9d 	bl	8004124 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <prvInitialiseTaskLists+0x78>)
 80059ec:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <prvInitialiseTaskLists+0x64>)
 80059ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <prvInitialiseTaskLists+0x7c>)
 80059f2:	4a05      	ldr	r2, [pc, #20]	; (8005a08 <prvInitialiseTaskLists+0x68>)
 80059f4:	601a      	str	r2, [r3, #0]
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000120 	.word	0x20000120
 8005a04:	20000184 	.word	0x20000184
 8005a08:	20000198 	.word	0x20000198
 8005a0c:	200001b4 	.word	0x200001b4
 8005a10:	200001c8 	.word	0x200001c8
 8005a14:	200001e0 	.word	0x200001e0
 8005a18:	200001ac 	.word	0x200001ac
 8005a1c:	200001b0 	.word	0x200001b0

08005a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a26:	e019      	b.n	8005a5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005a28:	f000 fd76 	bl	8006518 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <prvCheckTasksWaitingTermination+0x50>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fbfd 	bl	8004238 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <prvCheckTasksWaitingTermination+0x54>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	4a0b      	ldr	r2, [pc, #44]	; (8005a74 <prvCheckTasksWaitingTermination+0x54>)
 8005a46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <prvCheckTasksWaitingTermination+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <prvCheckTasksWaitingTermination+0x58>)
 8005a50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005a52:	f000 fd91 	bl	8006578 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f810 	bl	8005a7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <prvCheckTasksWaitingTermination+0x58>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e1      	bne.n	8005a28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200001c8 	.word	0x200001c8
 8005a74:	200001f4 	.word	0x200001f4
 8005a78:	200001dc 	.word	0x200001dc

08005a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 ff47 	bl	800691c <vPortFree>
                vPortFree( pxTCB );
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 ff44 	bl	800691c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvResetNextTaskUnblockTime+0x30>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <prvResetNextTaskUnblockTime+0x34>)
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005ab2:	e005      	b.n	8005ac0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <prvResetNextTaskUnblockTime+0x30>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <prvResetNextTaskUnblockTime+0x34>)
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	200001ac 	.word	0x200001ac
 8005ad0:	20000214 	.word	0x20000214

08005ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <xTaskGetSchedulerState+0x34>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	e008      	b.n	8005afa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae8:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <xTaskGetSchedulerState+0x38>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005af0:	2302      	movs	r3, #2
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	e001      	b.n	8005afa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005af6:	2300      	movs	r3, #0
 8005af8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005afa:	687b      	ldr	r3, [r7, #4]
    }
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20000200 	.word	0x20000200
 8005b0c:	2000021c 	.word	0x2000021c

08005b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d063      	beq.n	8005bee <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005b26:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <xTaskPriorityDisinherit+0xe8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d00a      	beq.n	8005b46 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
    }
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60bb      	str	r3, [r7, #8]
    }
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d039      	beq.n	8005bee <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d135      	bne.n	8005bee <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fb56 	bl	8004238 <uxListRemove>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	2201      	movs	r2, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <xTaskPriorityDisinherit+0xec>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <xTaskPriorityDisinherit+0xec>)
 8005ba6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	f1c3 0205 	rsb	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <xTaskPriorityDisinherit+0xec>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	4a0c      	ldr	r2, [pc, #48]	; (8005bfc <xTaskPriorityDisinherit+0xec>)
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <xTaskPriorityDisinherit+0xf0>)
 8005bdc:	441a      	add	r2, r3
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f7fe faca 	bl	800417e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005bee:	697b      	ldr	r3, [r7, #20]
    }
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	2000011c 	.word	0x2000011c
 8005bfc:	200001fc 	.word	0x200001fc
 8005c00:	20000120 	.word	0x20000120

08005c04 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <uxTaskResetEventItemValue+0x2c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c12:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <uxTaskResetEventItemValue+0x2c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <uxTaskResetEventItemValue+0x2c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f1c2 0205 	rsb	r2, r2, #5
 8005c20:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8005c22:	687b      	ldr	r3, [r7, #4]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	2000011c 	.word	0x2000011c

08005c34 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005c3e:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe faf4 	bl	8004238 <uxListRemove>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c56:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43da      	mvns	r2, r3
 8005c64:	4b2e      	ldr	r3, [pc, #184]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xec>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	4a2d      	ldr	r2, [pc, #180]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xec>)
 8005c6c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d124      	bne.n	8005cc0 <prvAddCurrentTaskToDelayedList+0x8c>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d021      	beq.n	8005cc0 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
            	traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c7c:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	609a      	str	r2, [r3, #8]
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	6892      	ldr	r2, [r2, #8]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	3204      	adds	r2, #4
 8005c9e:	605a      	str	r2, [r3, #4]
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	1d1a      	adds	r2, r3, #4
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1d      	ldr	r2, [pc, #116]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005cb0:	615a      	str	r2, [r3, #20]
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005cbe:	e026      	b.n	8005d0e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d209      	bcs.n	8005cec <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f7fe fa6e 	bl	80041c6 <vListInsert>
}
 8005cea:	e010      	b.n	8005d0e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cec:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xf8>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fe fa64 	bl	80041c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d202      	bcs.n	8005d0e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6013      	str	r3, [r2, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200001f8 	.word	0x200001f8
 8005d1c:	2000011c 	.word	0x2000011c
 8005d20:	200001fc 	.word	0x200001fc
 8005d24:	200001e0 	.word	0x200001e0
 8005d28:	200001b0 	.word	0x200001b0
 8005d2c:	200001ac 	.word	0x200001ac
 8005d30:	20000214 	.word	0x20000214

08005d34 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005d3e:	f000 fa63 	bl	8006208 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <xTimerCreateTimerTask+0x54>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <xTimerCreateTimerTask+0x58>)
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	2302      	movs	r3, #2
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005d58:	490d      	ldr	r1, [pc, #52]	; (8005d90 <xTimerCreateTimerTask+0x5c>)
 8005d5a:	480e      	ldr	r0, [pc, #56]	; (8005d94 <xTimerCreateTimerTask+0x60>)
 8005d5c:	f7fe fe9c 	bl	8004a98 <xTaskCreate>
 8005d60:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	603b      	str	r3, [r7, #0]
    }
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005d7e:	687b      	ldr	r3, [r7, #4]
    }
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000250 	.word	0x20000250
 8005d8c:	20000254 	.word	0x20000254
 8005d90:	080094c4 	.word	0x080094c4
 8005d94:	08005e3d 	.word	0x08005e3d

08005d98 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005da4:	e008      	b.n	8005db8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	18d1      	adds	r1, r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f8dd 	bl	8005f84 <prvInsertTimerInActiveList>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ea      	bne.n	8005da6 <prvReloadTimer+0xe>
        }
    }
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvProcessExpiredTimer+0x5c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fa1f 	bl	8004238 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff ffc3 	bl	8005d98 <prvReloadTimer>
 8005e12:	e008      	b.n	8005e26 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	4798      	blx	r3
    }
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000248 	.word	0x20000248

08005e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f857 	bl	8005efc <prvGetNextExpireTime>
 8005e4e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f803 	bl	8005e60 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005e5a:	f000 f8d5 	bl	8006008 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e5e:	e7f1      	b.n	8005e44 <prvTimerTask+0x8>

08005e60 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005e6a:	f7ff f817 	bl	8004e9c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f866 	bl	8005f44 <prvSampleTimeNow>
 8005e78:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d130      	bne.n	8005ee2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d806      	bhi.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005e8e:	f7ff f813 	bl	8004eb8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ffa1 	bl	8005ddc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005e9a:	e024      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <prvProcessTimerOrBlockTask+0x90>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <prvProcessTimerOrBlockTask+0x50>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <prvProcessTimerOrBlockTask+0x52>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvProcessTimerOrBlockTask+0x94>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fe fdb5 	bl	8004a30 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005ec6:	f7fe fff7 	bl	8004eb8 <xTaskResumeAll>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvProcessTimerOrBlockTask+0x98>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
    }
 8005ee0:	e001      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005ee2:	f7fe ffe9 	bl	8004eb8 <xTaskResumeAll>
    }
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	2000024c 	.word	0x2000024c
 8005ef4:	20000250 	.word	0x20000250
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <prvGetNextExpireTime+0x16>
 8005f0e:	2201      	movs	r2, #1
 8005f10:	e000      	b.n	8005f14 <prvGetNextExpireTime+0x18>
 8005f12:	2200      	movs	r2, #0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e001      	b.n	8005f30 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005f30:	68fb      	ldr	r3, [r7, #12]
    }
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000248 	.word	0x20000248

08005f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005f4c:	f7ff f8b0 	bl	80050b0 <xTaskGetTickCount>
 8005f50:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d205      	bcs.n	8005f68 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005f5c:	f000 f92e 	bl	80061bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005f6e:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005f74:	68fb      	ldr	r3, [r7, #12]
    }
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000258 	.word	0x20000258

08005f84 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d812      	bhi.n	8005fd0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e01b      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <prvInsertTimerInActiveList+0x7c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fe f8fc 	bl	80041c6 <vListInsert>
 8005fce:	e012      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d206      	bcs.n	8005fe6 <prvInsertTimerInActiveList+0x62>
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e007      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <prvInsertTimerInActiveList+0x80>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fe f8e8 	bl	80041c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005ff6:	697b      	ldr	r3, [r7, #20]
    }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	2000024c 	.word	0x2000024c
 8006004:	20000248 	.word	0x20000248

08006008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	e0c2      	b.n	8006196 <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da18      	bge.n	8006048 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	3304      	adds	r3, #4
 800601a:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <prvProcessReceivedCommands+0x30>
        __asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61bb      	str	r3, [r7, #24]
    }
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603e:	6850      	ldr	r0, [r2, #4]
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	4611      	mov	r1, r2
 8006046:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f2c0 80a2 	blt.w	8006194 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe f8e9 	bl	8004238 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006066:	463b      	mov	r3, r7
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff6b 	bl	8005f44 <prvSampleTimeNow>
 800606e:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	2b08      	cmp	r3, #8
 8006076:	f200 808e 	bhi.w	8006196 <prvProcessReceivedCommands+0x18e>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <prvProcessReceivedCommands+0x78>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060a5 	.word	0x080060a5
 8006088:	0800610d 	.word	0x0800610d
 800608c:	08006121 	.word	0x08006121
 8006090:	0800616b 	.word	0x0800616b
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060a5 	.word	0x080060a5
 800609c:	0800610d 	.word	0x0800610d
 80060a0:	08006121 	.word	0x08006121
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	18d1      	adds	r1, r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	6a38      	ldr	r0, [r7, #32]
 80060c4:	f7ff ff5e 	bl	8005f84 <prvInsertTimerInActiveList>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d063      	beq.n	8006196 <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	4413      	add	r3, r2
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6a38      	ldr	r0, [r7, #32]
 80060ea:	f7ff fe55 	bl	8005d98 <prvReloadTimer>
 80060ee:	e008      	b.n	8006102 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	6a38      	ldr	r0, [r7, #32]
 8006108:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800610a:	e044      	b.n	8006196 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800611e:	e03a      	b.n	8006196 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <prvProcessReceivedCommands+0x14e>
        __asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	617b      	str	r3, [r7, #20]
    }
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	18d1      	adds	r1, r2, r3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	6a38      	ldr	r0, [r7, #32]
 8006164:	f7ff ff0e 	bl	8005f84 <prvInsertTimerInActiveList>
                        break;
 8006168:	e015      	b.n	8006196 <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <prvProcessReceivedCommands+0x178>
                                {
                                    vPortFree( pxTimer );
 8006178:	6a38      	ldr	r0, [r7, #32]
 800617a:	f000 fbcf 	bl	800691c <vPortFree>
 800617e:	e00a      	b.n	8006196 <prvProcessReceivedCommands+0x18e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006192:	e000      	b.n	8006196 <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006194:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006196:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <prvProcessReceivedCommands+0x1b0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1d39      	adds	r1, r7, #4
 800619c:	2200      	movs	r2, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fa20 	bl	80045e4 <xQueueReceive>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f47f af32 	bne.w	8006010 <prvProcessReceivedCommands+0x8>
        }
    }
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	3728      	adds	r7, #40	; 0x28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000250 	.word	0x20000250

080061bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061c2:	e009      	b.n	80061d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <prvSwitchTimerLists+0x44>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80061ce:	f04f 31ff 	mov.w	r1, #4294967295
 80061d2:	6838      	ldr	r0, [r7, #0]
 80061d4:	f7ff fe02 	bl	8005ddc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <prvSwitchTimerLists+0x44>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvSwitchTimerLists+0x44>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <prvSwitchTimerLists+0x48>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvSwitchTimerLists+0x44>)
 80061ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80061f0:	4a04      	ldr	r2, [pc, #16]	; (8006204 <prvSwitchTimerLists+0x48>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6013      	str	r3, [r2, #0]
    }
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000248 	.word	0x20000248
 8006204:	2000024c 	.word	0x2000024c

08006208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800620c:	f000 f984 	bl	8006518 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <prvCheckForValidListAndQueue+0x54>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11d      	bne.n	8006254 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006218:	4811      	ldr	r0, [pc, #68]	; (8006260 <prvCheckForValidListAndQueue+0x58>)
 800621a:	f7fd ff83 	bl	8004124 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800621e:	4811      	ldr	r0, [pc, #68]	; (8006264 <prvCheckForValidListAndQueue+0x5c>)
 8006220:	f7fd ff80 	bl	8004124 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006224:	4b10      	ldr	r3, [pc, #64]	; (8006268 <prvCheckForValidListAndQueue+0x60>)
 8006226:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <prvCheckForValidListAndQueue+0x58>)
 8006228:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800622a:	4b10      	ldr	r3, [pc, #64]	; (800626c <prvCheckForValidListAndQueue+0x64>)
 800622c:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <prvCheckForValidListAndQueue+0x5c>)
 800622e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006230:	2200      	movs	r2, #0
 8006232:	2110      	movs	r1, #16
 8006234:	200a      	movs	r0, #10
 8006236:	f7fe f8b9 	bl	80043ac <xQueueGenericCreate>
 800623a:	4603      	mov	r3, r0
 800623c:	4a07      	ldr	r2, [pc, #28]	; (800625c <prvCheckForValidListAndQueue+0x54>)
 800623e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <prvCheckForValidListAndQueue+0x54>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <prvCheckForValidListAndQueue+0x54>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4908      	ldr	r1, [pc, #32]	; (8006270 <prvCheckForValidListAndQueue+0x68>)
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fba0 	bl	8004994 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006254:	f000 f990 	bl	8006578 <vPortExitCritical>
    }
 8006258:	bf00      	nop
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000250 	.word	0x20000250
 8006260:	20000220 	.word	0x20000220
 8006264:	20000234 	.word	0x20000234
 8006268:	20000248 	.word	0x20000248
 800626c:	2000024c 	.word	0x2000024c
 8006270:	080094cc 	.word	0x080094cc

08006274 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006282:	f06f 0301 	mvn.w	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <xTimerPendFunctionCallFromISR+0x3c>)
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	f107 0114 	add.w	r1, r7, #20
 800629c:	2300      	movs	r3, #0
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	f7fe f8f5 	bl	800448e <xQueueGenericSendFromISR>
 80062a4:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	; 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20000250 	.word	0x20000250

080062b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3b04      	subs	r3, #4
 80062c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f023 0201 	bic.w	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80062e4:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <pxPortInitialiseStack+0x64>)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b14      	subs	r3, #20
 80062ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3b04      	subs	r3, #4
 80062fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f06f 0202 	mvn.w	r2, #2
 8006302:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3b20      	subs	r3, #32
 8006308:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	0800631d 	.word	0x0800631d

0800631c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006326:	4b12      	ldr	r3, [pc, #72]	; (8006370 <prvTaskExitError+0x54>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d00a      	beq.n	8006346 <prvTaskExitError+0x2a>
        __asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
    }
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <prvTaskExitError+0x28>
        __asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60bb      	str	r3, [r7, #8]
    }
 8006358:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800635a:	bf00      	nop
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0fc      	beq.n	800635c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000010 	.word	0x20000010
	...

08006380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <pxCurrentTCBConst2>)
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	6808      	ldr	r0, [r1, #0]
 8006386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	f380 8809 	msr	PSP, r0
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8811 	msr	BASEPRI, r0
 800639a:	4770      	bx	lr
 800639c:	f3af 8000 	nop.w

080063a0 <pxCurrentTCBConst2>:
 80063a0:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80063a8:	4808      	ldr	r0, [pc, #32]	; (80063cc <prvPortStartFirstTask+0x24>)
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	6800      	ldr	r0, [r0, #0]
 80063ae:	f380 8808 	msr	MSP, r0
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8814 	msr	CONTROL, r0
 80063ba:	b662      	cpsie	i
 80063bc:	b661      	cpsie	f
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	df00      	svc	0
 80063c8:	bf00      	nop
 80063ca:	0000      	.short	0x0000
 80063cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop

080063d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063da:	4b46      	ldr	r3, [pc, #280]	; (80064f4 <xPortStartScheduler+0x120>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a46      	ldr	r2, [pc, #280]	; (80064f8 <xPortStartScheduler+0x124>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10a      	bne.n	80063fa <xPortStartScheduler+0x26>
        __asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
    }
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063fa:	4b3e      	ldr	r3, [pc, #248]	; (80064f4 <xPortStartScheduler+0x120>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <xPortStartScheduler+0x128>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10a      	bne.n	800641a <xPortStartScheduler+0x46>
        __asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
    }
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800641a:	4b39      	ldr	r3, [pc, #228]	; (8006500 <xPortStartScheduler+0x12c>)
 800641c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	22ff      	movs	r2, #255	; 0xff
 800642a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4b31      	ldr	r3, [pc, #196]	; (8006504 <xPortStartScheduler+0x130>)
 8006440:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006442:	4b31      	ldr	r3, [pc, #196]	; (8006508 <xPortStartScheduler+0x134>)
 8006444:	2207      	movs	r2, #7
 8006446:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006448:	e009      	b.n	800645e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800644a:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <xPortStartScheduler+0x134>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3b01      	subs	r3, #1
 8006450:	4a2d      	ldr	r2, [pc, #180]	; (8006508 <xPortStartScheduler+0x134>)
 8006452:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006466:	2b80      	cmp	r3, #128	; 0x80
 8006468:	d0ef      	beq.n	800644a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800646a:	4b27      	ldr	r3, [pc, #156]	; (8006508 <xPortStartScheduler+0x134>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1c3 0307 	rsb	r3, r3, #7
 8006472:	2b04      	cmp	r3, #4
 8006474:	d00a      	beq.n	800648c <xPortStartScheduler+0xb8>
        __asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	60bb      	str	r3, [r7, #8]
    }
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <xPortStartScheduler+0x134>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <xPortStartScheduler+0x134>)
 8006494:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006496:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <xPortStartScheduler+0x134>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800649e:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <xPortStartScheduler+0x134>)
 80064a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <xPortStartScheduler+0x138>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a17      	ldr	r2, [pc, #92]	; (800650c <xPortStartScheduler+0x138>)
 80064b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <xPortStartScheduler+0x138>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a14      	ldr	r2, [pc, #80]	; (800650c <xPortStartScheduler+0x138>)
 80064bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80064c2:	f000 f8db 	bl	800667c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <xPortStartScheduler+0x13c>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80064cc:	f000 f8fa 	bl	80066c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <xPortStartScheduler+0x140>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0f      	ldr	r2, [pc, #60]	; (8006514 <xPortStartScheduler+0x140>)
 80064d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80064dc:	f7ff ff64 	bl	80063a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80064e0:	f7fe ff0c 	bl	80052fc <vTaskSwitchContext>
    prvTaskExitError();
 80064e4:	f7ff ff1a 	bl	800631c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	e000ed00 	.word	0xe000ed00
 80064f8:	410fc271 	.word	0x410fc271
 80064fc:	410fc270 	.word	0x410fc270
 8006500:	e000e400 	.word	0xe000e400
 8006504:	2000025c 	.word	0x2000025c
 8006508:	20000260 	.word	0x20000260
 800650c:	e000ed20 	.word	0xe000ed20
 8006510:	20000010 	.word	0x20000010
 8006514:	e000ef34 	.word	0xe000ef34

08006518 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
        __asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
    }
 8006530:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006532:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <vPortEnterCritical+0x58>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	4a0d      	ldr	r2, [pc, #52]	; (8006570 <vPortEnterCritical+0x58>)
 800653a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800653c:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <vPortEnterCritical+0x58>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d10f      	bne.n	8006564 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <vPortEnterCritical+0x5c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <vPortEnterCritical+0x4c>
        __asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	603b      	str	r3, [r7, #0]
    }
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vPortEnterCritical+0x4a>
    }
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000010 	.word	0x20000010
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <vPortExitCritical+0x50>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <vPortExitCritical+0x24>
        __asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	607b      	str	r3, [r7, #4]
    }
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <vPortExitCritical+0x50>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <vPortExitCritical+0x50>)
 80065a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80065a6:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <vPortExitCritical+0x50>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d105      	bne.n	80065ba <vPortExitCritical+0x42>
 80065ae:	2300      	movs	r3, #0
 80065b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	f383 8811 	msr	BASEPRI, r3
    }
 80065b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000010 	.word	0x20000010
 80065cc:	00000000 	.word	0x00000000

080065d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80065d0:	f3ef 8009 	mrs	r0, PSP
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4b15      	ldr	r3, [pc, #84]	; (8006630 <pxCurrentTCBConst>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	f01e 0f10 	tst.w	lr, #16
 80065e0:	bf08      	it	eq
 80065e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	6010      	str	r0, [r2, #0]
 80065ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065f4:	f380 8811 	msr	BASEPRI, r0
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f7fe fe7c 	bl	80052fc <vTaskSwitchContext>
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	f380 8811 	msr	BASEPRI, r0
 800660c:	bc09      	pop	{r0, r3}
 800660e:	6819      	ldr	r1, [r3, #0]
 8006610:	6808      	ldr	r0, [r1, #0]
 8006612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006616:	f01e 0f10 	tst.w	lr, #16
 800661a:	bf08      	it	eq
 800661c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006620:	f380 8809 	msr	PSP, r0
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst>:
 8006630:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
        __asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
    }
 8006650:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006652:	f7fe fd3d 	bl	80050d0 <xTaskIncrementTick>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <SysTick_Handler+0x2c>
        {
        	traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <SysTick_Handler+0x40>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
    }
 800666e:	bf00      	nop
   		{
   			traceISR_EXIT();
     	}
    }
    portENABLE_INTERRUPTS();
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <vPortSetupTimerInterrupt+0x34>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <vPortSetupTimerInterrupt+0x38>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <vPortSetupTimerInterrupt+0x3c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <vPortSetupTimerInterrupt+0x40>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	099b      	lsrs	r3, r3, #6
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <vPortSetupTimerInterrupt+0x44>)
 800669a:	3b01      	subs	r3, #1
 800669c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800669e:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <vPortSetupTimerInterrupt+0x34>)
 80066a0:	2207      	movs	r2, #7
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	e000e010 	.word	0xe000e010
 80066b4:	e000e018 	.word	0xe000e018
 80066b8:	20000000 	.word	0x20000000
 80066bc:	10624dd3 	.word	0x10624dd3
 80066c0:	e000e014 	.word	0xe000e014

080066c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80066c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066d4 <vPortEnableVFP+0x10>
 80066c8:	6801      	ldr	r1, [r0, #0]
 80066ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066ce:	6001      	str	r1, [r0, #0]
 80066d0:	4770      	bx	lr
 80066d2:	0000      	.short	0x0000
 80066d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop

080066dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80066e2:	f3ef 8305 	mrs	r3, IPSR
 80066e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b0f      	cmp	r3, #15
 80066ec:	d914      	bls.n	8006718 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ee:	4a17      	ldr	r2, [pc, #92]	; (800674c <vPortValidateInterruptPriority+0x70>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <vPortValidateInterruptPriority+0x74>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	7afa      	ldrb	r2, [r7, #11]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d20a      	bcs.n	8006718 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	607b      	str	r3, [r7, #4]
    }
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <vPortValidateInterruptPriority+0x78>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <vPortValidateInterruptPriority+0x7c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d90a      	bls.n	800673e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	603b      	str	r3, [r7, #0]
    }
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <vPortValidateInterruptPriority+0x60>
    }
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e3f0 	.word	0xe000e3f0
 8006750:	2000025c 	.word	0x2000025c
 8006754:	e000ed0c 	.word	0xe000ed0c
 8006758:	20000260 	.word	0x20000260

0800675c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006768:	f7fe fb98 	bl	8004e9c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialization to setup the list of free blocks. */
        if( pxEnd == NULL )
 800676c:	4b65      	ldr	r3, [pc, #404]	; (8006904 <pvPortMalloc+0x1a8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006774:	f000 f934 	bl	80069e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006778:	4b63      	ldr	r3, [pc, #396]	; (8006908 <pvPortMalloc+0x1ac>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 80a7 	bne.w	80068d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d02d      	beq.n	80067e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800678c:	2208      	movs	r2, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d227      	bcs.n	80067e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006798:	2208      	movs	r2, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d021      	beq.n	80067ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f023 0307 	bic.w	r3, r3, #7
 80067b0:	3308      	adds	r3, #8
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d214      	bcs.n	80067e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f023 0307 	bic.w	r3, r3, #7
 80067be:	3308      	adds	r3, #8
 80067c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d010      	beq.n	80067ee <pvPortMalloc+0x92>
        __asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	617b      	str	r3, [r7, #20]
    }
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067e6:	e002      	b.n	80067ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	e000      	b.n	80067f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d06e      	beq.n	80068d4 <pvPortMalloc+0x178>
 80067f6:	4b45      	ldr	r3, [pc, #276]	; (800690c <pvPortMalloc+0x1b0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d869      	bhi.n	80068d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006800:	4b43      	ldr	r3, [pc, #268]	; (8006910 <pvPortMalloc+0x1b4>)
 8006802:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006804:	4b42      	ldr	r3, [pc, #264]	; (8006910 <pvPortMalloc+0x1b4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800680a:	e004      	b.n	8006816 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	d903      	bls.n	8006828 <pvPortMalloc+0xcc>
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f1      	bne.n	800680c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006828:	4b36      	ldr	r3, [pc, #216]	; (8006904 <pvPortMalloc+0x1a8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682e:	429a      	cmp	r2, r3
 8006830:	d050      	beq.n	80068d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2208      	movs	r2, #8
 8006838:	4413      	add	r3, r2
 800683a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	1ad2      	subs	r2, r2, r3
 800684c:	2308      	movs	r3, #8
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	429a      	cmp	r2, r3
 8006852:	d91f      	bls.n	8006894 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <pvPortMalloc+0x120>
        __asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	613b      	str	r3, [r7, #16]
    }
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800688e:	69b8      	ldr	r0, [r7, #24]
 8006890:	f000 f908 	bl	8006aa4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006894:	4b1d      	ldr	r3, [pc, #116]	; (800690c <pvPortMalloc+0x1b0>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	4a1b      	ldr	r2, [pc, #108]	; (800690c <pvPortMalloc+0x1b0>)
 80068a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068a2:	4b1a      	ldr	r3, [pc, #104]	; (800690c <pvPortMalloc+0x1b0>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <pvPortMalloc+0x1b8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d203      	bcs.n	80068b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <pvPortMalloc+0x1b0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <pvPortMalloc+0x1b8>)
 80068b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <pvPortMalloc+0x1ac>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	431a      	orrs	r2, r3
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <pvPortMalloc+0x1bc>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	4a11      	ldr	r2, [pc, #68]	; (8006918 <pvPortMalloc+0x1bc>)
 80068d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80068d4:	f7fe faf0 	bl	8004eb8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <pvPortMalloc+0x19c>
        __asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60fb      	str	r3, [r7, #12]
    }
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80068f8:	69fb      	ldr	r3, [r7, #28]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20012e6c 	.word	0x20012e6c
 8006908:	20012e80 	.word	0x20012e80
 800690c:	20012e70 	.word	0x20012e70
 8006910:	20012e64 	.word	0x20012e64
 8006914:	20012e74 	.word	0x20012e74
 8006918:	20012e78 	.word	0x20012e78

0800691c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d04d      	beq.n	80069ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800692e:	2308      	movs	r3, #8
 8006930:	425b      	negs	r3, r3
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4413      	add	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <vPortFree+0xb8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <vPortFree+0x44>
        __asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	60fb      	str	r3, [r7, #12]
    }
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <vPortFree+0x62>
        __asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60bb      	str	r3, [r7, #8]
    }
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <vPortFree+0xb8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01e      	beq.n	80069ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <vPortFree+0xb8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	43db      	mvns	r3, r3
 800699e:	401a      	ands	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80069a4:	f7fe fa7a 	bl	8004e9c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <vPortFree+0xbc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4413      	add	r3, r2
 80069b2:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <vPortFree+0xbc>)
 80069b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069b6:	6938      	ldr	r0, [r7, #16]
 80069b8:	f000 f874 	bl	8006aa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80069bc:	4b07      	ldr	r3, [pc, #28]	; (80069dc <vPortFree+0xc0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	4a06      	ldr	r2, [pc, #24]	; (80069dc <vPortFree+0xc0>)
 80069c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80069c6:	f7fe fa77 	bl	8004eb8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20012e80 	.word	0x20012e80
 80069d8:	20012e70 	.word	0x20012e70
 80069dc:	20012e7c 	.word	0x20012e7c

080069e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80069ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <prvHeapInit+0xac>)
 80069ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3307      	adds	r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0307 	bic.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <prvHeapInit+0xac>)
 8006a10:	4413      	add	r3, r2
 8006a12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a18:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <prvHeapInit+0xb0>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	; (8006a90 <prvHeapInit+0xb0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <prvHeapInit+0xb4>)
 8006a40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <prvHeapInit+0xb4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <prvHeapInit+0xb4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <prvHeapInit+0xb4>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <prvHeapInit+0xb8>)
 8006a6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <prvHeapInit+0xbc>)
 8006a76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <prvHeapInit+0xc0>)
 8006a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a7e:	601a      	str	r2, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20000264 	.word	0x20000264
 8006a90:	20012e64 	.word	0x20012e64
 8006a94:	20012e6c 	.word	0x20012e6c
 8006a98:	20012e74 	.word	0x20012e74
 8006a9c:	20012e70 	.word	0x20012e70
 8006aa0:	20012e80 	.word	0x20012e80

08006aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aac:	4b28      	ldr	r3, [pc, #160]	; (8006b50 <prvInsertBlockIntoFreeList+0xac>)
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e002      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x14>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d8f7      	bhi.n	8006ab2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d108      	bne.n	8006ae6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	441a      	add	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d118      	bne.n	8006b2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <prvInsertBlockIntoFreeList+0xb0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d00d      	beq.n	8006b22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e008      	b.n	8006b34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <prvInsertBlockIntoFreeList+0xb0>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e003      	b.n	8006b34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d002      	beq.n	8006b42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20012e64 	.word	0x20012e64
 8006b54:	20012e6c 	.word	0x20012e6c

08006b58 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d16c      	bne.n	8006c48 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3301      	adds	r3, #1
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	8abb      	ldrh	r3, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8006b88:	8abb      	ldrh	r3, [r7, #20]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3303      	adds	r3, #3
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	8a7b      	ldrh	r3, [r7, #18]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8006ba8:	8a7b      	ldrh	r3, [r7, #18]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d049      	beq.n	8006c42 <eMBFuncReadCoils+0xea>
 8006bae:	8a7b      	ldrh	r3, [r7, #18]
 8006bb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006bb4:	d245      	bcs.n	8006c42 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	60fa      	str	r2, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8006bd6:	8a7b      	ldrh	r3, [r7, #18]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d006      	beq.n	8006bee <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8006be0:	8a7b      	ldrh	r3, [r7, #18]
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	3301      	adds	r3, #1
 8006bea:	75fb      	strb	r3, [r7, #23]
 8006bec:	e003      	b.n	8006bf6 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8006bee:	8a7b      	ldrh	r3, [r7, #18]
 8006bf0:	08db      	lsrs	r3, r3, #3
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	60fa      	str	r2, [r7, #12]
 8006bfc:	7dfa      	ldrb	r2, [r7, #23]
 8006bfe:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8006c0c:	8a7a      	ldrh	r2, [r7, #18]
 8006c0e:	8ab9      	ldrh	r1, [r7, #20]
 8006c10:	2300      	movs	r3, #0
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f001 f854 	bl	8007cc0 <eMBRegCoilsCB>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fc2b 	bl	8007480 <prveMBError2Exception>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8006c2e:	e00d      	b.n	8006c4c <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	881a      	ldrh	r2, [r3, #0]
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4413      	add	r3, r2
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006c40:	e004      	b.n	8006c4c <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006c42:	2303      	movs	r3, #3
 8006c44:	75bb      	strb	r3, [r7, #22]
 8006c46:	e001      	b.n	8006c4c <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8006c4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	2b05      	cmp	r3, #5
 8006c6a:	d140      	bne.n	8006cee <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	89bb      	ldrh	r3, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d128      	bne.n	8006ce8 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3303      	adds	r3, #3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8006c9c:	2bff      	cmp	r3, #255	; 0xff
 8006c9e:	d004      	beq.n	8006caa <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3303      	adds	r3, #3
 8006ca4:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11e      	bne.n	8006ce8 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2bff      	cmp	r3, #255	; 0xff
 8006cb6:	d102      	bne.n	8006cbe <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	723b      	strb	r3, [r7, #8]
 8006cbc:	e001      	b.n	8006cc2 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8006cc2:	89b9      	ldrh	r1, [r7, #12]
 8006cc4:	f107 0008 	add.w	r0, r7, #8
 8006cc8:	2301      	movs	r3, #1
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f000 fff8 	bl	8007cc0 <eMBRegCoilsCB>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fbcf 	bl	8007480 <prveMBError2Exception>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8006ce6:	e004      	b.n	8006cf2 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	73fb      	strb	r3, [r7, #15]
 8006cec:	e001      	b.n	8006cf2 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	d954      	bls.n	8006dbc <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3301      	adds	r3, #1
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3302      	adds	r3, #2
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	89bb      	ldrh	r3, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8006d2c:	89bb      	ldrh	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3303      	adds	r3, #3
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3304      	adds	r3, #4
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	897b      	ldrh	r3, [r7, #10]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	795b      	ldrb	r3, [r3, #5]
 8006d50:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8006d52:	897b      	ldrh	r3, [r7, #10]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d006      	beq.n	8006d6a <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8006d5c:	897b      	ldrh	r3, [r7, #10]
 8006d5e:	08db      	lsrs	r3, r3, #3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	3301      	adds	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
 8006d68:	e003      	b.n	8006d72 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8006d72:	897b      	ldrh	r3, [r7, #10]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01e      	beq.n	8006db6 <eMBFuncWriteMultipleCoils+0xba>
 8006d78:	897b      	ldrh	r3, [r7, #10]
 8006d7a:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8006d7e:	d81a      	bhi.n	8006db6 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8006d80:	7bfa      	ldrb	r2, [r7, #15]
 8006d82:	7a7b      	ldrb	r3, [r7, #9]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d116      	bne.n	8006db6 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	1d98      	adds	r0, r3, #6
 8006d8c:	897a      	ldrh	r2, [r7, #10]
 8006d8e:	89b9      	ldrh	r1, [r7, #12]
 8006d90:	2301      	movs	r3, #1
 8006d92:	f000 ff95 	bl	8007cc0 <eMBRegCoilsCB>
 8006d96:	4603      	mov	r3, r0
 8006d98:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006d9a:	7a3b      	ldrb	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006da0:	7a3b      	ldrb	r3, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fb6c 	bl	8007480 <prveMBError2Exception>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8006dac:	e008      	b.n	8006dc0 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2205      	movs	r2, #5
 8006db2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006db4:	e004      	b.n	8006dc0 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006db6:	2303      	movs	r3, #3
 8006db8:	73bb      	strb	r3, [r7, #14]
 8006dba:	e001      	b.n	8006dc0 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b086      	sub	sp, #24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d16c      	bne.n	8006eba <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3301      	adds	r3, #1
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3302      	adds	r3, #2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	8abb      	ldrh	r3, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8006dfa:	8abb      	ldrh	r3, [r7, #20]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3303      	adds	r3, #3
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	8a7b      	ldrh	r3, [r7, #18]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8006e1a:	8a7b      	ldrh	r3, [r7, #18]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d049      	beq.n	8006eb4 <eMBFuncReadDiscreteInputs+0xea>
 8006e20:	8a7b      	ldrh	r3, [r7, #18]
 8006e22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e26:	d245      	bcs.n	8006eb4 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	60fa      	str	r2, [r7, #12]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8006e48:	8a7b      	ldrh	r3, [r7, #18]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8006e52:	8a7b      	ldrh	r3, [r7, #18]
 8006e54:	08db      	lsrs	r3, r3, #3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
 8006e5e:	e003      	b.n	8006e68 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8006e60:	8a7b      	ldrh	r3, [r7, #18]
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	60fa      	str	r2, [r7, #12]
 8006e6e:	7dfa      	ldrb	r2, [r7, #23]
 8006e70:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8006e7e:	8a7a      	ldrh	r2, [r7, #18]
 8006e80:	8abb      	ldrh	r3, [r7, #20]
 8006e82:	4619      	mov	r1, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 ffc9 	bl	8007e1c <eMBRegDiscreteCB>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 faf2 	bl	8007480 <prveMBError2Exception>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8006ea0:	e00d      	b.n	8006ebe <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	881a      	ldrh	r2, [r3, #0]
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4413      	add	r3, r2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006eb2:	e004      	b.n	8006ebe <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	75bb      	strb	r3, [r7, #22]
 8006eb8:	e001      	b.n	8006ebe <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8006ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d122      	bne.n	8006f24 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3302      	adds	r3, #2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	89bb      	ldrh	r3, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8006ef8:	89bb      	ldrh	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	1cd8      	adds	r0, r3, #3
 8006f02:	89b9      	ldrh	r1, [r7, #12]
 8006f04:	2301      	movs	r3, #1
 8006f06:	2201      	movs	r2, #1
 8006f08:	f000 fe54 	bl	8007bb4 <eMBRegHoldingCB>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fab1 	bl	8007480 <prveMBError2Exception>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e001      	b.n	8006f28 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006f24:	2303      	movs	r3, #3
 8006f26:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d946      	bls.n	8006fd6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3302      	adds	r3, #2
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	89bb      	ldrh	r3, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8006f62:	89bb      	ldrh	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	897b      	ldrh	r3, [r7, #10]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	795b      	ldrb	r3, [r3, #5]
 8006f86:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8006f88:	897b      	ldrh	r3, [r7, #10]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d020      	beq.n	8006fd0 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	2b78      	cmp	r3, #120	; 0x78
 8006f92:	d81d      	bhi.n	8006fd0 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8006f94:	897b      	ldrh	r3, [r7, #10]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8006f9c:	7a7a      	ldrb	r2, [r7, #9]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d116      	bne.n	8006fd0 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	1d98      	adds	r0, r3, #6
 8006fa6:	897a      	ldrh	r2, [r7, #10]
 8006fa8:	89b9      	ldrh	r1, [r7, #12]
 8006faa:	2301      	movs	r3, #1
 8006fac:	f000 fe02 	bl	8007bb4 <eMBRegHoldingCB>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006fb4:	7a3b      	ldrb	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006fba:	7a3b      	ldrb	r3, [r7, #8]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fa5f 	bl	8007480 <prveMBError2Exception>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8006fc6:	e008      	b.n	8006fda <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2205      	movs	r2, #5
 8006fcc:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006fce:	e004      	b.n	8006fda <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	e001      	b.n	8006fda <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	2b05      	cmp	r3, #5
 8006ff8:	d15c      	bne.n	80070b4 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3302      	adds	r3, #2
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b29a      	uxth	r2, r3
 800700e:	8abb      	ldrh	r3, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007014:	8abb      	ldrh	r3, [r7, #20]
 8007016:	3301      	adds	r3, #1
 8007018:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3303      	adds	r3, #3
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3304      	adds	r3, #4
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800702e:	8a7b      	ldrh	r3, [r7, #18]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d03c      	beq.n	80070ae <eMBFuncReadHoldingRegister+0xca>
 8007034:	8a7b      	ldrh	r3, [r7, #18]
 8007036:	2b7d      	cmp	r3, #125	; 0x7d
 8007038:	d839      	bhi.n	80070ae <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2200      	movs	r2, #0
 8007042:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	60fa      	str	r2, [r7, #12]
 800704a:	2203      	movs	r2, #3
 800704c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	3301      	adds	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800705a:	8a7b      	ldrh	r3, [r7, #18]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1c59      	adds	r1, r3, #1
 8007062:	60f9      	str	r1, [r7, #12]
 8007064:	0052      	lsls	r2, r2, #1
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	3301      	adds	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8007076:	8a7a      	ldrh	r2, [r7, #18]
 8007078:	8ab9      	ldrh	r1, [r7, #20]
 800707a:	2300      	movs	r3, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fd99 	bl	8007bb4 <eMBRegHoldingCB>
 8007082:	4603      	mov	r3, r0
 8007084:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d006      	beq.n	800709a <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f9f6 	bl	8007480 <prveMBError2Exception>
 8007094:	4603      	mov	r3, r0
 8007096:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007098:	e00e      	b.n	80070b8 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	881a      	ldrh	r2, [r3, #0]
 800709e:	8a7b      	ldrh	r3, [r7, #18]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80070ac:	e004      	b.n	80070b8 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80070ae:	2303      	movs	r3, #3
 80070b0:	75fb      	strb	r3, [r7, #23]
 80070b2:	e001      	b.n	80070b8 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80070b4:	2303      	movs	r3, #3
 80070b6:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	f240 8099 	bls.w	800720c <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3301      	adds	r3, #1
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3302      	adds	r3, #2
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	8abb      	ldrh	r3, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 80070f4:	8abb      	ldrh	r3, [r7, #20]
 80070f6:	3301      	adds	r3, #1
 80070f8:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3303      	adds	r3, #3
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	021b      	lsls	r3, r3, #8
 8007104:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3304      	adds	r3, #4
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b29a      	uxth	r2, r3
 800710e:	8a7b      	ldrh	r3, [r7, #18]
 8007110:	4313      	orrs	r3, r2
 8007112:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3305      	adds	r3, #5
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3306      	adds	r3, #6
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b29a      	uxth	r2, r3
 8007128:	8a3b      	ldrh	r3, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800712e:	8a3b      	ldrh	r3, [r7, #16]
 8007130:	3301      	adds	r3, #1
 8007132:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3307      	adds	r3, #7
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3308      	adds	r3, #8
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	89fb      	ldrh	r3, [r7, #14]
 800714a:	4313      	orrs	r3, r2
 800714c:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7a5b      	ldrb	r3, [r3, #9]
 8007152:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8007154:	8a7b      	ldrh	r3, [r7, #18]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d056      	beq.n	8007208 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800715a:	8a7b      	ldrh	r3, [r7, #18]
 800715c:	2b7d      	cmp	r3, #125	; 0x7d
 800715e:	d853      	bhi.n	8007208 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d050      	beq.n	8007208 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007166:	89fb      	ldrh	r3, [r7, #14]
 8007168:	2b79      	cmp	r3, #121	; 0x79
 800716a:	d84d      	bhi.n	8007208 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800716c:	89fb      	ldrh	r3, [r7, #14]
 800716e:	005a      	lsls	r2, r3, #1
 8007170:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007172:	429a      	cmp	r2, r3
 8007174:	d148      	bne.n	8007208 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f103 000a 	add.w	r0, r3, #10
 800717c:	89fa      	ldrh	r2, [r7, #14]
 800717e:	8a39      	ldrh	r1, [r7, #16]
 8007180:	2301      	movs	r3, #1
 8007182:	f000 fd17 	bl	8007bb4 <eMBRegHoldingCB>
 8007186:	4603      	mov	r3, r0
 8007188:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800718a:	7dbb      	ldrb	r3, [r7, #22]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d131      	bne.n	80071f4 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	60ba      	str	r2, [r7, #8]
 80071a0:	2217      	movs	r2, #23
 80071a2:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80071b0:	8a7b      	ldrh	r3, [r7, #18]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	1c59      	adds	r1, r3, #1
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	0052      	lsls	r2, r2, #1
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80071cc:	8a7a      	ldrh	r2, [r7, #18]
 80071ce:	8ab9      	ldrh	r1, [r7, #20]
 80071d0:	2300      	movs	r3, #0
 80071d2:	68b8      	ldr	r0, [r7, #8]
 80071d4:	f000 fcee 	bl	8007bb4 <eMBRegHoldingCB>
 80071d8:	4603      	mov	r3, r0
 80071da:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 80071dc:	7dbb      	ldrb	r3, [r7, #22]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d108      	bne.n	80071f4 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	8a7b      	ldrh	r3, [r7, #18]
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4413      	add	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 80071f4:	7dbb      	ldrb	r3, [r7, #22]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d008      	beq.n	800720c <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80071fa:	7dbb      	ldrb	r3, [r7, #22]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f93f 	bl	8007480 <prveMBError2Exception>
 8007202:	4603      	mov	r3, r0
 8007204:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007206:	e001      	b.n	800720c <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007208:	2303      	movs	r3, #3
 800720a:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b086      	sub	sp, #24
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	2b05      	cmp	r3, #5
 800722a:	d15f      	bne.n	80072ec <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3301      	adds	r3, #1
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3302      	adds	r3, #2
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b29a      	uxth	r2, r3
 8007240:	8abb      	ldrh	r3, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007246:	8abb      	ldrh	r3, [r7, #20]
 8007248:	3301      	adds	r3, #1
 800724a:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3303      	adds	r3, #3
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b29a      	uxth	r2, r3
 8007260:	8a7b      	ldrh	r3, [r7, #18]
 8007262:	4313      	orrs	r3, r2
 8007264:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8007266:	8a7b      	ldrh	r3, [r7, #18]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d03c      	beq.n	80072e6 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800726c:	8a7b      	ldrh	r3, [r7, #18]
 800726e:	2b7c      	cmp	r3, #124	; 0x7c
 8007270:	d839      	bhi.n	80072e6 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	60fa      	str	r2, [r7, #12]
 8007282:	2204      	movs	r2, #4
 8007284:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8007292:	8a7b      	ldrh	r3, [r7, #18]
 8007294:	b2da      	uxtb	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1c59      	adds	r1, r3, #1
 800729a:	60f9      	str	r1, [r7, #12]
 800729c:	0052      	lsls	r2, r2, #1
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	3301      	adds	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80072ae:	8a7a      	ldrh	r2, [r7, #18]
 80072b0:	8abb      	ldrh	r3, [r7, #20]
 80072b2:	4619      	mov	r1, r3
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fc29 	bl	8007b0c <eMBRegInputCB>
 80072ba:	4603      	mov	r3, r0
 80072bc:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f8da 	bl	8007480 <prveMBError2Exception>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80072d0:	e00e      	b.n	80072f0 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	881a      	ldrh	r2, [r3, #0]
 80072d6:	8a7b      	ldrh	r3, [r7, #18]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4413      	add	r3, r2
 80072de:	b29a      	uxth	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80072e4:	e004      	b.n	80072f0 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80072e6:	2303      	movs	r3, #3
 80072e8:	75fb      	strb	r3, [r7, #23]
 80072ea:	e001      	b.n	80072f0 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80072ec:	2303      	movs	r3, #3
 80072ee:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3301      	adds	r3, #1
 800730a:	4a08      	ldr	r2, [pc, #32]	; (800732c <eMBFuncReportSlaveID+0x30>)
 800730c:	8812      	ldrh	r2, [r2, #0]
 800730e:	4908      	ldr	r1, [pc, #32]	; (8007330 <eMBFuncReportSlaveID+0x34>)
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f927 	bl	8008564 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <eMBFuncReportSlaveID+0x30>)
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	b29a      	uxth	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20012ea4 	.word	0x20012ea4
 8007330:	20012e84 	.word	0x20012e84

08007334 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4603      	mov	r3, r0
 8007344:	807b      	strh	r3, [r7, #2]
 8007346:	460b      	mov	r3, r1
 8007348:	707b      	strb	r3, [r7, #1]
 800734a:	4613      	mov	r3, r2
 800734c:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 800734e:	783b      	ldrb	r3, [r7, #0]
 8007350:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8007352:	787b      	ldrb	r3, [r7, #1]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d905      	bls.n	8007364 <xMBUtilSetBits+0x30>
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <xMBUtilSetBits+0xcc>)
 800735a:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <xMBUtilSetBits+0xd0>)
 800735c:	2138      	movs	r1, #56	; 0x38
 800735e:	482a      	ldr	r0, [pc, #168]	; (8007408 <xMBUtilSetBits+0xd4>)
 8007360:	f001 f8a6 	bl	80084b0 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8007364:	887b      	ldrh	r3, [r7, #2]
 8007366:	08db      	lsrs	r3, r3, #3
 8007368:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 800736a:	8abb      	ldrh	r3, [r7, #20]
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	b29b      	uxth	r3, r3
 8007370:	887a      	ldrh	r2, [r7, #2]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8007376:	8afa      	ldrh	r2, [r7, #22]
 8007378:	8a7b      	ldrh	r3, [r7, #18]
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8007380:	787b      	ldrb	r3, [r7, #1]
 8007382:	2201      	movs	r2, #1
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 800738e:	8a3a      	ldrh	r2, [r7, #16]
 8007390:	8879      	ldrh	r1, [r7, #2]
 8007392:	8abb      	ldrh	r3, [r7, #20]
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	1acb      	subs	r3, r1, r3
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800739e:	8abb      	ldrh	r3, [r7, #20]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	4413      	add	r3, r2
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80073a8:	8abb      	ldrh	r3, [r7, #20]
 80073aa:	3301      	adds	r3, #1
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	4413      	add	r3, r2
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	b21a      	sxth	r2, r3
 80073b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80073c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	b21a      	sxth	r2, r3
 80073c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073cc:	4013      	ands	r3, r2
 80073ce:	b21a      	sxth	r2, r3
 80073d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b21b      	sxth	r3, r3
 80073d8:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80073da:	8abb      	ldrh	r3, [r7, #20]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	4413      	add	r3, r2
 80073e0:	89fa      	ldrh	r2, [r7, #14]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80073e6:	89fb      	ldrh	r3, [r7, #14]
 80073e8:	0a1b      	lsrs	r3, r3, #8
 80073ea:	b299      	uxth	r1, r3
 80073ec:	8abb      	ldrh	r3, [r7, #20]
 80073ee:	3301      	adds	r3, #1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	b2ca      	uxtb	r2, r1
 80073f6:	701a      	strb	r2, [r3, #0]
}
 80073f8:	bf00      	nop
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	080094d4 	.word	0x080094d4
 8007404:	0800962c 	.word	0x0800962c
 8007408:	080094e4 	.word	0x080094e4

0800740c <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	807b      	strh	r3, [r7, #2]
 8007418:	4613      	mov	r3, r2
 800741a:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 800741c:	887b      	ldrh	r3, [r7, #2]
 800741e:	08db      	lsrs	r3, r3, #3
 8007420:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	b29b      	uxth	r3, r3
 8007428:	887a      	ldrh	r2, [r7, #2]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800742e:	787b      	ldrb	r3, [r7, #1]
 8007430:	2201      	movs	r2, #1
 8007432:	fa02 f303 	lsl.w	r3, r2, r3
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	3301      	adds	r3, #1
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	b21a      	sxth	r2, r3
 8007454:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007458:	4313      	orrs	r3, r2
 800745a:	b21b      	sxth	r3, r3
 800745c:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 800745e:	893a      	ldrh	r2, [r7, #8]
 8007460:	89bb      	ldrh	r3, [r7, #12]
 8007462:	fa42 f303 	asr.w	r3, r2, r3
 8007466:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8007468:	893a      	ldrh	r2, [r7, #8]
 800746a:	897b      	ldrh	r3, [r7, #10]
 800746c:	4013      	ands	r3, r2
 800746e:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8007470:	893b      	ldrh	r3, [r7, #8]
 8007472:	b2db      	uxtb	r3, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b07      	cmp	r3, #7
 800748e:	d00c      	beq.n	80074aa <prveMBError2Exception+0x2a>
 8007490:	2b07      	cmp	r3, #7
 8007492:	dc0d      	bgt.n	80074b0 <prveMBError2Exception+0x30>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <prveMBError2Exception+0x1e>
 8007498:	2b01      	cmp	r3, #1
 800749a:	d003      	beq.n	80074a4 <prveMBError2Exception+0x24>
 800749c:	e008      	b.n	80074b0 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
            break;
 80074a2:	e008      	b.n	80074b6 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80074a4:	2302      	movs	r3, #2
 80074a6:	73fb      	strb	r3, [r7, #15]
            break;
 80074a8:	e005      	b.n	80074b6 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80074aa:	2306      	movs	r3, #6
 80074ac:	73fb      	strb	r3, [r7, #15]
            break;
 80074ae:	e002      	b.n	80074b6 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80074b0:	2304      	movs	r3, #4
 80074b2:	73fb      	strb	r3, [r7, #15]
            break;
 80074b4:	bf00      	nop
    }

    return eStatus;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	71fb      	strb	r3, [r7, #7]
 80074d0:	460b      	mov	r3, r1
 80074d2:	71bb      	strb	r3, [r7, #6]
 80074d4:	4613      	mov	r3, r2
 80074d6:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80074dc:	79bb      	ldrb	r3, [r7, #6]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <eMBInit+0x2a>
 80074e2:	79bb      	ldrb	r3, [r7, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80074e8:	79bb      	ldrb	r3, [r7, #6]
 80074ea:	2bf7      	cmp	r3, #247	; 0xf7
 80074ec:	d902      	bls.n	80074f4 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80074ee:	2302      	movs	r3, #2
 80074f0:	73fb      	strb	r3, [r7, #15]
 80074f2:	e03a      	b.n	800756a <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80074f4:	4a1f      	ldr	r2, [pc, #124]	; (8007574 <eMBInit+0xb0>)
 80074f6:	79bb      	ldrb	r3, [r7, #6]
 80074f8:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d121      	bne.n	8007544 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8007500:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <eMBInit+0xb4>)
 8007502:	4a1e      	ldr	r2, [pc, #120]	; (800757c <eMBInit+0xb8>)
 8007504:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8007506:	4b1e      	ldr	r3, [pc, #120]	; (8007580 <eMBInit+0xbc>)
 8007508:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <eMBInit+0xc0>)
 800750a:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <eMBInit+0xc4>)
 800750e:	4a1f      	ldr	r2, [pc, #124]	; (800758c <eMBInit+0xc8>)
 8007510:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8007512:	4b1f      	ldr	r3, [pc, #124]	; (8007590 <eMBInit+0xcc>)
 8007514:	4a1f      	ldr	r2, [pc, #124]	; (8007594 <eMBInit+0xd0>)
 8007516:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8007518:	4b1f      	ldr	r3, [pc, #124]	; (8007598 <eMBInit+0xd4>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 800751e:	4b1f      	ldr	r3, [pc, #124]	; (800759c <eMBInit+0xd8>)
 8007520:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <eMBInit+0xdc>)
 8007522:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <eMBInit+0xe0>)
 8007526:	4a20      	ldr	r2, [pc, #128]	; (80075a8 <eMBInit+0xe4>)
 8007528:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 800752a:	4b20      	ldr	r3, [pc, #128]	; (80075ac <eMBInit+0xe8>)
 800752c:	4a20      	ldr	r2, [pc, #128]	; (80075b0 <eMBInit+0xec>)
 800752e:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8007530:	4b10      	ldr	r3, [pc, #64]	; (8007574 <eMBInit+0xb0>)
 8007532:	7818      	ldrb	r0, [r3, #0]
 8007534:	7e3b      	ldrb	r3, [r7, #24]
 8007536:	7979      	ldrb	r1, [r7, #5]
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	f000 fd19 	bl	8007f70 <eMBRTUInit>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
            break;
 8007542:	e001      	b.n	8007548 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8007544:	2302      	movs	r3, #2
 8007546:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10d      	bne.n	800756a <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 800754e:	f000 f923 	bl	8007798 <xMBPortEventInit>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8007558:	2303      	movs	r3, #3
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e005      	b.n	800756a <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <eMBInit+0xf0>)
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8007564:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <eMBInit+0xf4>)
 8007566:	2201      	movs	r2, #1
 8007568:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20012ea6 	.word	0x20012ea6
 8007578:	20012eac 	.word	0x20012eac
 800757c:	08007fe9 	.word	0x08007fe9
 8007580:	20012eb0 	.word	0x20012eb0
 8007584:	08008011 	.word	0x08008011
 8007588:	20012ea8 	.word	0x20012ea8
 800758c:	080080c9 	.word	0x080080c9
 8007590:	20012eb4 	.word	0x20012eb4
 8007594:	0800802d 	.word	0x0800802d
 8007598:	20012eb8 	.word	0x20012eb8
 800759c:	200130d8 	.word	0x200130d8
 80075a0:	08008191 	.word	0x08008191
 80075a4:	200130d0 	.word	0x200130d0
 80075a8:	08008261 	.word	0x08008261
 80075ac:	200130d4 	.word	0x200130d4
 80075b0:	08008311 	.word	0x08008311
 80075b4:	20012ea7 	.word	0x20012ea7
 80075b8:	20000014 	.word	0x20000014

080075bc <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80075c2:	2300      	movs	r3, #0
 80075c4:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <eMBEnable+0x30>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d106      	bne.n	80075dc <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80075ce:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <eMBEnable+0x34>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <eMBEnable+0x30>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e001      	b.n	80075e0 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80075dc:	2306      	movs	r3, #6
 80075de:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80075e0:	79fb      	ldrb	r3, [r7, #7]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000014 	.word	0x20000014
 80075f0:	20012eac 	.word	0x20012eac

080075f4 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80075fa:	2300      	movs	r3, #0
 80075fc:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <eMBPoll+0x164>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8007606:	2306      	movs	r3, #6
 8007608:	e0a1      	b.n	800774e <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800760a:	1cbb      	adds	r3, r7, #2
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f903 	bl	8007818 <xMBPortEventGet>
 8007612:	4603      	mov	r3, r0
 8007614:	2b01      	cmp	r3, #1
 8007616:	f040 8094 	bne.w	8007742 <eMBPoll+0x14e>
    {
        switch ( eEvent )
 800761a:	78bb      	ldrb	r3, [r7, #2]
 800761c:	3b01      	subs	r3, #1
 800761e:	2b07      	cmp	r3, #7
 8007620:	f200 8094 	bhi.w	800774c <eMBPoll+0x158>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <eMBPoll+0x38>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	0800774d 	.word	0x0800774d
 8007630:	0800764d 	.word	0x0800764d
 8007634:	0800774d 	.word	0x0800774d
 8007638:	0800767f 	.word	0x0800767f
 800763c:	0800774d 	.word	0x0800774d
 8007640:	0800774d 	.word	0x0800774d
 8007644:	0800774d 	.word	0x0800774d
 8007648:	0800774d 	.word	0x0800774d
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800764c:	4b43      	ldr	r3, [pc, #268]	; (800775c <eMBPoll+0x168>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a43      	ldr	r2, [pc, #268]	; (8007760 <eMBPoll+0x16c>)
 8007652:	4944      	ldr	r1, [pc, #272]	; (8007764 <eMBPoll+0x170>)
 8007654:	4844      	ldr	r0, [pc, #272]	; (8007768 <eMBPoll+0x174>)
 8007656:	4798      	blx	r3
 8007658:	4603      	mov	r3, r0
 800765a:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d171      	bne.n	8007746 <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8007662:	4b41      	ldr	r3, [pc, #260]	; (8007768 <eMBPoll+0x174>)
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	4b41      	ldr	r3, [pc, #260]	; (800776c <eMBPoll+0x178>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d003      	beq.n	8007676 <eMBPoll+0x82>
 800766e:	4b3e      	ldr	r3, [pc, #248]	; (8007768 <eMBPoll+0x174>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d167      	bne.n	8007746 <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8007676:	2004      	movs	r0, #4
 8007678:	f000 f8a0 	bl	80077bc <xMBPortEventPost>
                }
            }
            break;
 800767c:	e063      	b.n	8007746 <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800767e:	4b39      	ldr	r3, [pc, #228]	; (8007764 <eMBPoll+0x170>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	781a      	ldrb	r2, [r3, #0]
 8007684:	4b3a      	ldr	r3, [pc, #232]	; (8007770 <eMBPoll+0x17c>)
 8007686:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8007688:	4b3a      	ldr	r3, [pc, #232]	; (8007774 <eMBPoll+0x180>)
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800768e:	2300      	movs	r3, #0
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	e01f      	b.n	80076d4 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8007694:	4a38      	ldr	r2, [pc, #224]	; (8007778 <eMBPoll+0x184>)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01d      	beq.n	80076dc <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80076a0:	4a35      	ldr	r2, [pc, #212]	; (8007778 <eMBPoll+0x184>)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80076a8:	4b31      	ldr	r3, [pc, #196]	; (8007770 <eMBPoll+0x17c>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d10e      	bne.n	80076ce <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80076b0:	4a31      	ldr	r2, [pc, #196]	; (8007778 <eMBPoll+0x184>)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	4413      	add	r3, r2
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <eMBPoll+0x170>)
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	4928      	ldr	r1, [pc, #160]	; (8007760 <eMBPoll+0x16c>)
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	4b2a      	ldr	r3, [pc, #168]	; (8007774 <eMBPoll+0x180>)
 80076ca:	701a      	strb	r2, [r3, #0]
                    break;
 80076cc:	e007      	b.n	80076de <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3301      	adds	r3, #1
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b0f      	cmp	r3, #15
 80076d8:	dddc      	ble.n	8007694 <eMBPoll+0xa0>
 80076da:	e000      	b.n	80076de <eMBPoll+0xea>
                    break;
 80076dc:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80076de:	4b22      	ldr	r3, [pc, #136]	; (8007768 <eMBPoll+0x174>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d031      	beq.n	800774a <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 80076e6:	4b23      	ldr	r3, [pc, #140]	; (8007774 <eMBPoll+0x180>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01d      	beq.n	800772a <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80076ee:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <eMBPoll+0x16c>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80076f4:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <eMBPoll+0x17c>)
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <eMBPoll+0x170>)
 80076fa:	6819      	ldr	r1, [r3, #0]
 80076fc:	4b18      	ldr	r3, [pc, #96]	; (8007760 <eMBPoll+0x16c>)
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	1c58      	adds	r0, r3, #1
 8007702:	b284      	uxth	r4, r0
 8007704:	4816      	ldr	r0, [pc, #88]	; (8007760 <eMBPoll+0x16c>)
 8007706:	8004      	strh	r4, [r0, #0]
 8007708:	440b      	add	r3, r1
 800770a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <eMBPoll+0x170>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b12      	ldr	r3, [pc, #72]	; (8007760 <eMBPoll+0x16c>)
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	1c59      	adds	r1, r3, #1
 800771c:	b288      	uxth	r0, r1
 800771e:	4910      	ldr	r1, [pc, #64]	; (8007760 <eMBPoll+0x16c>)
 8007720:	8008      	strh	r0, [r1, #0]
 8007722:	4413      	add	r3, r2
 8007724:	4a13      	ldr	r2, [pc, #76]	; (8007774 <eMBPoll+0x180>)
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
                }
               // if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
               // {
                //    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                //}
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <eMBPoll+0x188>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a0f      	ldr	r2, [pc, #60]	; (800776c <eMBPoll+0x178>)
 8007730:	7810      	ldrb	r0, [r2, #0]
 8007732:	4a0c      	ldr	r2, [pc, #48]	; (8007764 <eMBPoll+0x170>)
 8007734:	6811      	ldr	r1, [r2, #0]
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <eMBPoll+0x16c>)
 8007738:	8812      	ldrh	r2, [r2, #0]
 800773a:	4798      	blx	r3
 800773c:	4603      	mov	r3, r0
 800773e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8007740:	e003      	b.n	800774a <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8007742:	bf00      	nop
 8007744:	e002      	b.n	800774c <eMBPoll+0x158>
            break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <eMBPoll+0x158>
            break;
 800774a:	bf00      	nop
    return MB_ENOERR;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bd90      	pop	{r4, r7, pc}
 8007756:	bf00      	nop
 8007758:	20000014 	.word	0x20000014
 800775c:	20012eb4 	.word	0x20012eb4
 8007760:	20012ec4 	.word	0x20012ec4
 8007764:	20012ec0 	.word	0x20012ec0
 8007768:	20012ebc 	.word	0x20012ebc
 800776c:	20012ea6 	.word	0x20012ea6
 8007770:	20012ec6 	.word	0x20012ec6
 8007774:	20012ec7 	.word	0x20012ec7
 8007778:	20000018 	.word	0x20000018
 800777c:	20012ea8 	.word	0x20012ea8

08007780 <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8007784:	f7fe fec8 	bl	8006518 <vPortEnterCritical>
}
 8007788:	bf00      	nop
 800778a:	bd80      	pop	{r7, pc}

0800778c <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 8007790:	f7fe fef2 	bl	8006578 <vPortExitCritical>
}
 8007794:	bf00      	nop
 8007796:	bd80      	pop	{r7, pc}

08007798 <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 800779c:	f7fc fb0e 	bl	8003dbc <xEventGroupCreate>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <xMBPortEventInit+0x20>)
 80077a4:	6013      	str	r3, [r2, #0]
	if(xSlaveOsEvent == NULL) return FALSE;
 80077a6:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <xMBPortEventInit+0x20>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <xMBPortEventInit+0x1a>
 80077ae:	2300      	movs	r3, #0
 80077b0:	e000      	b.n	80077b4 <xMBPortEventInit+0x1c>
    return TRUE;
 80077b2:	2301      	movs	r3, #1
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20012ec8 	.word	0x20012ec8

080077bc <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 80077c6:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <xMBPortEventPost+0x24>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	79fa      	ldrb	r2, [r7, #7]
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fc fbda 	bl	8003f88 <xEventGroupSetBits>
    return TRUE;
 80077d4:	2301      	movs	r3, #1
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20012ec8 	.word	0x20012ec8

080077e4 <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 80077f2:	4b08      	ldr	r3, [pc, #32]	; (8007814 <xMBPortEventPostFromISR+0x30>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	79f9      	ldrb	r1, [r7, #7]
 80077f8:	2200      	movs	r2, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fc fc7e 	bl	80040fc <xEventGroupSetBitsFromISR>
 8007800:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d100      	bne.n	800780a <xMBPortEventPostFromISR+0x26>
		while(1);
 8007808:	e7fe      	b.n	8007808 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 800780a:	2301      	movs	r3, #1
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20012ec8 	.word	0x20012ec8

08007818 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 8007820:	4b1b      	ldr	r3, [pc, #108]	; (8007890 <xMBPortEventGet+0x78>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	f04f 33ff 	mov.w	r3, #4294967295
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	2201      	movs	r2, #1
 800782e:	210f      	movs	r1, #15
 8007830:	f7fc fadc 	bl	8003dec <xEventGroupWaitBits>
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b01      	subs	r3, #1
 800783a:	2b07      	cmp	r3, #7
 800783c:	d822      	bhi.n	8007884 <xMBPortEventGet+0x6c>
 800783e:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <xMBPortEventGet+0x2c>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007885 	.word	0x08007885
 8007850:	08007875 	.word	0x08007875
 8007854:	08007885 	.word	0x08007885
 8007858:	08007885 	.word	0x08007885
 800785c:	08007885 	.word	0x08007885
 8007860:	0800787d 	.word	0x0800787d
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
        break;
 800786a:	e00b      	b.n	8007884 <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	701a      	strb	r2, [r3, #0]
        break;
 8007872:	e007      	b.n	8007884 <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2204      	movs	r2, #4
 8007878:	701a      	strb	r2, [r3, #0]
        break;
 800787a:	e003      	b.n	8007884 <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2208      	movs	r2, #8
 8007880:	701a      	strb	r2, [r3, #0]
        break;
 8007882:	bf00      	nop
    }
    return TRUE;
 8007884:	2301      	movs	r3, #1
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20012ec8 	.word	0x20012ec8

08007894 <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	460a      	mov	r2, r1
 800789e:	71fb      	strb	r3, [r7, #7]
 80078a0:	4613      	mov	r3, r2
 80078a2:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <vMBPortSerialEnable+0x28>
	  SET_BIT((&huartused)->Instance->CR1, ( USART_CR1_RXNEIE) );
 80078aa:	4b15      	ldr	r3, [pc, #84]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b13      	ldr	r3, [pc, #76]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0220 	orr.w	r2, r2, #32
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e007      	b.n	80078cc <vMBPortSerialEnable+0x38>
  } else {    
	 CLEAR_BIT((&huartused)->Instance->CR1, ( USART_CR1_RXNEIE) );
 80078bc:	4b10      	ldr	r3, [pc, #64]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0220 	bic.w	r2, r2, #32
 80078ca:	601a      	str	r2, [r3, #0]
  }
  if (xTxEnable) {    
 80078cc:	79bb      	ldrb	r3, [r7, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <vMBPortSerialEnable+0x50>
	  SET_BIT((&huartused)->Instance->CR1, USART_CR1_TXEIE);
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b09      	ldr	r3, [pc, #36]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078e0:	601a      	str	r2, [r3, #0]
  } else {
	  CLEAR_BIT((&huartused)->Instance->CR1, USART_CR1_TXEIE);
  }  
  
}
 80078e2:	e007      	b.n	80078f4 <vMBPortSerialEnable+0x60>
	  CLEAR_BIT((&huartused)->Instance->CR1, USART_CR1_TXEIE);
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <vMBPortSerialEnable+0x6c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20012eec 	.word	0x20012eec

08007904 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6039      	str	r1, [r7, #0]
 800790c:	4611      	mov	r1, r2
 800790e:	461a      	mov	r2, r3
 8007910:	4603      	mov	r3, r0
 8007912:	71fb      	strb	r3, [r7, #7]
 8007914:	460b      	mov	r3, r1
 8007916:	71bb      	strb	r3, [r7, #6]
 8007918:	4613      	mov	r3, r2
 800791a:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 800791c:	2301      	movs	r3, #1
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
	...

0800792c <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartused.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <xMBPortSerialPutByte+0x20>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	79fa      	ldrb	r2, [r7, #7]
 800793c:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 800793e:	2301      	movs	r3, #1
  //return (HAL_OK == HAL_UART_Transmit(&huartused, (uint8_t*)&ucByte, 1, 10));
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	20012eec 	.word	0x20012eec

08007950 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartused.Instance->RDR & (uint8_t)0x00FF);
 8007958:	4b06      	ldr	r3, [pc, #24]	; (8007974 <xMBPortSerialGetByte+0x24>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8007964:	2301      	movs	r3, #1
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20012eec 	.word	0x20012eec

08007978 <USART3_IRQHandler>:
  */

#if PORT_USE_UART2
void USART2_IRQHandler(void){
#else
void USART3_IRQHandler(void){
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
#endif

  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t isrflags   = READ_REG(huartused.Instance->ISR);
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <USART3_IRQHandler+0x74>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartused.Instance->CR1);
 8007986:	4b19      	ldr	r3, [pc, #100]	; (80079ec <USART3_IRQHandler+0x74>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d010      	beq.n	80079ba <USART3_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <USART3_IRQHandler+0x42>
    {

		  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 80079a2:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <USART3_IRQHandler+0x78>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4798      	blx	r3

//		  __IO uint32_t tmpreg = 0x00U;
//		  tmpreg = (&huartused)->Instance->ISR;
//		  tmpreg = (&huartused)->Instance->RDR;
		  SET_BIT((&huartused)->Instance->RQR,  USART_RQR_RXFRQ );
 80079a8:	4b10      	ldr	r3, [pc, #64]	; (80079ec <USART3_IRQHandler+0x74>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <USART3_IRQHandler+0x74>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0208 	orr.w	r2, r2, #8
 80079b6:	619a      	str	r2, [r3, #24]
//		  (void) tmpreg;

		return;
 80079b8:	e014      	b.n	80079e4 <USART3_IRQHandler+0x6c>
    }

  if((__HAL_UART_GET_FLAG(&huartused, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartused, UART_IT_TXE) != RESET)) {
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <USART3_IRQHandler+0x74>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d10a      	bne.n	80079de <USART3_IRQHandler+0x66>
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <USART3_IRQHandler+0x74>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <USART3_IRQHandler+0x66>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <USART3_IRQHandler+0x7c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4798      	blx	r3

    return ;
 80079dc:	e002      	b.n	80079e4 <USART3_IRQHandler+0x6c>
  }

  HAL_UART_IRQHandler(&huartused);
 80079de:	4803      	ldr	r0, [pc, #12]	; (80079ec <USART3_IRQHandler+0x74>)
 80079e0:	f7fb fb32 	bl	8003048 <HAL_UART_IRQHandler>

}
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20012eec 	.word	0x20012eec
 80079f0:	200130d8 	.word	0x200130d8
 80079f4:	200130d0 	.word	0x200130d0

080079f8 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim7.Instance = TIM7;
 8007a02:	4b19      	ldr	r3, [pc, #100]	; (8007a68 <xMBPortTimersInit+0x70>)
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <xMBPortTimersInit+0x74>)
 8007a06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 90Mhz, PCLK1 = 45MHz
 8007a08:	f7fa fabc 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4a17      	ldr	r2, [pc, #92]	; (8007a70 <xMBPortTimersInit+0x78>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	0c9b      	lsrs	r3, r3, #18
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	4a13      	ldr	r2, [pc, #76]	; (8007a68 <xMBPortTimersInit+0x70>)
 8007a1c:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <xMBPortTimersInit+0x70>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50 - 1;
 8007a24:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <xMBPortTimersInit+0x70>)
 8007a26:	2231      	movs	r2, #49	; 0x31
 8007a28:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8007a2a:	4a12      	ldr	r2, [pc, #72]	; (8007a74 <xMBPortTimersInit+0x7c>)
 8007a2c:	88fb      	ldrh	r3, [r7, #6]
 8007a2e:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007a30:	480d      	ldr	r0, [pc, #52]	; (8007a68 <xMBPortTimersInit+0x70>)
 8007a32:	f7fa ff29 	bl	8002888 <HAL_TIM_Base_Init>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <xMBPortTimersInit+0x48>
  {
    return FALSE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e00f      	b.n	8007a60 <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007a40:	2320      	movs	r3, #32
 8007a42:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007a48:	f107 030c 	add.w	r3, r7, #12
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4806      	ldr	r0, [pc, #24]	; (8007a68 <xMBPortTimersInit+0x70>)
 8007a50:	f7fb fa00 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <xMBPortTimersInit+0x66>
  {
    return FALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e000      	b.n	8007a60 <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 8007a5e:	2301      	movs	r3, #1
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20012ff4 	.word	0x20012ff4
 8007a6c:	40001400 	.word	0x40001400
 8007a70:	431bde83 	.word	0x431bde83
 8007a74:	20012ecc 	.word	0x20012ecc

08007a78 <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <vMBPortTimersEnable+0x18>)
 8007a7e:	881a      	ldrh	r2, [r3, #0]
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <vMBPortTimersEnable+0x1c>)
 8007a82:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 8007a84:	4804      	ldr	r0, [pc, #16]	; (8007a98 <vMBPortTimersEnable+0x20>)
 8007a86:	f7fa ff57 	bl	8002938 <HAL_TIM_Base_Start_IT>
}
 8007a8a:	bf00      	nop
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20012ecc 	.word	0x20012ecc
 8007a94:	20012ece 	.word	0x20012ece
 8007a98:	20012ff4 	.word	0x20012ff4

08007a9c <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 8007aa0:	4802      	ldr	r0, [pc, #8]	; (8007aac <vMBPortTimersDisable+0x10>)
 8007aa2:	f7fa ffc1 	bl	8002a28 <HAL_TIM_Base_Stop_IT>
}
 8007aa6:	bf00      	nop
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20012ff4 	.word	0x20012ff4

08007ab0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET
 8007ab4:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <TIM7_IRQHandler+0x50>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d118      	bne.n	8007af4 <TIM7_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <TIM7_IRQHandler+0x50>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d111      	bne.n	8007af4 <TIM7_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <TIM7_IRQHandler+0x50>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f06f 0201 	mvn.w	r2, #1
 8007ad8:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 8007ada:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <TIM7_IRQHandler+0x54>)
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <TIM7_IRQHandler+0x54>)
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <TIM7_IRQHandler+0x54>)
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <TIM7_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 8007aee:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <TIM7_IRQHandler+0x58>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4798      	blx	r3

		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007af4:	4802      	ldr	r0, [pc, #8]	; (8007b00 <TIM7_IRQHandler+0x50>)
 8007af6:	f7fa ffc6 	bl	8002a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007afa:	bf00      	nop
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20012ff4 	.word	0x20012ff4
 8007b04:	20012ece 	.word	0x20012ece
 8007b08:	200130d4 	.word	0x200130d4

08007b0c <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	807b      	strh	r3, [r7, #2]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 8007b20:	4b22      	ldr	r3, [pc, #136]	; (8007bac <eMBRegInputCB+0xa0>)
 8007b22:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8007b24:	2300      	movs	r3, #0
 8007b26:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 8007b28:	2310      	movs	r3, #16
 8007b2a:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 8007b2c:	4b20      	ldr	r3, [pc, #128]	; (8007bb0 <eMBRegInputCB+0xa4>)
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8007b32:	887b      	ldrh	r3, [r7, #2]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8007b38:	887a      	ldrh	r2, [r7, #2]
 8007b3a:	89fb      	ldrh	r3, [r7, #14]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d32c      	bcc.n	8007b9a <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8007b40:	887a      	ldrh	r2, [r7, #2]
 8007b42:	883b      	ldrh	r3, [r7, #0]
 8007b44:	441a      	add	r2, r3
 8007b46:	89f9      	ldrh	r1, [r7, #14]
 8007b48:	89bb      	ldrh	r3, [r7, #12]
 8007b4a:	440b      	add	r3, r1
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	dc24      	bgt.n	8007b9a <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 8007b50:	887a      	ldrh	r2, [r7, #2]
 8007b52:	897b      	ldrh	r3, [r7, #10]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8007b58:	e01b      	b.n	8007b92 <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 8007b5a:	8abb      	ldrh	r3, [r7, #20]
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	b299      	uxth	r1, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	b2ca      	uxtb	r2, r1
 8007b70:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 8007b72:	8abb      	ldrh	r3, [r7, #20]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4413      	add	r3, r2
 8007b7a:	8819      	ldrh	r1, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	b2ca      	uxtb	r2, r1
 8007b84:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8007b86:	8abb      	ldrh	r3, [r7, #20]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8007b8c:	883b      	ldrh	r3, [r7, #0]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8007b92:	883b      	ldrh	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e0      	bne.n	8007b5a <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 8007b98:	e001      	b.n	8007b9e <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20013104 	.word	0x20013104
 8007bb0:	20012ed4 	.word	0x20012ed4

08007bb4 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b089      	sub	sp, #36	; 0x24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	817b      	strh	r3, [r7, #10]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	813b      	strh	r3, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 8007bd2:	4b39      	ldr	r3, [pc, #228]	; (8007cb8 <eMBRegHoldingCB+0x104>)
 8007bd4:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8007bda:	2310      	movs	r3, #16
 8007bdc:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 8007bde:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <eMBRegHoldingCB+0x108>)
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8007be4:	897b      	ldrh	r3, [r7, #10]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8007bea:	897a      	ldrh	r2, [r7, #10]
 8007bec:	8afb      	ldrh	r3, [r7, #22]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d359      	bcc.n	8007ca6 <eMBRegHoldingCB+0xf2>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8007bf2:	897a      	ldrh	r2, [r7, #10]
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	441a      	add	r2, r3
 8007bf8:	8af9      	ldrh	r1, [r7, #22]
 8007bfa:	8abb      	ldrh	r3, [r7, #20]
 8007bfc:	440b      	add	r3, r1
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	dc51      	bgt.n	8007ca6 <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8007c02:	897a      	ldrh	r2, [r7, #10]
 8007c04:	8a7b      	ldrh	r3, [r7, #18]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01e      	beq.n	8007c4e <eMBRegHoldingCB+0x9a>
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d043      	beq.n	8007c9c <eMBRegHoldingCB+0xe8>
 8007c14:	e049      	b.n	8007caa <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8007c16:	8bbb      	ldrh	r3, [r7, #28]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	0a1b      	lsrs	r3, r3, #8
 8007c22:	b299      	uxth	r1, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	60fa      	str	r2, [r7, #12]
 8007c2a:	b2ca      	uxtb	r2, r1
 8007c2c:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8007c2e:	8bbb      	ldrh	r3, [r7, #28]
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	4413      	add	r3, r2
 8007c36:	8819      	ldrh	r1, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	60fa      	str	r2, [r7, #12]
 8007c3e:	b2ca      	uxtb	r2, r1
 8007c40:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8007c42:	8bbb      	ldrh	r3, [r7, #28]
 8007c44:	3301      	adds	r3, #1
 8007c46:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8007c48:	893b      	ldrh	r3, [r7, #8]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8007c4e:	893b      	ldrh	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e0      	bne.n	8007c16 <eMBRegHoldingCB+0x62>
            }
            break;
 8007c54:	e026      	b.n	8007ca4 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	60fa      	str	r2, [r7, #12]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	8bbb      	ldrh	r3, [r7, #28]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	69b9      	ldr	r1, [r7, #24]
 8007c66:	440b      	add	r3, r1
 8007c68:	0212      	lsls	r2, r2, #8
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	60fa      	str	r2, [r7, #12]
 8007c74:	7818      	ldrb	r0, [r3, #0]
 8007c76:	8bbb      	ldrh	r3, [r7, #28]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	8819      	ldrh	r1, [r3, #0]
 8007c80:	b282      	uxth	r2, r0
 8007c82:	8bbb      	ldrh	r3, [r7, #28]
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	69b8      	ldr	r0, [r7, #24]
 8007c88:	4403      	add	r3, r0
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8007c90:	8bbb      	ldrh	r3, [r7, #28]
 8007c92:	3301      	adds	r3, #1
 8007c94:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8007c96:	893b      	ldrh	r3, [r7, #8]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8007c9c:	893b      	ldrh	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1d9      	bne.n	8007c56 <eMBRegHoldingCB+0xa2>
            }
            break;
 8007ca2:	bf00      	nop
        switch (eMode)
 8007ca4:	e001      	b.n	8007caa <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8007caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3724      	adds	r7, #36	; 0x24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	200130e4 	.word	0x200130e4
 8007cbc:	20012ed6 	.word	0x20012ed6

08007cc0 <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b08b      	sub	sp, #44	; 0x2c
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	817b      	strh	r3, [r7, #10]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	813b      	strh	r3, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8007ce0:	893b      	ldrh	r3, [r7, #8]
 8007ce2:	08db      	lsrs	r3, r3, #3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 8007cea:	4b4a      	ldr	r3, [pc, #296]	; (8007e14 <eMBRegCoilsCB+0x154>)
 8007cec:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8007cf6:	4b48      	ldr	r3, [pc, #288]	; (8007e18 <eMBRegCoilsCB+0x158>)
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 8007cfc:	897b      	ldrh	r3, [r7, #10]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 8007d02:	897a      	ldrh	r2, [r7, #10]
 8007d04:	8b7b      	ldrh	r3, [r7, #26]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d37b      	bcc.n	8007e02 <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8007d0a:	897a      	ldrh	r2, [r7, #10]
 8007d0c:	893b      	ldrh	r3, [r7, #8]
 8007d0e:	441a      	add	r2, r3
 8007d10:	8b79      	ldrh	r1, [r7, #26]
 8007d12:	8b3b      	ldrh	r3, [r7, #24]
 8007d14:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8007d16:	429a      	cmp	r2, r3
 8007d18:	dc73      	bgt.n	8007e02 <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8007d1a:	897a      	ldrh	r2, [r7, #10]
 8007d1c:	8afb      	ldrh	r3, [r7, #22]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	08db      	lsrs	r3, r3, #3
 8007d24:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8007d26:	897a      	ldrh	r2, [r7, #10]
 8007d28:	8afb      	ldrh	r3, [r7, #22]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d015      	beq.n	8007d66 <eMBRegCoilsCB+0xa6>
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d045      	beq.n	8007dca <eMBRegCoilsCB+0x10a>
 8007d3e:	e063      	b.n	8007e08 <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8007d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	84ba      	strh	r2, [r7, #36]	; 0x24
 8007d46:	461a      	mov	r2, r3
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	1898      	adds	r0, r3, r2
 8007d4c:	68fc      	ldr	r4, [r7, #12]
 8007d4e:	1c63      	adds	r3, r4, #1
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	8abb      	ldrh	r3, [r7, #20]
 8007d54:	2208      	movs	r2, #8
 8007d56:	4619      	mov	r1, r3
 8007d58:	f7ff fb58 	bl	800740c <xMBUtilGetBits>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8007d60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d62:	3b01      	subs	r3, #1
 8007d64:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8007d66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e9      	bne.n	8007d40 <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	893b      	ldrh	r3, [r7, #8]
 8007d82:	f1c3 0308 	rsb	r3, r3, #8
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	893b      	ldrh	r3, [r7, #8]
 8007d98:	f1c3 0308 	rsb	r3, r3, #8
 8007d9c:	fa42 f303 	asr.w	r3, r2, r3
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	701a      	strb	r2, [r3, #0]
            break;
 8007da6:	e02b      	b.n	8007e00 <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8007da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	84ba      	strh	r2, [r7, #36]	; 0x24
 8007dae:	461a      	mov	r2, r3
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	8ab9      	ldrh	r1, [r7, #20]
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	f7ff fab8 	bl	8007334 <xMBUtilSetBits>
                iNReg--;
 8007dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8007dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d8eb      	bhi.n	8007da8 <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8007dd0:	893b      	ldrh	r3, [r7, #8]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8007dd8:	893b      	ldrh	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00f      	beq.n	8007dfe <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8007dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	84ba      	strh	r2, [r7, #36]	; 0x24
 8007de4:	461a      	mov	r2, r3
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	1898      	adds	r0, r3, r2
 8007dea:	893b      	ldrh	r3, [r7, #8]
 8007dec:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	8ab9      	ldrh	r1, [r7, #20]
 8007df8:	4622      	mov	r2, r4
 8007dfa:	f7ff fa9b 	bl	8007334 <xMBUtilSetBits>
            }
            break;
 8007dfe:	bf00      	nop
        switch ( eMode )
 8007e00:	e002      	b.n	8007e08 <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	372c      	adds	r7, #44	; 0x2c
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd90      	pop	{r4, r7, pc}
 8007e14:	200130dc 	.word	0x200130dc
 8007e18:	20012ed2 	.word	0x20012ed2

08007e1c <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b089      	sub	sp, #36	; 0x24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	807b      	strh	r3, [r7, #2]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8007e30:	883b      	ldrh	r3, [r7, #0]
 8007e32:	08db      	lsrs	r3, r3, #3
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3301      	adds	r3, #1
 8007e38:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8007e3a:	4b30      	ldr	r3, [pc, #192]	; (8007efc <eMBRegDiscreteCB+0xe0>)
 8007e3c:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 8007e42:	2308      	movs	r3, #8
 8007e44:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 8007e46:	4b2e      	ldr	r3, [pc, #184]	; (8007f00 <eMBRegDiscreteCB+0xe4>)
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8007e4c:	887b      	ldrh	r3, [r7, #2]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8007e52:	887a      	ldrh	r2, [r7, #2]
 8007e54:	8a7b      	ldrh	r3, [r7, #18]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d349      	bcc.n	8007eee <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8007e5a:	887a      	ldrh	r2, [r7, #2]
 8007e5c:	883b      	ldrh	r3, [r7, #0]
 8007e5e:	441a      	add	r2, r3
 8007e60:	8a79      	ldrh	r1, [r7, #18]
 8007e62:	8a3b      	ldrh	r3, [r7, #16]
 8007e64:	440b      	add	r3, r1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	dc41      	bgt.n	8007eee <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8007e6a:	887a      	ldrh	r2, [r7, #2]
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	08db      	lsrs	r3, r3, #3
 8007e74:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 8007e84:	e012      	b.n	8007eac <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 8007e86:	8bbb      	ldrh	r3, [r7, #28]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	83ba      	strh	r2, [r7, #28]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	1898      	adds	r0, r3, r2
 8007e92:	687c      	ldr	r4, [r7, #4]
 8007e94:	1c63      	adds	r3, r4, #1
 8007e96:	607b      	str	r3, [r7, #4]
 8007e98:	89bb      	ldrh	r3, [r7, #12]
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7ff fab5 	bl	800740c <xMBUtilGetBits>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 8007ea6:	8b7b      	ldrh	r3, [r7, #26]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 8007eac:	8b7b      	ldrh	r3, [r7, #26]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e9      	bne.n	8007e86 <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8007eb8:	883b      	ldrh	r3, [r7, #0]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	883b      	ldrh	r3, [r7, #0]
 8007ec8:	f1c3 0308 	rsb	r3, r3, #8
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	883b      	ldrh	r3, [r7, #0]
 8007ede:	f1c3 0308 	rsb	r3, r3, #8
 8007ee2:	fa42 f303 	asr.w	r3, r2, r3
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	e001      	b.n	8007ef2 <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8007ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3724      	adds	r7, #36	; 0x24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd90      	pop	{r4, r7, pc}
 8007efc:	200130e0 	.word	0x200130e0
 8007f00:	20012ed0 	.word	0x20012ed0

08007f04 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8007f10:	23ff      	movs	r3, #255	; 0xff
 8007f12:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8007f14:	23ff      	movs	r3, #255	; 0xff
 8007f16:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8007f18:	e013      	b.n	8007f42 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	4053      	eors	r3, r2
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8007f2a:	4a0f      	ldr	r2, [pc, #60]	; (8007f68 <usMBCRC16+0x64>)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4413      	add	r3, r2
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4053      	eors	r3, r2
 8007f36:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <usMBCRC16+0x68>)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8007f42:	887b      	ldrh	r3, [r7, #2]
 8007f44:	1e5a      	subs	r2, r3, #1
 8007f46:	807a      	strh	r2, [r7, #2]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e6      	bne.n	8007f1a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	b21a      	sxth	r2, r3
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	b21b      	sxth	r3, r3
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b21b      	sxth	r3, r3
 8007f5a:	b29b      	uxth	r3, r3
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	0800963c 	.word	0x0800963c
 8007f6c:	0800973c 	.word	0x0800973c

08007f70 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/*----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	603a      	str	r2, [r7, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	71fb      	strb	r3, [r7, #7]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	71bb      	strb	r3, [r7, #6]
 8007f82:	4613      	mov	r3, r2
 8007f84:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8007f8a:	f7ff fbf9 	bl	8007780 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8007f8e:	797b      	ldrb	r3, [r7, #5]
 8007f90:	79b8      	ldrb	r0, [r7, #6]
 8007f92:	2208      	movs	r2, #8
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	f7ff fcb5 	bl	8007904 <xMBPortSerialInit>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d002      	beq.n	8007fa6 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	73fb      	strb	r3, [r7, #15]
 8007fa4:	e016      	b.n	8007fd4 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8007fac:	d902      	bls.n	8007fb4 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8007fae:	2323      	movs	r3, #35	; 0x23
 8007fb0:	60bb      	str	r3, [r7, #8]
 8007fb2:	e005      	b.n	8007fc0 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <eMBRTUInit+0x74>)
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff fd17 	bl	80079f8 <xMBPortTimersInit>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d001      	beq.n	8007fd4 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8007fd4:	f7ff fbda 	bl	800778c <ExitCriticalSection>

    return eStatus;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	00177fa0 	.word	0x00177fa0

08007fe8 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8007fec:	f7ff fbc8 	bl	8007780 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <eMBRTUStart+0x24>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f7ff fc4b 	bl	8007894 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8007ffe:	f7ff fd3b 	bl	8007a78 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8008002:	f7ff fbc3 	bl	800778c <ExitCriticalSection>
}
 8008006:	bf00      	nop
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20012ed9 	.word	0x20012ed9

08008010 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8008014:	f7ff fbb4 	bl	8007780 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8008018:	2100      	movs	r1, #0
 800801a:	2000      	movs	r0, #0
 800801c:	f7ff fc3a 	bl	8007894 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8008020:	f7ff fd3c 	bl	8007a9c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8008024:	f7ff fbb2 	bl	800778c <ExitCriticalSection>
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}

0800802c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8008038:	2300      	movs	r3, #0
 800803a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 800803c:	2300      	movs	r3, #0
 800803e:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 8008040:	f7ff fb9e 	bl	8007780 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <eMBRTUReceive+0x84>)
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	2bff      	cmp	r3, #255	; 0xff
 800804c:	d905      	bls.n	800805a <eMBRTUReceive+0x2e>
 800804e:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <eMBRTUReceive+0x88>)
 8008050:	4a19      	ldr	r2, [pc, #100]	; (80080b8 <eMBRTUReceive+0x8c>)
 8008052:	219f      	movs	r1, #159	; 0x9f
 8008054:	4819      	ldr	r0, [pc, #100]	; (80080bc <eMBRTUReceive+0x90>)
 8008056:	f000 fa2b 	bl	80084b0 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800805a:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <eMBRTUReceive+0x84>)
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b03      	cmp	r3, #3
 8008062:	d91b      	bls.n	800809c <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8008064:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <eMBRTUReceive+0x84>)
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	4814      	ldr	r0, [pc, #80]	; (80080c0 <eMBRTUReceive+0x94>)
 800806e:	f7ff ff49 	bl	8007f04 <usMBCRC16>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d111      	bne.n	800809c <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8008078:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <eMBRTUReceive+0x94>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8008082:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <eMBRTUReceive+0x84>)
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b03      	subs	r3, #3
 800808a:	b29a      	uxth	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4a0c      	ldr	r2, [pc, #48]	; (80080c4 <eMBRTUReceive+0x98>)
 8008094:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	75bb      	strb	r3, [r7, #22]
 800809a:	e001      	b.n	80080a0 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 800809c:	2305      	movs	r3, #5
 800809e:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 80080a0:	f7ff fb74 	bl	800778c <ExitCriticalSection>
    return eStatus;
 80080a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20012ee2 	.word	0x20012ee2
 80080b4:	08009510 	.word	0x08009510
 80080b8:	0800983c 	.word	0x0800983c
 80080bc:	08009538 	.word	0x08009538
 80080c0:	20013124 	.word	0x20013124
 80080c4:	20013125 	.word	0x20013125

080080c8 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
 80080d4:	4613      	mov	r3, r2
 80080d6:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80080dc:	f7ff fb50 	bl	8007780 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80080e0:	4b26      	ldr	r3, [pc, #152]	; (800817c <eMBRTUSend+0xb4>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d13f      	bne.n	800816a <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	4a24      	ldr	r2, [pc, #144]	; (8008180 <eMBRTUSend+0xb8>)
 80080f0:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80080f2:	4b24      	ldr	r3, [pc, #144]	; (8008184 <eMBRTUSend+0xbc>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU.*/
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80080f8:	4b21      	ldr	r3, [pc, #132]	; (8008180 <eMBRTUSend+0xb8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	79fa      	ldrb	r2, [r7, #7]
 80080fe:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8008100:	4b20      	ldr	r3, [pc, #128]	; (8008184 <eMBRTUSend+0xbc>)
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29a      	uxth	r2, r3
 8008106:	88bb      	ldrh	r3, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	4b1d      	ldr	r3, [pc, #116]	; (8008184 <eMBRTUSend+0xbc>)
 800810e:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8008110:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <eMBRTUSend+0xb8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <eMBRTUSend+0xbc>)
 8008116:	8812      	ldrh	r2, [r2, #0]
 8008118:	b292      	uxth	r2, r2
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fef1 	bl	8007f04 <usMBCRC16>
 8008122:	4603      	mov	r3, r0
 8008124:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8008126:	4b17      	ldr	r3, [pc, #92]	; (8008184 <eMBRTUSend+0xbc>)
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	b291      	uxth	r1, r2
 8008130:	4a14      	ldr	r2, [pc, #80]	; (8008184 <eMBRTUSend+0xbc>)
 8008132:	8011      	strh	r1, [r2, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	89bb      	ldrh	r3, [r7, #12]
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	4b13      	ldr	r3, [pc, #76]	; (8008188 <eMBRTUSend+0xc0>)
 800813c:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800813e:	89bb      	ldrh	r3, [r7, #12]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	b299      	uxth	r1, r3
 8008144:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <eMBRTUSend+0xbc>)
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	b290      	uxth	r0, r2
 800814e:	4a0d      	ldr	r2, [pc, #52]	; (8008184 <eMBRTUSend+0xbc>)
 8008150:	8010      	strh	r0, [r2, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	b2c9      	uxtb	r1, r1
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <eMBRTUSend+0xc0>)
 8008158:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800815a:	4b0c      	ldr	r3, [pc, #48]	; (800818c <eMBRTUSend+0xc4>)
 800815c:	2201      	movs	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );//turn off receiver
 8008160:	2101      	movs	r1, #1
 8008162:	2000      	movs	r0, #0
 8008164:	f7ff fb96 	bl	8007894 <vMBPortSerialEnable>
 8008168:	e001      	b.n	800816e <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800816a:	2305      	movs	r3, #5
 800816c:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800816e:	f7ff fb0d 	bl	800778c <ExitCriticalSection>
    return eStatus;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20012ed9 	.word	0x20012ed9
 8008180:	20012edc 	.word	0x20012edc
 8008184:	20012ee0 	.word	0x20012ee0
 8008188:	20013124 	.word	0x20013124
 800818c:	20012ed8 	.word	0x20012ed8

08008190 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800819a:	4b2a      	ldr	r3, [pc, #168]	; (8008244 <xMBRTUReceiveFSM+0xb4>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <xMBRTUReceiveFSM+0x20>
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <xMBRTUReceiveFSM+0xb8>)
 80081a6:	4a29      	ldr	r2, [pc, #164]	; (800824c <xMBRTUReceiveFSM+0xbc>)
 80081a8:	21e9      	movs	r1, #233	; 0xe9
 80081aa:	4829      	ldr	r0, [pc, #164]	; (8008250 <xMBRTUReceiveFSM+0xc0>)
 80081ac:	f000 f980 	bl	80084b0 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80081b0:	1dbb      	adds	r3, r7, #6
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff fbcc 	bl	8007950 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80081b8:	4b26      	ldr	r3, [pc, #152]	; (8008254 <xMBRTUReceiveFSM+0xc4>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d83b      	bhi.n	800823a <xMBRTUReceiveFSM+0xaa>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <xMBRTUReceiveFSM+0x38>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081d9 	.word	0x080081d9
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	0800820d 	.word	0x0800820d
 80081d4:	080081df 	.word	0x080081df
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80081d8:	f7ff fc4e 	bl	8007a78 <vMBPortTimersEnable>
        break;
 80081dc:	e02d      	b.n	800823a <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80081de:	f7ff fc4b 	bl	8007a78 <vMBPortTimersEnable>
        break;
 80081e2:	e02a      	b.n	800823a <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80081e4:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <xMBRTUReceiveFSM+0xc8>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <xMBRTUReceiveFSM+0xc8>)
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	b291      	uxth	r1, r2
 80081f4:	4a18      	ldr	r2, [pc, #96]	; (8008258 <xMBRTUReceiveFSM+0xc8>)
 80081f6:	8011      	strh	r1, [r2, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	79b9      	ldrb	r1, [r7, #6]
 80081fc:	4b17      	ldr	r3, [pc, #92]	; (800825c <xMBRTUReceiveFSM+0xcc>)
 80081fe:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8008200:	4b14      	ldr	r3, [pc, #80]	; (8008254 <xMBRTUReceiveFSM+0xc4>)
 8008202:	2202      	movs	r2, #2
 8008204:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8008206:	f7ff fc37 	bl	8007a78 <vMBPortTimersEnable>
        break;
 800820a:	e016      	b.n	800823a <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800820c:	4b12      	ldr	r3, [pc, #72]	; (8008258 <xMBRTUReceiveFSM+0xc8>)
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	2bff      	cmp	r3, #255	; 0xff
 8008214:	d80b      	bhi.n	800822e <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <xMBRTUReceiveFSM+0xc8>)
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	b291      	uxth	r1, r2
 8008220:	4a0d      	ldr	r2, [pc, #52]	; (8008258 <xMBRTUReceiveFSM+0xc8>)
 8008222:	8011      	strh	r1, [r2, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	79b9      	ldrb	r1, [r7, #6]
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <xMBRTUReceiveFSM+0xcc>)
 800822a:	5499      	strb	r1, [r3, r2]
 800822c:	e002      	b.n	8008234 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <xMBRTUReceiveFSM+0xc4>)
 8008230:	2203      	movs	r2, #3
 8008232:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8008234:	f7ff fc20 	bl	8007a78 <vMBPortTimersEnable>
        break;
 8008238:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800823a:	79fb      	ldrb	r3, [r7, #7]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20012ed8 	.word	0x20012ed8
 8008248:	0800955c 	.word	0x0800955c
 800824c:	0800984c 	.word	0x0800984c
 8008250:	08009538 	.word	0x08009538
 8008254:	20012ed9 	.word	0x20012ed9
 8008258:	20012ee2 	.word	0x20012ee2
 800825c:	20013124 	.word	0x20013124

08008260 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <xMBRTUTransmitFSM+0x94>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b01      	cmp	r3, #1
 8008272:	d006      	beq.n	8008282 <xMBRTUTransmitFSM+0x22>
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <xMBRTUTransmitFSM+0x98>)
 8008276:	4a21      	ldr	r2, [pc, #132]	; (80082fc <xMBRTUTransmitFSM+0x9c>)
 8008278:	f44f 7192 	mov.w	r1, #292	; 0x124
 800827c:	4820      	ldr	r0, [pc, #128]	; (8008300 <xMBRTUTransmitFSM+0xa0>)
 800827e:	f000 f917 	bl	80084b0 <__assert_func>

    switch ( eSndState )
 8008282:	4b20      	ldr	r3, [pc, #128]	; (8008304 <xMBRTUTransmitFSM+0xa4>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <xMBRTUTransmitFSM+0x32>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d005      	beq.n	800829c <xMBRTUTransmitFSM+0x3c>
 8008290:	e02a      	b.n	80082e8 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8008292:	2100      	movs	r1, #0
 8008294:	2001      	movs	r0, #1
 8008296:	f7ff fafd 	bl	8007894 <vMBPortSerialEnable>
        break;	
 800829a:	e025      	b.n	80082e8 <xMBRTUTransmitFSM+0x88>
	
    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <xMBRTUTransmitFSM+0xa8>)
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d013      	beq.n	80082ce <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80082a6:	4b19      	ldr	r3, [pc, #100]	; (800830c <xMBRTUTransmitFSM+0xac>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fb3c 	bl	800792c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80082b4:	4b15      	ldr	r3, [pc, #84]	; (800830c <xMBRTUTransmitFSM+0xac>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	4a14      	ldr	r2, [pc, #80]	; (800830c <xMBRTUTransmitFSM+0xac>)
 80082bc:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <xMBRTUTransmitFSM+0xa8>)
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <xMBRTUTransmitFSM+0xa8>)
 80082ca:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */	
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80082cc:	e00b      	b.n	80082e6 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 80082ce:	2008      	movs	r0, #8
 80082d0:	f7ff fa88 	bl	80077e4 <xMBPortEventPostFromISR>
 80082d4:	4603      	mov	r3, r0
 80082d6:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80082d8:	2100      	movs	r1, #0
 80082da:	2001      	movs	r0, #1
 80082dc:	f7ff fada 	bl	8007894 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80082e0:	4b08      	ldr	r3, [pc, #32]	; (8008304 <xMBRTUTransmitFSM+0xa4>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
        break;
 80082e6:	bf00      	nop
    }
	
    return xNeedPoll;
 80082e8:	79fb      	ldrb	r3, [r7, #7]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20012ed9 	.word	0x20012ed9
 80082f8:	08009578 	.word	0x08009578
 80082fc:	08009860 	.word	0x08009860
 8008300:	08009538 	.word	0x08009538
 8008304:	20012ed8 	.word	0x20012ed8
 8008308:	20012ee0 	.word	0x20012ee0
 800830c:	20012edc 	.word	0x20012edc

08008310 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )		// run in ISR handler-timer7
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8008316:	2300      	movs	r3, #0
 8008318:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800831a:	4b1c      	ldr	r3, [pc, #112]	; (800838c <xMBRTUTimerT35Expired+0x7c>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b03      	cmp	r3, #3
 8008322:	d028      	beq.n	8008376 <xMBRTUTimerT35Expired+0x66>
 8008324:	2b03      	cmp	r3, #3
 8008326:	dc10      	bgt.n	800834a <xMBRTUTimerT35Expired+0x3a>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <xMBRTUTimerT35Expired+0x22>
 800832c:	2b02      	cmp	r3, #2
 800832e:	d006      	beq.n	800833e <xMBRTUTimerT35Expired+0x2e>
 8008330:	e00b      	b.n	800834a <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 8008332:	2001      	movs	r0, #1
 8008334:	f7ff fa56 	bl	80077e4 <xMBPortEventPostFromISR>
 8008338:	4603      	mov	r3, r0
 800833a:	71fb      	strb	r3, [r7, #7]
        break;
 800833c:	e01c      	b.n	8008378 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
    	//should I disable receive here???
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 800833e:	2002      	movs	r0, #2
 8008340:	f7ff fa50 	bl	80077e4 <xMBPortEventPostFromISR>
 8008344:	4603      	mov	r3, r0
 8008346:	71fb      	strb	r3, [r7, #7]
        break;
 8008348:	e016      	b.n	8008378 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800834a:	4b10      	ldr	r3, [pc, #64]	; (800838c <xMBRTUTimerT35Expired+0x7c>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d011      	beq.n	8008378 <xMBRTUTimerT35Expired+0x68>
 8008354:	4b0d      	ldr	r3, [pc, #52]	; (800838c <xMBRTUTimerT35Expired+0x7c>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d00c      	beq.n	8008378 <xMBRTUTimerT35Expired+0x68>
 800835e:	4b0b      	ldr	r3, [pc, #44]	; (800838c <xMBRTUTimerT35Expired+0x7c>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d007      	beq.n	8008378 <xMBRTUTimerT35Expired+0x68>
 8008368:	4b09      	ldr	r3, [pc, #36]	; (8008390 <xMBRTUTimerT35Expired+0x80>)
 800836a:	4a0a      	ldr	r2, [pc, #40]	; (8008394 <xMBRTUTimerT35Expired+0x84>)
 800836c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <xMBRTUTimerT35Expired+0x88>)
 8008372:	f000 f89d 	bl	80084b0 <__assert_func>
        break;
 8008376:	bf00      	nop
                ( eRcvState == STATE_RX_RCV )  || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8008378:	f7ff fb90 	bl	8007a9c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800837c:	4b03      	ldr	r3, [pc, #12]	; (800838c <xMBRTUTimerT35Expired+0x7c>)
 800837e:	2201      	movs	r2, #1
 8008380:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8008382:	79fb      	ldrb	r3, [r7, #7]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20012ed9 	.word	0x20012ed9
 8008390:	08009594 	.word	0x08009594
 8008394:	08009874 	.word	0x08009874
 8008398:	08009538 	.word	0x08009538

0800839c <initMBSlaveTask>:
extern UCHAR    ucSDiscInBuf[S_DISCRETE_INPUT_NDISCRETES/8];

TaskHandle_t slavepoll_handle;
TaskHandle_t led_handle;

void initMBSlaveTask(void){
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af02      	add	r7, sp, #8
	BaseType_t status;
	status = xTaskCreate(slavepoll_task, "mb slave poll", 600, NULL, 2, &slavepoll_handle );
 80083a2:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <initMBSlaveTask+0x74>)
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	2302      	movs	r3, #2
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80083b0:	4918      	ldr	r1, [pc, #96]	; (8008414 <initMBSlaveTask+0x78>)
 80083b2:	4819      	ldr	r0, [pc, #100]	; (8008418 <initMBSlaveTask+0x7c>)
 80083b4:	f7fc fb70 	bl	8004a98 <xTaskCreate>
 80083b8:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d00a      	beq.n	80083d6 <initMBSlaveTask+0x3a>
        __asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60bb      	str	r3, [r7, #8]
    }
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <initMBSlaveTask+0x38>

	status = xTaskCreate(led_task, "blink led", 100, NULL, 2, &led_handle );
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <initMBSlaveTask+0x80>)
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	2302      	movs	r3, #2
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	2264      	movs	r2, #100	; 0x64
 80083e2:	490f      	ldr	r1, [pc, #60]	; (8008420 <initMBSlaveTask+0x84>)
 80083e4:	480f      	ldr	r0, [pc, #60]	; (8008424 <initMBSlaveTask+0x88>)
 80083e6:	f7fc fb57 	bl	8004a98 <xTaskCreate>
 80083ea:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d00a      	beq.n	8008408 <initMBSlaveTask+0x6c>
        __asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
    }
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <initMBSlaveTask+0x6a>
	// vTaskStartScheduler();
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20013228 	.word	0x20013228
 8008414:	080095f8 	.word	0x080095f8
 8008418:	08008429 	.word	0x08008429
 800841c:	20013224 	.word	0x20013224
 8008420:	08009608 	.word	0x08009608
 8008424:	08008491 	.word	0x08008491

08008428 <slavepoll_task>:

void slavepoll_task(void*p){
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af02      	add	r7, sp, #8
 800842e:	6078      	str	r0, [r7, #4]

	  usSRegInBuf[0] = 0x11;
 8008430:	4b13      	ldr	r3, [pc, #76]	; (8008480 <slavepoll_task+0x58>)
 8008432:	2211      	movs	r2, #17
 8008434:	801a      	strh	r2, [r3, #0]
	  usSRegInBuf[1] = 0x22;
 8008436:	4b12      	ldr	r3, [pc, #72]	; (8008480 <slavepoll_task+0x58>)
 8008438:	2222      	movs	r2, #34	; 0x22
 800843a:	805a      	strh	r2, [r3, #2]
	  usSRegInBuf[2] = 0x33;
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <slavepoll_task+0x58>)
 800843e:	2233      	movs	r2, #51	; 0x33
 8008440:	809a      	strh	r2, [r3, #4]
	  usSRegInBuf[3] = 0x44;
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <slavepoll_task+0x58>)
 8008444:	2244      	movs	r2, #68	; 0x44
 8008446:	80da      	strh	r2, [r3, #6]
	  usSRegHoldBuf[0] = 0x1111;
 8008448:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <slavepoll_task+0x5c>)
 800844a:	f241 1211 	movw	r2, #4369	; 0x1111
 800844e:	801a      	strh	r2, [r3, #0]
	  usSRegHoldBuf[1] = 0x2222;
 8008450:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <slavepoll_task+0x5c>)
 8008452:	f242 2222 	movw	r2, #8738	; 0x2222
 8008456:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] = 0xAA;
 8008458:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <slavepoll_task+0x60>)
 800845a:	22aa      	movs	r2, #170	; 0xaa
 800845c:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] = 0xf1;
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <slavepoll_task+0x64>)
 8008460:	22f1      	movs	r2, #241	; 0xf1
 8008462:	701a      	strb	r2, [r3, #0]
	eMBInit(MB_RTU, 1, 9, 115200, MB_PAR_NONE);
 8008464:	2300      	movs	r3, #0
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800846c:	2209      	movs	r2, #9
 800846e:	2101      	movs	r1, #1
 8008470:	2000      	movs	r0, #0
 8008472:	f7ff f827 	bl	80074c4 <eMBInit>
	eMBEnable();
 8008476:	f7ff f8a1 	bl	80075bc <eMBEnable>
	while(1){
		eMBPoll();
 800847a:	f7ff f8bb 	bl	80075f4 <eMBPoll>
 800847e:	e7fc      	b.n	800847a <slavepoll_task+0x52>
 8008480:	20013104 	.word	0x20013104
 8008484:	200130e4 	.word	0x200130e4
 8008488:	200130e0 	.word	0x200130e0
 800848c:	200130dc 	.word	0x200130dc

08008490 <led_task>:
	}
}

void led_task (void*p){
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8008498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800849c:	4803      	ldr	r0, [pc, #12]	; (80084ac <led_task+0x1c>)
 800849e:	f7f9 f8be 	bl	800161e <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
		vTaskDelay(500);
 80084a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084a6:	f7fc fc73 	bl	8004d90 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80084aa:	e7f5      	b.n	8008498 <led_task+0x8>
 80084ac:	40020400 	.word	0x40020400

080084b0 <__assert_func>:
 80084b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084b2:	4614      	mov	r4, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <__assert_func+0x2c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4605      	mov	r5, r0
 80084bc:	68d8      	ldr	r0, [r3, #12]
 80084be:	b14c      	cbz	r4, 80084d4 <__assert_func+0x24>
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <__assert_func+0x30>)
 80084c2:	9100      	str	r1, [sp, #0]
 80084c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c8:	4906      	ldr	r1, [pc, #24]	; (80084e4 <__assert_func+0x34>)
 80084ca:	462b      	mov	r3, r5
 80084cc:	f000 f814 	bl	80084f8 <fiprintf>
 80084d0:	f000 fc0c 	bl	8008cec <abort>
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <__assert_func+0x38>)
 80084d6:	461c      	mov	r4, r3
 80084d8:	e7f3      	b.n	80084c2 <__assert_func+0x12>
 80084da:	bf00      	nop
 80084dc:	20000098 	.word	0x20000098
 80084e0:	0800988a 	.word	0x0800988a
 80084e4:	08009897 	.word	0x08009897
 80084e8:	080098c5 	.word	0x080098c5

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	; (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000098 	.word	0x20000098

080084f8 <fiprintf>:
 80084f8:	b40e      	push	{r1, r2, r3}
 80084fa:	b503      	push	{r0, r1, lr}
 80084fc:	4601      	mov	r1, r0
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	4805      	ldr	r0, [pc, #20]	; (8008518 <fiprintf+0x20>)
 8008502:	f853 2b04 	ldr.w	r2, [r3], #4
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	f000 f86b 	bl	80085e4 <_vfiprintf_r>
 800850e:	b002      	add	sp, #8
 8008510:	f85d eb04 	ldr.w	lr, [sp], #4
 8008514:	b003      	add	sp, #12
 8008516:	4770      	bx	lr
 8008518:	20000098 	.word	0x20000098

0800851c <__libc_init_array>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4d0d      	ldr	r5, [pc, #52]	; (8008554 <__libc_init_array+0x38>)
 8008520:	4c0d      	ldr	r4, [pc, #52]	; (8008558 <__libc_init_array+0x3c>)
 8008522:	1b64      	subs	r4, r4, r5
 8008524:	10a4      	asrs	r4, r4, #2
 8008526:	2600      	movs	r6, #0
 8008528:	42a6      	cmp	r6, r4
 800852a:	d109      	bne.n	8008540 <__libc_init_array+0x24>
 800852c:	4d0b      	ldr	r5, [pc, #44]	; (800855c <__libc_init_array+0x40>)
 800852e:	4c0c      	ldr	r4, [pc, #48]	; (8008560 <__libc_init_array+0x44>)
 8008530:	f000 ffb8 	bl	80094a4 <_init>
 8008534:	1b64      	subs	r4, r4, r5
 8008536:	10a4      	asrs	r4, r4, #2
 8008538:	2600      	movs	r6, #0
 800853a:	42a6      	cmp	r6, r4
 800853c:	d105      	bne.n	800854a <__libc_init_array+0x2e>
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f855 3b04 	ldr.w	r3, [r5], #4
 8008544:	4798      	blx	r3
 8008546:	3601      	adds	r6, #1
 8008548:	e7ee      	b.n	8008528 <__libc_init_array+0xc>
 800854a:	f855 3b04 	ldr.w	r3, [r5], #4
 800854e:	4798      	blx	r3
 8008550:	3601      	adds	r6, #1
 8008552:	e7f2      	b.n	800853a <__libc_init_array+0x1e>
 8008554:	08009968 	.word	0x08009968
 8008558:	08009968 	.word	0x08009968
 800855c:	08009968 	.word	0x08009968
 8008560:	0800996c 	.word	0x0800996c

08008564 <memcpy>:
 8008564:	440a      	add	r2, r1
 8008566:	4291      	cmp	r1, r2
 8008568:	f100 33ff 	add.w	r3, r0, #4294967295
 800856c:	d100      	bne.n	8008570 <memcpy+0xc>
 800856e:	4770      	bx	lr
 8008570:	b510      	push	{r4, lr}
 8008572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857a:	4291      	cmp	r1, r2
 800857c:	d1f9      	bne.n	8008572 <memcpy+0xe>
 800857e:	bd10      	pop	{r4, pc}

08008580 <memset>:
 8008580:	4402      	add	r2, r0
 8008582:	4603      	mov	r3, r0
 8008584:	4293      	cmp	r3, r2
 8008586:	d100      	bne.n	800858a <memset+0xa>
 8008588:	4770      	bx	lr
 800858a:	f803 1b01 	strb.w	r1, [r3], #1
 800858e:	e7f9      	b.n	8008584 <memset+0x4>

08008590 <__sfputc_r>:
 8008590:	6893      	ldr	r3, [r2, #8]
 8008592:	3b01      	subs	r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	b410      	push	{r4}
 8008598:	6093      	str	r3, [r2, #8]
 800859a:	da08      	bge.n	80085ae <__sfputc_r+0x1e>
 800859c:	6994      	ldr	r4, [r2, #24]
 800859e:	42a3      	cmp	r3, r4
 80085a0:	db01      	blt.n	80085a6 <__sfputc_r+0x16>
 80085a2:	290a      	cmp	r1, #10
 80085a4:	d103      	bne.n	80085ae <__sfputc_r+0x1e>
 80085a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085aa:	f000 badf 	b.w	8008b6c <__swbuf_r>
 80085ae:	6813      	ldr	r3, [r2, #0]
 80085b0:	1c58      	adds	r0, r3, #1
 80085b2:	6010      	str	r0, [r2, #0]
 80085b4:	7019      	strb	r1, [r3, #0]
 80085b6:	4608      	mov	r0, r1
 80085b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085bc:	4770      	bx	lr

080085be <__sfputs_r>:
 80085be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c0:	4606      	mov	r6, r0
 80085c2:	460f      	mov	r7, r1
 80085c4:	4614      	mov	r4, r2
 80085c6:	18d5      	adds	r5, r2, r3
 80085c8:	42ac      	cmp	r4, r5
 80085ca:	d101      	bne.n	80085d0 <__sfputs_r+0x12>
 80085cc:	2000      	movs	r0, #0
 80085ce:	e007      	b.n	80085e0 <__sfputs_r+0x22>
 80085d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d4:	463a      	mov	r2, r7
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ffda 	bl	8008590 <__sfputc_r>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d1f3      	bne.n	80085c8 <__sfputs_r+0xa>
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085e4 <_vfiprintf_r>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	460d      	mov	r5, r1
 80085ea:	b09d      	sub	sp, #116	; 0x74
 80085ec:	4614      	mov	r4, r2
 80085ee:	4698      	mov	r8, r3
 80085f0:	4606      	mov	r6, r0
 80085f2:	b118      	cbz	r0, 80085fc <_vfiprintf_r+0x18>
 80085f4:	6983      	ldr	r3, [r0, #24]
 80085f6:	b90b      	cbnz	r3, 80085fc <_vfiprintf_r+0x18>
 80085f8:	f000 fc9a 	bl	8008f30 <__sinit>
 80085fc:	4b89      	ldr	r3, [pc, #548]	; (8008824 <_vfiprintf_r+0x240>)
 80085fe:	429d      	cmp	r5, r3
 8008600:	d11b      	bne.n	800863a <_vfiprintf_r+0x56>
 8008602:	6875      	ldr	r5, [r6, #4]
 8008604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008606:	07d9      	lsls	r1, r3, #31
 8008608:	d405      	bmi.n	8008616 <_vfiprintf_r+0x32>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	059a      	lsls	r2, r3, #22
 800860e:	d402      	bmi.n	8008616 <_vfiprintf_r+0x32>
 8008610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008612:	f000 fd2b 	bl	800906c <__retarget_lock_acquire_recursive>
 8008616:	89ab      	ldrh	r3, [r5, #12]
 8008618:	071b      	lsls	r3, r3, #28
 800861a:	d501      	bpl.n	8008620 <_vfiprintf_r+0x3c>
 800861c:	692b      	ldr	r3, [r5, #16]
 800861e:	b9eb      	cbnz	r3, 800865c <_vfiprintf_r+0x78>
 8008620:	4629      	mov	r1, r5
 8008622:	4630      	mov	r0, r6
 8008624:	f000 faf4 	bl	8008c10 <__swsetup_r>
 8008628:	b1c0      	cbz	r0, 800865c <_vfiprintf_r+0x78>
 800862a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800862c:	07dc      	lsls	r4, r3, #31
 800862e:	d50e      	bpl.n	800864e <_vfiprintf_r+0x6a>
 8008630:	f04f 30ff 	mov.w	r0, #4294967295
 8008634:	b01d      	add	sp, #116	; 0x74
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	4b7b      	ldr	r3, [pc, #492]	; (8008828 <_vfiprintf_r+0x244>)
 800863c:	429d      	cmp	r5, r3
 800863e:	d101      	bne.n	8008644 <_vfiprintf_r+0x60>
 8008640:	68b5      	ldr	r5, [r6, #8]
 8008642:	e7df      	b.n	8008604 <_vfiprintf_r+0x20>
 8008644:	4b79      	ldr	r3, [pc, #484]	; (800882c <_vfiprintf_r+0x248>)
 8008646:	429d      	cmp	r5, r3
 8008648:	bf08      	it	eq
 800864a:	68f5      	ldreq	r5, [r6, #12]
 800864c:	e7da      	b.n	8008604 <_vfiprintf_r+0x20>
 800864e:	89ab      	ldrh	r3, [r5, #12]
 8008650:	0598      	lsls	r0, r3, #22
 8008652:	d4ed      	bmi.n	8008630 <_vfiprintf_r+0x4c>
 8008654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008656:	f000 fd0a 	bl	800906e <__retarget_lock_release_recursive>
 800865a:	e7e9      	b.n	8008630 <_vfiprintf_r+0x4c>
 800865c:	2300      	movs	r3, #0
 800865e:	9309      	str	r3, [sp, #36]	; 0x24
 8008660:	2320      	movs	r3, #32
 8008662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008666:	f8cd 800c 	str.w	r8, [sp, #12]
 800866a:	2330      	movs	r3, #48	; 0x30
 800866c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008830 <_vfiprintf_r+0x24c>
 8008670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008674:	f04f 0901 	mov.w	r9, #1
 8008678:	4623      	mov	r3, r4
 800867a:	469a      	mov	sl, r3
 800867c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008680:	b10a      	cbz	r2, 8008686 <_vfiprintf_r+0xa2>
 8008682:	2a25      	cmp	r2, #37	; 0x25
 8008684:	d1f9      	bne.n	800867a <_vfiprintf_r+0x96>
 8008686:	ebba 0b04 	subs.w	fp, sl, r4
 800868a:	d00b      	beq.n	80086a4 <_vfiprintf_r+0xc0>
 800868c:	465b      	mov	r3, fp
 800868e:	4622      	mov	r2, r4
 8008690:	4629      	mov	r1, r5
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ff93 	bl	80085be <__sfputs_r>
 8008698:	3001      	adds	r0, #1
 800869a:	f000 80aa 	beq.w	80087f2 <_vfiprintf_r+0x20e>
 800869e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a0:	445a      	add	r2, fp
 80086a2:	9209      	str	r2, [sp, #36]	; 0x24
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80a2 	beq.w	80087f2 <_vfiprintf_r+0x20e>
 80086ae:	2300      	movs	r3, #0
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295
 80086b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b8:	f10a 0a01 	add.w	sl, sl, #1
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086c4:	931a      	str	r3, [sp, #104]	; 0x68
 80086c6:	4654      	mov	r4, sl
 80086c8:	2205      	movs	r2, #5
 80086ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ce:	4858      	ldr	r0, [pc, #352]	; (8008830 <_vfiprintf_r+0x24c>)
 80086d0:	f7f7 fdb6 	bl	8000240 <memchr>
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	b9d8      	cbnz	r0, 8008710 <_vfiprintf_r+0x12c>
 80086d8:	06d1      	lsls	r1, r2, #27
 80086da:	bf44      	itt	mi
 80086dc:	2320      	movmi	r3, #32
 80086de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e2:	0713      	lsls	r3, r2, #28
 80086e4:	bf44      	itt	mi
 80086e6:	232b      	movmi	r3, #43	; 0x2b
 80086e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ec:	f89a 3000 	ldrb.w	r3, [sl]
 80086f0:	2b2a      	cmp	r3, #42	; 0x2a
 80086f2:	d015      	beq.n	8008720 <_vfiprintf_r+0x13c>
 80086f4:	9a07      	ldr	r2, [sp, #28]
 80086f6:	4654      	mov	r4, sl
 80086f8:	2000      	movs	r0, #0
 80086fa:	f04f 0c0a 	mov.w	ip, #10
 80086fe:	4621      	mov	r1, r4
 8008700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008704:	3b30      	subs	r3, #48	; 0x30
 8008706:	2b09      	cmp	r3, #9
 8008708:	d94e      	bls.n	80087a8 <_vfiprintf_r+0x1c4>
 800870a:	b1b0      	cbz	r0, 800873a <_vfiprintf_r+0x156>
 800870c:	9207      	str	r2, [sp, #28]
 800870e:	e014      	b.n	800873a <_vfiprintf_r+0x156>
 8008710:	eba0 0308 	sub.w	r3, r0, r8
 8008714:	fa09 f303 	lsl.w	r3, r9, r3
 8008718:	4313      	orrs	r3, r2
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	46a2      	mov	sl, r4
 800871e:	e7d2      	b.n	80086c6 <_vfiprintf_r+0xe2>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	1d19      	adds	r1, r3, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	9103      	str	r1, [sp, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfbb      	ittet	lt
 800872c:	425b      	neglt	r3, r3
 800872e:	f042 0202 	orrlt.w	r2, r2, #2
 8008732:	9307      	strge	r3, [sp, #28]
 8008734:	9307      	strlt	r3, [sp, #28]
 8008736:	bfb8      	it	lt
 8008738:	9204      	strlt	r2, [sp, #16]
 800873a:	7823      	ldrb	r3, [r4, #0]
 800873c:	2b2e      	cmp	r3, #46	; 0x2e
 800873e:	d10c      	bne.n	800875a <_vfiprintf_r+0x176>
 8008740:	7863      	ldrb	r3, [r4, #1]
 8008742:	2b2a      	cmp	r3, #42	; 0x2a
 8008744:	d135      	bne.n	80087b2 <_vfiprintf_r+0x1ce>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	9203      	str	r2, [sp, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	f04f 33ff 	movlt.w	r3, #4294967295
 8008756:	3402      	adds	r4, #2
 8008758:	9305      	str	r3, [sp, #20]
 800875a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008840 <_vfiprintf_r+0x25c>
 800875e:	7821      	ldrb	r1, [r4, #0]
 8008760:	2203      	movs	r2, #3
 8008762:	4650      	mov	r0, sl
 8008764:	f7f7 fd6c 	bl	8000240 <memchr>
 8008768:	b140      	cbz	r0, 800877c <_vfiprintf_r+0x198>
 800876a:	2340      	movs	r3, #64	; 0x40
 800876c:	eba0 000a 	sub.w	r0, r0, sl
 8008770:	fa03 f000 	lsl.w	r0, r3, r0
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	4303      	orrs	r3, r0
 8008778:	3401      	adds	r4, #1
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008780:	482c      	ldr	r0, [pc, #176]	; (8008834 <_vfiprintf_r+0x250>)
 8008782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008786:	2206      	movs	r2, #6
 8008788:	f7f7 fd5a 	bl	8000240 <memchr>
 800878c:	2800      	cmp	r0, #0
 800878e:	d03f      	beq.n	8008810 <_vfiprintf_r+0x22c>
 8008790:	4b29      	ldr	r3, [pc, #164]	; (8008838 <_vfiprintf_r+0x254>)
 8008792:	bb1b      	cbnz	r3, 80087dc <_vfiprintf_r+0x1f8>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	3307      	adds	r3, #7
 8008798:	f023 0307 	bic.w	r3, r3, #7
 800879c:	3308      	adds	r3, #8
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	443b      	add	r3, r7
 80087a4:	9309      	str	r3, [sp, #36]	; 0x24
 80087a6:	e767      	b.n	8008678 <_vfiprintf_r+0x94>
 80087a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ac:	460c      	mov	r4, r1
 80087ae:	2001      	movs	r0, #1
 80087b0:	e7a5      	b.n	80086fe <_vfiprintf_r+0x11a>
 80087b2:	2300      	movs	r3, #0
 80087b4:	3401      	adds	r4, #1
 80087b6:	9305      	str	r3, [sp, #20]
 80087b8:	4619      	mov	r1, r3
 80087ba:	f04f 0c0a 	mov.w	ip, #10
 80087be:	4620      	mov	r0, r4
 80087c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087c4:	3a30      	subs	r2, #48	; 0x30
 80087c6:	2a09      	cmp	r2, #9
 80087c8:	d903      	bls.n	80087d2 <_vfiprintf_r+0x1ee>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0c5      	beq.n	800875a <_vfiprintf_r+0x176>
 80087ce:	9105      	str	r1, [sp, #20]
 80087d0:	e7c3      	b.n	800875a <_vfiprintf_r+0x176>
 80087d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d6:	4604      	mov	r4, r0
 80087d8:	2301      	movs	r3, #1
 80087da:	e7f0      	b.n	80087be <_vfiprintf_r+0x1da>
 80087dc:	ab03      	add	r3, sp, #12
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	462a      	mov	r2, r5
 80087e2:	4b16      	ldr	r3, [pc, #88]	; (800883c <_vfiprintf_r+0x258>)
 80087e4:	a904      	add	r1, sp, #16
 80087e6:	4630      	mov	r0, r6
 80087e8:	f3af 8000 	nop.w
 80087ec:	4607      	mov	r7, r0
 80087ee:	1c78      	adds	r0, r7, #1
 80087f0:	d1d6      	bne.n	80087a0 <_vfiprintf_r+0x1bc>
 80087f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f4:	07d9      	lsls	r1, r3, #31
 80087f6:	d405      	bmi.n	8008804 <_vfiprintf_r+0x220>
 80087f8:	89ab      	ldrh	r3, [r5, #12]
 80087fa:	059a      	lsls	r2, r3, #22
 80087fc:	d402      	bmi.n	8008804 <_vfiprintf_r+0x220>
 80087fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008800:	f000 fc35 	bl	800906e <__retarget_lock_release_recursive>
 8008804:	89ab      	ldrh	r3, [r5, #12]
 8008806:	065b      	lsls	r3, r3, #25
 8008808:	f53f af12 	bmi.w	8008630 <_vfiprintf_r+0x4c>
 800880c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800880e:	e711      	b.n	8008634 <_vfiprintf_r+0x50>
 8008810:	ab03      	add	r3, sp, #12
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	462a      	mov	r2, r5
 8008816:	4b09      	ldr	r3, [pc, #36]	; (800883c <_vfiprintf_r+0x258>)
 8008818:	a904      	add	r1, sp, #16
 800881a:	4630      	mov	r0, r6
 800881c:	f000 f880 	bl	8008920 <_printf_i>
 8008820:	e7e4      	b.n	80087ec <_vfiprintf_r+0x208>
 8008822:	bf00      	nop
 8008824:	08009920 	.word	0x08009920
 8008828:	08009940 	.word	0x08009940
 800882c:	08009900 	.word	0x08009900
 8008830:	080098cc 	.word	0x080098cc
 8008834:	080098d6 	.word	0x080098d6
 8008838:	00000000 	.word	0x00000000
 800883c:	080085bf 	.word	0x080085bf
 8008840:	080098d2 	.word	0x080098d2

08008844 <_printf_common>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	4616      	mov	r6, r2
 800884a:	4699      	mov	r9, r3
 800884c:	688a      	ldr	r2, [r1, #8]
 800884e:	690b      	ldr	r3, [r1, #16]
 8008850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008854:	4293      	cmp	r3, r2
 8008856:	bfb8      	it	lt
 8008858:	4613      	movlt	r3, r2
 800885a:	6033      	str	r3, [r6, #0]
 800885c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008860:	4607      	mov	r7, r0
 8008862:	460c      	mov	r4, r1
 8008864:	b10a      	cbz	r2, 800886a <_printf_common+0x26>
 8008866:	3301      	adds	r3, #1
 8008868:	6033      	str	r3, [r6, #0]
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	0699      	lsls	r1, r3, #26
 800886e:	bf42      	ittt	mi
 8008870:	6833      	ldrmi	r3, [r6, #0]
 8008872:	3302      	addmi	r3, #2
 8008874:	6033      	strmi	r3, [r6, #0]
 8008876:	6825      	ldr	r5, [r4, #0]
 8008878:	f015 0506 	ands.w	r5, r5, #6
 800887c:	d106      	bne.n	800888c <_printf_common+0x48>
 800887e:	f104 0a19 	add.w	sl, r4, #25
 8008882:	68e3      	ldr	r3, [r4, #12]
 8008884:	6832      	ldr	r2, [r6, #0]
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	42ab      	cmp	r3, r5
 800888a:	dc26      	bgt.n	80088da <_printf_common+0x96>
 800888c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008890:	1e13      	subs	r3, r2, #0
 8008892:	6822      	ldr	r2, [r4, #0]
 8008894:	bf18      	it	ne
 8008896:	2301      	movne	r3, #1
 8008898:	0692      	lsls	r2, r2, #26
 800889a:	d42b      	bmi.n	80088f4 <_printf_common+0xb0>
 800889c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088a0:	4649      	mov	r1, r9
 80088a2:	4638      	mov	r0, r7
 80088a4:	47c0      	blx	r8
 80088a6:	3001      	adds	r0, #1
 80088a8:	d01e      	beq.n	80088e8 <_printf_common+0xa4>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	68e5      	ldr	r5, [r4, #12]
 80088ae:	6832      	ldr	r2, [r6, #0]
 80088b0:	f003 0306 	and.w	r3, r3, #6
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	bf08      	it	eq
 80088b8:	1aad      	subeq	r5, r5, r2
 80088ba:	68a3      	ldr	r3, [r4, #8]
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	bf0c      	ite	eq
 80088c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088c4:	2500      	movne	r5, #0
 80088c6:	4293      	cmp	r3, r2
 80088c8:	bfc4      	itt	gt
 80088ca:	1a9b      	subgt	r3, r3, r2
 80088cc:	18ed      	addgt	r5, r5, r3
 80088ce:	2600      	movs	r6, #0
 80088d0:	341a      	adds	r4, #26
 80088d2:	42b5      	cmp	r5, r6
 80088d4:	d11a      	bne.n	800890c <_printf_common+0xc8>
 80088d6:	2000      	movs	r0, #0
 80088d8:	e008      	b.n	80088ec <_printf_common+0xa8>
 80088da:	2301      	movs	r3, #1
 80088dc:	4652      	mov	r2, sl
 80088de:	4649      	mov	r1, r9
 80088e0:	4638      	mov	r0, r7
 80088e2:	47c0      	blx	r8
 80088e4:	3001      	adds	r0, #1
 80088e6:	d103      	bne.n	80088f0 <_printf_common+0xac>
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f0:	3501      	adds	r5, #1
 80088f2:	e7c6      	b.n	8008882 <_printf_common+0x3e>
 80088f4:	18e1      	adds	r1, r4, r3
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	2030      	movs	r0, #48	; 0x30
 80088fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088fe:	4422      	add	r2, r4
 8008900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008908:	3302      	adds	r3, #2
 800890a:	e7c7      	b.n	800889c <_printf_common+0x58>
 800890c:	2301      	movs	r3, #1
 800890e:	4622      	mov	r2, r4
 8008910:	4649      	mov	r1, r9
 8008912:	4638      	mov	r0, r7
 8008914:	47c0      	blx	r8
 8008916:	3001      	adds	r0, #1
 8008918:	d0e6      	beq.n	80088e8 <_printf_common+0xa4>
 800891a:	3601      	adds	r6, #1
 800891c:	e7d9      	b.n	80088d2 <_printf_common+0x8e>
	...

08008920 <_printf_i>:
 8008920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	4691      	mov	r9, r2
 8008928:	7e27      	ldrb	r7, [r4, #24]
 800892a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800892c:	2f78      	cmp	r7, #120	; 0x78
 800892e:	4680      	mov	r8, r0
 8008930:	469a      	mov	sl, r3
 8008932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008936:	d807      	bhi.n	8008948 <_printf_i+0x28>
 8008938:	2f62      	cmp	r7, #98	; 0x62
 800893a:	d80a      	bhi.n	8008952 <_printf_i+0x32>
 800893c:	2f00      	cmp	r7, #0
 800893e:	f000 80d8 	beq.w	8008af2 <_printf_i+0x1d2>
 8008942:	2f58      	cmp	r7, #88	; 0x58
 8008944:	f000 80a3 	beq.w	8008a8e <_printf_i+0x16e>
 8008948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800894c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008950:	e03a      	b.n	80089c8 <_printf_i+0xa8>
 8008952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008956:	2b15      	cmp	r3, #21
 8008958:	d8f6      	bhi.n	8008948 <_printf_i+0x28>
 800895a:	a001      	add	r0, pc, #4	; (adr r0, 8008960 <_printf_i+0x40>)
 800895c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008960:	080089b9 	.word	0x080089b9
 8008964:	080089cd 	.word	0x080089cd
 8008968:	08008949 	.word	0x08008949
 800896c:	08008949 	.word	0x08008949
 8008970:	08008949 	.word	0x08008949
 8008974:	08008949 	.word	0x08008949
 8008978:	080089cd 	.word	0x080089cd
 800897c:	08008949 	.word	0x08008949
 8008980:	08008949 	.word	0x08008949
 8008984:	08008949 	.word	0x08008949
 8008988:	08008949 	.word	0x08008949
 800898c:	08008ad9 	.word	0x08008ad9
 8008990:	080089fd 	.word	0x080089fd
 8008994:	08008abb 	.word	0x08008abb
 8008998:	08008949 	.word	0x08008949
 800899c:	08008949 	.word	0x08008949
 80089a0:	08008afb 	.word	0x08008afb
 80089a4:	08008949 	.word	0x08008949
 80089a8:	080089fd 	.word	0x080089fd
 80089ac:	08008949 	.word	0x08008949
 80089b0:	08008949 	.word	0x08008949
 80089b4:	08008ac3 	.word	0x08008ac3
 80089b8:	680b      	ldr	r3, [r1, #0]
 80089ba:	1d1a      	adds	r2, r3, #4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	600a      	str	r2, [r1, #0]
 80089c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0a3      	b.n	8008b14 <_printf_i+0x1f4>
 80089cc:	6825      	ldr	r5, [r4, #0]
 80089ce:	6808      	ldr	r0, [r1, #0]
 80089d0:	062e      	lsls	r6, r5, #24
 80089d2:	f100 0304 	add.w	r3, r0, #4
 80089d6:	d50a      	bpl.n	80089ee <_printf_i+0xce>
 80089d8:	6805      	ldr	r5, [r0, #0]
 80089da:	600b      	str	r3, [r1, #0]
 80089dc:	2d00      	cmp	r5, #0
 80089de:	da03      	bge.n	80089e8 <_printf_i+0xc8>
 80089e0:	232d      	movs	r3, #45	; 0x2d
 80089e2:	426d      	negs	r5, r5
 80089e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e8:	485e      	ldr	r0, [pc, #376]	; (8008b64 <_printf_i+0x244>)
 80089ea:	230a      	movs	r3, #10
 80089ec:	e019      	b.n	8008a22 <_printf_i+0x102>
 80089ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089f2:	6805      	ldr	r5, [r0, #0]
 80089f4:	600b      	str	r3, [r1, #0]
 80089f6:	bf18      	it	ne
 80089f8:	b22d      	sxthne	r5, r5
 80089fa:	e7ef      	b.n	80089dc <_printf_i+0xbc>
 80089fc:	680b      	ldr	r3, [r1, #0]
 80089fe:	6825      	ldr	r5, [r4, #0]
 8008a00:	1d18      	adds	r0, r3, #4
 8008a02:	6008      	str	r0, [r1, #0]
 8008a04:	0628      	lsls	r0, r5, #24
 8008a06:	d501      	bpl.n	8008a0c <_printf_i+0xec>
 8008a08:	681d      	ldr	r5, [r3, #0]
 8008a0a:	e002      	b.n	8008a12 <_printf_i+0xf2>
 8008a0c:	0669      	lsls	r1, r5, #25
 8008a0e:	d5fb      	bpl.n	8008a08 <_printf_i+0xe8>
 8008a10:	881d      	ldrh	r5, [r3, #0]
 8008a12:	4854      	ldr	r0, [pc, #336]	; (8008b64 <_printf_i+0x244>)
 8008a14:	2f6f      	cmp	r7, #111	; 0x6f
 8008a16:	bf0c      	ite	eq
 8008a18:	2308      	moveq	r3, #8
 8008a1a:	230a      	movne	r3, #10
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a22:	6866      	ldr	r6, [r4, #4]
 8008a24:	60a6      	str	r6, [r4, #8]
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	bfa2      	ittt	ge
 8008a2a:	6821      	ldrge	r1, [r4, #0]
 8008a2c:	f021 0104 	bicge.w	r1, r1, #4
 8008a30:	6021      	strge	r1, [r4, #0]
 8008a32:	b90d      	cbnz	r5, 8008a38 <_printf_i+0x118>
 8008a34:	2e00      	cmp	r6, #0
 8008a36:	d04d      	beq.n	8008ad4 <_printf_i+0x1b4>
 8008a38:	4616      	mov	r6, r2
 8008a3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a3e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a42:	5dc7      	ldrb	r7, [r0, r7]
 8008a44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a48:	462f      	mov	r7, r5
 8008a4a:	42bb      	cmp	r3, r7
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	d9f4      	bls.n	8008a3a <_printf_i+0x11a>
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d10b      	bne.n	8008a6c <_printf_i+0x14c>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	07df      	lsls	r7, r3, #31
 8008a58:	d508      	bpl.n	8008a6c <_printf_i+0x14c>
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6861      	ldr	r1, [r4, #4]
 8008a5e:	4299      	cmp	r1, r3
 8008a60:	bfde      	ittt	le
 8008a62:	2330      	movle	r3, #48	; 0x30
 8008a64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a6c:	1b92      	subs	r2, r2, r6
 8008a6e:	6122      	str	r2, [r4, #16]
 8008a70:	f8cd a000 	str.w	sl, [sp]
 8008a74:	464b      	mov	r3, r9
 8008a76:	aa03      	add	r2, sp, #12
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	f7ff fee2 	bl	8008844 <_printf_common>
 8008a80:	3001      	adds	r0, #1
 8008a82:	d14c      	bne.n	8008b1e <_printf_i+0x1fe>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b004      	add	sp, #16
 8008a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8e:	4835      	ldr	r0, [pc, #212]	; (8008b64 <_printf_i+0x244>)
 8008a90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	680e      	ldr	r6, [r1, #0]
 8008a98:	061f      	lsls	r7, r3, #24
 8008a9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a9e:	600e      	str	r6, [r1, #0]
 8008aa0:	d514      	bpl.n	8008acc <_printf_i+0x1ac>
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	bf44      	itt	mi
 8008aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8008aaa:	6023      	strmi	r3, [r4, #0]
 8008aac:	b91d      	cbnz	r5, 8008ab6 <_printf_i+0x196>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	f023 0320 	bic.w	r3, r3, #32
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	2310      	movs	r3, #16
 8008ab8:	e7b0      	b.n	8008a1c <_printf_i+0xfc>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	f043 0320 	orr.w	r3, r3, #32
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	2378      	movs	r3, #120	; 0x78
 8008ac4:	4828      	ldr	r0, [pc, #160]	; (8008b68 <_printf_i+0x248>)
 8008ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aca:	e7e3      	b.n	8008a94 <_printf_i+0x174>
 8008acc:	065e      	lsls	r6, r3, #25
 8008ace:	bf48      	it	mi
 8008ad0:	b2ad      	uxthmi	r5, r5
 8008ad2:	e7e6      	b.n	8008aa2 <_printf_i+0x182>
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	e7bb      	b.n	8008a50 <_printf_i+0x130>
 8008ad8:	680b      	ldr	r3, [r1, #0]
 8008ada:	6826      	ldr	r6, [r4, #0]
 8008adc:	6960      	ldr	r0, [r4, #20]
 8008ade:	1d1d      	adds	r5, r3, #4
 8008ae0:	600d      	str	r5, [r1, #0]
 8008ae2:	0635      	lsls	r5, r6, #24
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	d501      	bpl.n	8008aec <_printf_i+0x1cc>
 8008ae8:	6018      	str	r0, [r3, #0]
 8008aea:	e002      	b.n	8008af2 <_printf_i+0x1d2>
 8008aec:	0671      	lsls	r1, r6, #25
 8008aee:	d5fb      	bpl.n	8008ae8 <_printf_i+0x1c8>
 8008af0:	8018      	strh	r0, [r3, #0]
 8008af2:	2300      	movs	r3, #0
 8008af4:	6123      	str	r3, [r4, #16]
 8008af6:	4616      	mov	r6, r2
 8008af8:	e7ba      	b.n	8008a70 <_printf_i+0x150>
 8008afa:	680b      	ldr	r3, [r1, #0]
 8008afc:	1d1a      	adds	r2, r3, #4
 8008afe:	600a      	str	r2, [r1, #0]
 8008b00:	681e      	ldr	r6, [r3, #0]
 8008b02:	6862      	ldr	r2, [r4, #4]
 8008b04:	2100      	movs	r1, #0
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7f7 fb9a 	bl	8000240 <memchr>
 8008b0c:	b108      	cbz	r0, 8008b12 <_printf_i+0x1f2>
 8008b0e:	1b80      	subs	r0, r0, r6
 8008b10:	6060      	str	r0, [r4, #4]
 8008b12:	6863      	ldr	r3, [r4, #4]
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	2300      	movs	r3, #0
 8008b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b1c:	e7a8      	b.n	8008a70 <_printf_i+0x150>
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	4632      	mov	r2, r6
 8008b22:	4649      	mov	r1, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	47d0      	blx	sl
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d0ab      	beq.n	8008a84 <_printf_i+0x164>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	079b      	lsls	r3, r3, #30
 8008b30:	d413      	bmi.n	8008b5a <_printf_i+0x23a>
 8008b32:	68e0      	ldr	r0, [r4, #12]
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	4298      	cmp	r0, r3
 8008b38:	bfb8      	it	lt
 8008b3a:	4618      	movlt	r0, r3
 8008b3c:	e7a4      	b.n	8008a88 <_printf_i+0x168>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4632      	mov	r2, r6
 8008b42:	4649      	mov	r1, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	47d0      	blx	sl
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d09b      	beq.n	8008a84 <_printf_i+0x164>
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	9903      	ldr	r1, [sp, #12]
 8008b52:	1a5b      	subs	r3, r3, r1
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	dcf2      	bgt.n	8008b3e <_printf_i+0x21e>
 8008b58:	e7eb      	b.n	8008b32 <_printf_i+0x212>
 8008b5a:	2500      	movs	r5, #0
 8008b5c:	f104 0619 	add.w	r6, r4, #25
 8008b60:	e7f5      	b.n	8008b4e <_printf_i+0x22e>
 8008b62:	bf00      	nop
 8008b64:	080098dd 	.word	0x080098dd
 8008b68:	080098ee 	.word	0x080098ee

08008b6c <__swbuf_r>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	460e      	mov	r6, r1
 8008b70:	4614      	mov	r4, r2
 8008b72:	4605      	mov	r5, r0
 8008b74:	b118      	cbz	r0, 8008b7e <__swbuf_r+0x12>
 8008b76:	6983      	ldr	r3, [r0, #24]
 8008b78:	b90b      	cbnz	r3, 8008b7e <__swbuf_r+0x12>
 8008b7a:	f000 f9d9 	bl	8008f30 <__sinit>
 8008b7e:	4b21      	ldr	r3, [pc, #132]	; (8008c04 <__swbuf_r+0x98>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d12b      	bne.n	8008bdc <__swbuf_r+0x70>
 8008b84:	686c      	ldr	r4, [r5, #4]
 8008b86:	69a3      	ldr	r3, [r4, #24]
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	071a      	lsls	r2, r3, #28
 8008b8e:	d52f      	bpl.n	8008bf0 <__swbuf_r+0x84>
 8008b90:	6923      	ldr	r3, [r4, #16]
 8008b92:	b36b      	cbz	r3, 8008bf0 <__swbuf_r+0x84>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1ac0      	subs	r0, r0, r3
 8008b9a:	6963      	ldr	r3, [r4, #20]
 8008b9c:	b2f6      	uxtb	r6, r6
 8008b9e:	4283      	cmp	r3, r0
 8008ba0:	4637      	mov	r7, r6
 8008ba2:	dc04      	bgt.n	8008bae <__swbuf_r+0x42>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f000 f92e 	bl	8008e08 <_fflush_r>
 8008bac:	bb30      	cbnz	r0, 8008bfc <__swbuf_r+0x90>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	701e      	strb	r6, [r3, #0]
 8008bbc:	6963      	ldr	r3, [r4, #20]
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	4283      	cmp	r3, r0
 8008bc2:	d004      	beq.n	8008bce <__swbuf_r+0x62>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	07db      	lsls	r3, r3, #31
 8008bc8:	d506      	bpl.n	8008bd8 <__swbuf_r+0x6c>
 8008bca:	2e0a      	cmp	r6, #10
 8008bcc:	d104      	bne.n	8008bd8 <__swbuf_r+0x6c>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f000 f919 	bl	8008e08 <_fflush_r>
 8008bd6:	b988      	cbnz	r0, 8008bfc <__swbuf_r+0x90>
 8008bd8:	4638      	mov	r0, r7
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <__swbuf_r+0x9c>)
 8008bde:	429c      	cmp	r4, r3
 8008be0:	d101      	bne.n	8008be6 <__swbuf_r+0x7a>
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	e7cf      	b.n	8008b86 <__swbuf_r+0x1a>
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <__swbuf_r+0xa0>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	bf08      	it	eq
 8008bec:	68ec      	ldreq	r4, [r5, #12]
 8008bee:	e7ca      	b.n	8008b86 <__swbuf_r+0x1a>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f000 f80c 	bl	8008c10 <__swsetup_r>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d0cb      	beq.n	8008b94 <__swbuf_r+0x28>
 8008bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8008c00:	e7ea      	b.n	8008bd8 <__swbuf_r+0x6c>
 8008c02:	bf00      	nop
 8008c04:	08009920 	.word	0x08009920
 8008c08:	08009940 	.word	0x08009940
 8008c0c:	08009900 	.word	0x08009900

08008c10 <__swsetup_r>:
 8008c10:	4b32      	ldr	r3, [pc, #200]	; (8008cdc <__swsetup_r+0xcc>)
 8008c12:	b570      	push	{r4, r5, r6, lr}
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	4606      	mov	r6, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	b125      	cbz	r5, 8008c26 <__swsetup_r+0x16>
 8008c1c:	69ab      	ldr	r3, [r5, #24]
 8008c1e:	b913      	cbnz	r3, 8008c26 <__swsetup_r+0x16>
 8008c20:	4628      	mov	r0, r5
 8008c22:	f000 f985 	bl	8008f30 <__sinit>
 8008c26:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <__swsetup_r+0xd0>)
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	d10f      	bne.n	8008c4c <__swsetup_r+0x3c>
 8008c2c:	686c      	ldr	r4, [r5, #4]
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c34:	0719      	lsls	r1, r3, #28
 8008c36:	d42c      	bmi.n	8008c92 <__swsetup_r+0x82>
 8008c38:	06dd      	lsls	r5, r3, #27
 8008c3a:	d411      	bmi.n	8008c60 <__swsetup_r+0x50>
 8008c3c:	2309      	movs	r3, #9
 8008c3e:	6033      	str	r3, [r6, #0]
 8008c40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c44:	81a3      	strh	r3, [r4, #12]
 8008c46:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4a:	e03e      	b.n	8008cca <__swsetup_r+0xba>
 8008c4c:	4b25      	ldr	r3, [pc, #148]	; (8008ce4 <__swsetup_r+0xd4>)
 8008c4e:	429c      	cmp	r4, r3
 8008c50:	d101      	bne.n	8008c56 <__swsetup_r+0x46>
 8008c52:	68ac      	ldr	r4, [r5, #8]
 8008c54:	e7eb      	b.n	8008c2e <__swsetup_r+0x1e>
 8008c56:	4b24      	ldr	r3, [pc, #144]	; (8008ce8 <__swsetup_r+0xd8>)
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	bf08      	it	eq
 8008c5c:	68ec      	ldreq	r4, [r5, #12]
 8008c5e:	e7e6      	b.n	8008c2e <__swsetup_r+0x1e>
 8008c60:	0758      	lsls	r0, r3, #29
 8008c62:	d512      	bpl.n	8008c8a <__swsetup_r+0x7a>
 8008c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c66:	b141      	cbz	r1, 8008c7a <__swsetup_r+0x6a>
 8008c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	d002      	beq.n	8008c76 <__swsetup_r+0x66>
 8008c70:	4630      	mov	r0, r6
 8008c72:	f000 fa61 	bl	8009138 <_free_r>
 8008c76:	2300      	movs	r3, #0
 8008c78:	6363      	str	r3, [r4, #52]	; 0x34
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	2300      	movs	r3, #0
 8008c84:	6063      	str	r3, [r4, #4]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0308 	orr.w	r3, r3, #8
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	b94b      	cbnz	r3, 8008caa <__swsetup_r+0x9a>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca0:	d003      	beq.n	8008caa <__swsetup_r+0x9a>
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f000 fa07 	bl	80090b8 <__smakebuf_r>
 8008caa:	89a0      	ldrh	r0, [r4, #12]
 8008cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cb0:	f010 0301 	ands.w	r3, r0, #1
 8008cb4:	d00a      	beq.n	8008ccc <__swsetup_r+0xbc>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60a3      	str	r3, [r4, #8]
 8008cba:	6963      	ldr	r3, [r4, #20]
 8008cbc:	425b      	negs	r3, r3
 8008cbe:	61a3      	str	r3, [r4, #24]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	b943      	cbnz	r3, 8008cd6 <__swsetup_r+0xc6>
 8008cc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cc8:	d1ba      	bne.n	8008c40 <__swsetup_r+0x30>
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	0781      	lsls	r1, r0, #30
 8008cce:	bf58      	it	pl
 8008cd0:	6963      	ldrpl	r3, [r4, #20]
 8008cd2:	60a3      	str	r3, [r4, #8]
 8008cd4:	e7f4      	b.n	8008cc0 <__swsetup_r+0xb0>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e7f7      	b.n	8008cca <__swsetup_r+0xba>
 8008cda:	bf00      	nop
 8008cdc:	20000098 	.word	0x20000098
 8008ce0:	08009920 	.word	0x08009920
 8008ce4:	08009940 	.word	0x08009940
 8008ce8:	08009900 	.word	0x08009900

08008cec <abort>:
 8008cec:	b508      	push	{r3, lr}
 8008cee:	2006      	movs	r0, #6
 8008cf0:	f000 fb04 	bl	80092fc <raise>
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f7f8 f843 	bl	8000d80 <_exit>
	...

08008cfc <__sflush_r>:
 8008cfc:	898a      	ldrh	r2, [r1, #12]
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	4605      	mov	r5, r0
 8008d04:	0710      	lsls	r0, r2, #28
 8008d06:	460c      	mov	r4, r1
 8008d08:	d458      	bmi.n	8008dbc <__sflush_r+0xc0>
 8008d0a:	684b      	ldr	r3, [r1, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dc05      	bgt.n	8008d1c <__sflush_r+0x20>
 8008d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dc02      	bgt.n	8008d1c <__sflush_r+0x20>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	d0f9      	beq.n	8008d16 <__sflush_r+0x1a>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d28:	682f      	ldr	r7, [r5, #0]
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	d032      	beq.n	8008d94 <__sflush_r+0x98>
 8008d2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	075a      	lsls	r2, r3, #29
 8008d34:	d505      	bpl.n	8008d42 <__sflush_r+0x46>
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	1ac0      	subs	r0, r0, r3
 8008d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d3c:	b10b      	cbz	r3, 8008d42 <__sflush_r+0x46>
 8008d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d40:	1ac0      	subs	r0, r0, r3
 8008d42:	2300      	movs	r3, #0
 8008d44:	4602      	mov	r2, r0
 8008d46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d48:	6a21      	ldr	r1, [r4, #32]
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b0      	blx	r6
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	d106      	bne.n	8008d62 <__sflush_r+0x66>
 8008d54:	6829      	ldr	r1, [r5, #0]
 8008d56:	291d      	cmp	r1, #29
 8008d58:	d82c      	bhi.n	8008db4 <__sflush_r+0xb8>
 8008d5a:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <__sflush_r+0x108>)
 8008d5c:	40ca      	lsrs	r2, r1
 8008d5e:	07d6      	lsls	r6, r2, #31
 8008d60:	d528      	bpl.n	8008db4 <__sflush_r+0xb8>
 8008d62:	2200      	movs	r2, #0
 8008d64:	6062      	str	r2, [r4, #4]
 8008d66:	04d9      	lsls	r1, r3, #19
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	d504      	bpl.n	8008d78 <__sflush_r+0x7c>
 8008d6e:	1c42      	adds	r2, r0, #1
 8008d70:	d101      	bne.n	8008d76 <__sflush_r+0x7a>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b903      	cbnz	r3, 8008d78 <__sflush_r+0x7c>
 8008d76:	6560      	str	r0, [r4, #84]	; 0x54
 8008d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d7a:	602f      	str	r7, [r5, #0]
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d0ca      	beq.n	8008d16 <__sflush_r+0x1a>
 8008d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d84:	4299      	cmp	r1, r3
 8008d86:	d002      	beq.n	8008d8e <__sflush_r+0x92>
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f000 f9d5 	bl	8009138 <_free_r>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	6360      	str	r0, [r4, #52]	; 0x34
 8008d92:	e7c1      	b.n	8008d18 <__sflush_r+0x1c>
 8008d94:	6a21      	ldr	r1, [r4, #32]
 8008d96:	2301      	movs	r3, #1
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b0      	blx	r6
 8008d9c:	1c41      	adds	r1, r0, #1
 8008d9e:	d1c7      	bne.n	8008d30 <__sflush_r+0x34>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0c4      	beq.n	8008d30 <__sflush_r+0x34>
 8008da6:	2b1d      	cmp	r3, #29
 8008da8:	d001      	beq.n	8008dae <__sflush_r+0xb2>
 8008daa:	2b16      	cmp	r3, #22
 8008dac:	d101      	bne.n	8008db2 <__sflush_r+0xb6>
 8008dae:	602f      	str	r7, [r5, #0]
 8008db0:	e7b1      	b.n	8008d16 <__sflush_r+0x1a>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	e7ad      	b.n	8008d18 <__sflush_r+0x1c>
 8008dbc:	690f      	ldr	r7, [r1, #16]
 8008dbe:	2f00      	cmp	r7, #0
 8008dc0:	d0a9      	beq.n	8008d16 <__sflush_r+0x1a>
 8008dc2:	0793      	lsls	r3, r2, #30
 8008dc4:	680e      	ldr	r6, [r1, #0]
 8008dc6:	bf08      	it	eq
 8008dc8:	694b      	ldreq	r3, [r1, #20]
 8008dca:	600f      	str	r7, [r1, #0]
 8008dcc:	bf18      	it	ne
 8008dce:	2300      	movne	r3, #0
 8008dd0:	eba6 0807 	sub.w	r8, r6, r7
 8008dd4:	608b      	str	r3, [r1, #8]
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	dd9c      	ble.n	8008d16 <__sflush_r+0x1a>
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008de0:	4643      	mov	r3, r8
 8008de2:	463a      	mov	r2, r7
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b0      	blx	r6
 8008de8:	2800      	cmp	r0, #0
 8008dea:	dc06      	bgt.n	8008dfa <__sflush_r+0xfe>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e78e      	b.n	8008d18 <__sflush_r+0x1c>
 8008dfa:	4407      	add	r7, r0
 8008dfc:	eba8 0800 	sub.w	r8, r8, r0
 8008e00:	e7e9      	b.n	8008dd6 <__sflush_r+0xda>
 8008e02:	bf00      	nop
 8008e04:	20400001 	.word	0x20400001

08008e08 <_fflush_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	b913      	cbnz	r3, 8008e18 <_fflush_r+0x10>
 8008e12:	2500      	movs	r5, #0
 8008e14:	4628      	mov	r0, r5
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	b118      	cbz	r0, 8008e22 <_fflush_r+0x1a>
 8008e1a:	6983      	ldr	r3, [r0, #24]
 8008e1c:	b90b      	cbnz	r3, 8008e22 <_fflush_r+0x1a>
 8008e1e:	f000 f887 	bl	8008f30 <__sinit>
 8008e22:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <_fflush_r+0x6c>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d11b      	bne.n	8008e60 <_fflush_r+0x58>
 8008e28:	686c      	ldr	r4, [r5, #4]
 8008e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0ef      	beq.n	8008e12 <_fflush_r+0xa>
 8008e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e34:	07d0      	lsls	r0, r2, #31
 8008e36:	d404      	bmi.n	8008e42 <_fflush_r+0x3a>
 8008e38:	0599      	lsls	r1, r3, #22
 8008e3a:	d402      	bmi.n	8008e42 <_fflush_r+0x3a>
 8008e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e3e:	f000 f915 	bl	800906c <__retarget_lock_acquire_recursive>
 8008e42:	4628      	mov	r0, r5
 8008e44:	4621      	mov	r1, r4
 8008e46:	f7ff ff59 	bl	8008cfc <__sflush_r>
 8008e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e4c:	07da      	lsls	r2, r3, #31
 8008e4e:	4605      	mov	r5, r0
 8008e50:	d4e0      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	059b      	lsls	r3, r3, #22
 8008e56:	d4dd      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5a:	f000 f908 	bl	800906e <__retarget_lock_release_recursive>
 8008e5e:	e7d9      	b.n	8008e14 <_fflush_r+0xc>
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <_fflush_r+0x70>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d101      	bne.n	8008e6a <_fflush_r+0x62>
 8008e66:	68ac      	ldr	r4, [r5, #8]
 8008e68:	e7df      	b.n	8008e2a <_fflush_r+0x22>
 8008e6a:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <_fflush_r+0x74>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	bf08      	it	eq
 8008e70:	68ec      	ldreq	r4, [r5, #12]
 8008e72:	e7da      	b.n	8008e2a <_fflush_r+0x22>
 8008e74:	08009920 	.word	0x08009920
 8008e78:	08009940 	.word	0x08009940
 8008e7c:	08009900 	.word	0x08009900

08008e80 <std>:
 8008e80:	2300      	movs	r3, #0
 8008e82:	b510      	push	{r4, lr}
 8008e84:	4604      	mov	r4, r0
 8008e86:	e9c0 3300 	strd	r3, r3, [r0]
 8008e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e8e:	6083      	str	r3, [r0, #8]
 8008e90:	8181      	strh	r1, [r0, #12]
 8008e92:	6643      	str	r3, [r0, #100]	; 0x64
 8008e94:	81c2      	strh	r2, [r0, #14]
 8008e96:	6183      	str	r3, [r0, #24]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	305c      	adds	r0, #92	; 0x5c
 8008e9e:	f7ff fb6f 	bl	8008580 <memset>
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <std+0x38>)
 8008ea4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <std+0x3c>)
 8008ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <std+0x40>)
 8008eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <std+0x44>)
 8008eb0:	6224      	str	r4, [r4, #32]
 8008eb2:	6323      	str	r3, [r4, #48]	; 0x30
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop
 8008eb8:	08009335 	.word	0x08009335
 8008ebc:	08009357 	.word	0x08009357
 8008ec0:	0800938f 	.word	0x0800938f
 8008ec4:	080093b3 	.word	0x080093b3

08008ec8 <_cleanup_r>:
 8008ec8:	4901      	ldr	r1, [pc, #4]	; (8008ed0 <_cleanup_r+0x8>)
 8008eca:	f000 b8af 	b.w	800902c <_fwalk_reent>
 8008ece:	bf00      	nop
 8008ed0:	08008e09 	.word	0x08008e09

08008ed4 <__sfmoreglue>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	1e4a      	subs	r2, r1, #1
 8008ed8:	2568      	movs	r5, #104	; 0x68
 8008eda:	4355      	muls	r5, r2
 8008edc:	460e      	mov	r6, r1
 8008ede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ee2:	f000 f979 	bl	80091d8 <_malloc_r>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	b140      	cbz	r0, 8008efc <__sfmoreglue+0x28>
 8008eea:	2100      	movs	r1, #0
 8008eec:	e9c0 1600 	strd	r1, r6, [r0]
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	60a0      	str	r0, [r4, #8]
 8008ef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ef8:	f7ff fb42 	bl	8008580 <memset>
 8008efc:	4620      	mov	r0, r4
 8008efe:	bd70      	pop	{r4, r5, r6, pc}

08008f00 <__sfp_lock_acquire>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__sfp_lock_acquire+0x8>)
 8008f02:	f000 b8b3 	b.w	800906c <__retarget_lock_acquire_recursive>
 8008f06:	bf00      	nop
 8008f08:	20013234 	.word	0x20013234

08008f0c <__sfp_lock_release>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__sfp_lock_release+0x8>)
 8008f0e:	f000 b8ae 	b.w	800906e <__retarget_lock_release_recursive>
 8008f12:	bf00      	nop
 8008f14:	20013234 	.word	0x20013234

08008f18 <__sinit_lock_acquire>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__sinit_lock_acquire+0x8>)
 8008f1a:	f000 b8a7 	b.w	800906c <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	2001322f 	.word	0x2001322f

08008f24 <__sinit_lock_release>:
 8008f24:	4801      	ldr	r0, [pc, #4]	; (8008f2c <__sinit_lock_release+0x8>)
 8008f26:	f000 b8a2 	b.w	800906e <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	2001322f 	.word	0x2001322f

08008f30 <__sinit>:
 8008f30:	b510      	push	{r4, lr}
 8008f32:	4604      	mov	r4, r0
 8008f34:	f7ff fff0 	bl	8008f18 <__sinit_lock_acquire>
 8008f38:	69a3      	ldr	r3, [r4, #24]
 8008f3a:	b11b      	cbz	r3, 8008f44 <__sinit+0x14>
 8008f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f40:	f7ff bff0 	b.w	8008f24 <__sinit_lock_release>
 8008f44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f48:	6523      	str	r3, [r4, #80]	; 0x50
 8008f4a:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <__sinit+0x68>)
 8008f4c:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <__sinit+0x6c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	bf04      	itt	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	61a3      	streq	r3, [r4, #24]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 f820 	bl	8008fa0 <__sfp>
 8008f60:	6060      	str	r0, [r4, #4]
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 f81c 	bl	8008fa0 <__sfp>
 8008f68:	60a0      	str	r0, [r4, #8]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f818 	bl	8008fa0 <__sfp>
 8008f70:	2200      	movs	r2, #0
 8008f72:	60e0      	str	r0, [r4, #12]
 8008f74:	2104      	movs	r1, #4
 8008f76:	6860      	ldr	r0, [r4, #4]
 8008f78:	f7ff ff82 	bl	8008e80 <std>
 8008f7c:	68a0      	ldr	r0, [r4, #8]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	2109      	movs	r1, #9
 8008f82:	f7ff ff7d 	bl	8008e80 <std>
 8008f86:	68e0      	ldr	r0, [r4, #12]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	2112      	movs	r1, #18
 8008f8c:	f7ff ff78 	bl	8008e80 <std>
 8008f90:	2301      	movs	r3, #1
 8008f92:	61a3      	str	r3, [r4, #24]
 8008f94:	e7d2      	b.n	8008f3c <__sinit+0xc>
 8008f96:	bf00      	nop
 8008f98:	080098c8 	.word	0x080098c8
 8008f9c:	08008ec9 	.word	0x08008ec9

08008fa0 <__sfp>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	f7ff ffac 	bl	8008f00 <__sfp_lock_acquire>
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <__sfp+0x84>)
 8008faa:	681e      	ldr	r6, [r3, #0]
 8008fac:	69b3      	ldr	r3, [r6, #24]
 8008fae:	b913      	cbnz	r3, 8008fb6 <__sfp+0x16>
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff ffbd 	bl	8008f30 <__sinit>
 8008fb6:	3648      	adds	r6, #72	; 0x48
 8008fb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	d503      	bpl.n	8008fc8 <__sfp+0x28>
 8008fc0:	6833      	ldr	r3, [r6, #0]
 8008fc2:	b30b      	cbz	r3, 8009008 <__sfp+0x68>
 8008fc4:	6836      	ldr	r6, [r6, #0]
 8008fc6:	e7f7      	b.n	8008fb8 <__sfp+0x18>
 8008fc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fcc:	b9d5      	cbnz	r5, 8009004 <__sfp+0x64>
 8008fce:	4b16      	ldr	r3, [pc, #88]	; (8009028 <__sfp+0x88>)
 8008fd0:	60e3      	str	r3, [r4, #12]
 8008fd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fd6:	6665      	str	r5, [r4, #100]	; 0x64
 8008fd8:	f000 f847 	bl	800906a <__retarget_lock_init_recursive>
 8008fdc:	f7ff ff96 	bl	8008f0c <__sfp_lock_release>
 8008fe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fe8:	6025      	str	r5, [r4, #0]
 8008fea:	61a5      	str	r5, [r4, #24]
 8008fec:	2208      	movs	r2, #8
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ff4:	f7ff fac4 	bl	8008580 <memset>
 8008ff8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ffc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009000:	4620      	mov	r0, r4
 8009002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009004:	3468      	adds	r4, #104	; 0x68
 8009006:	e7d9      	b.n	8008fbc <__sfp+0x1c>
 8009008:	2104      	movs	r1, #4
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff ff62 	bl	8008ed4 <__sfmoreglue>
 8009010:	4604      	mov	r4, r0
 8009012:	6030      	str	r0, [r6, #0]
 8009014:	2800      	cmp	r0, #0
 8009016:	d1d5      	bne.n	8008fc4 <__sfp+0x24>
 8009018:	f7ff ff78 	bl	8008f0c <__sfp_lock_release>
 800901c:	230c      	movs	r3, #12
 800901e:	603b      	str	r3, [r7, #0]
 8009020:	e7ee      	b.n	8009000 <__sfp+0x60>
 8009022:	bf00      	nop
 8009024:	080098c8 	.word	0x080098c8
 8009028:	ffff0001 	.word	0xffff0001

0800902c <_fwalk_reent>:
 800902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009030:	4606      	mov	r6, r0
 8009032:	4688      	mov	r8, r1
 8009034:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009038:	2700      	movs	r7, #0
 800903a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800903e:	f1b9 0901 	subs.w	r9, r9, #1
 8009042:	d505      	bpl.n	8009050 <_fwalk_reent+0x24>
 8009044:	6824      	ldr	r4, [r4, #0]
 8009046:	2c00      	cmp	r4, #0
 8009048:	d1f7      	bne.n	800903a <_fwalk_reent+0xe>
 800904a:	4638      	mov	r0, r7
 800904c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009050:	89ab      	ldrh	r3, [r5, #12]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d907      	bls.n	8009066 <_fwalk_reent+0x3a>
 8009056:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800905a:	3301      	adds	r3, #1
 800905c:	d003      	beq.n	8009066 <_fwalk_reent+0x3a>
 800905e:	4629      	mov	r1, r5
 8009060:	4630      	mov	r0, r6
 8009062:	47c0      	blx	r8
 8009064:	4307      	orrs	r7, r0
 8009066:	3568      	adds	r5, #104	; 0x68
 8009068:	e7e9      	b.n	800903e <_fwalk_reent+0x12>

0800906a <__retarget_lock_init_recursive>:
 800906a:	4770      	bx	lr

0800906c <__retarget_lock_acquire_recursive>:
 800906c:	4770      	bx	lr

0800906e <__retarget_lock_release_recursive>:
 800906e:	4770      	bx	lr

08009070 <__swhatbuf_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	460e      	mov	r6, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	2900      	cmp	r1, #0
 800907a:	b096      	sub	sp, #88	; 0x58
 800907c:	4614      	mov	r4, r2
 800907e:	461d      	mov	r5, r3
 8009080:	da07      	bge.n	8009092 <__swhatbuf_r+0x22>
 8009082:	2300      	movs	r3, #0
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	89b3      	ldrh	r3, [r6, #12]
 8009088:	061a      	lsls	r2, r3, #24
 800908a:	d410      	bmi.n	80090ae <__swhatbuf_r+0x3e>
 800908c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009090:	e00e      	b.n	80090b0 <__swhatbuf_r+0x40>
 8009092:	466a      	mov	r2, sp
 8009094:	f000 f9b4 	bl	8009400 <_fstat_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	dbf2      	blt.n	8009082 <__swhatbuf_r+0x12>
 800909c:	9a01      	ldr	r2, [sp, #4]
 800909e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090a6:	425a      	negs	r2, r3
 80090a8:	415a      	adcs	r2, r3
 80090aa:	602a      	str	r2, [r5, #0]
 80090ac:	e7ee      	b.n	800908c <__swhatbuf_r+0x1c>
 80090ae:	2340      	movs	r3, #64	; 0x40
 80090b0:	2000      	movs	r0, #0
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	b016      	add	sp, #88	; 0x58
 80090b6:	bd70      	pop	{r4, r5, r6, pc}

080090b8 <__smakebuf_r>:
 80090b8:	898b      	ldrh	r3, [r1, #12]
 80090ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090bc:	079d      	lsls	r5, r3, #30
 80090be:	4606      	mov	r6, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	d507      	bpl.n	80090d4 <__smakebuf_r+0x1c>
 80090c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	2301      	movs	r3, #1
 80090ce:	6163      	str	r3, [r4, #20]
 80090d0:	b002      	add	sp, #8
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	ab01      	add	r3, sp, #4
 80090d6:	466a      	mov	r2, sp
 80090d8:	f7ff ffca 	bl	8009070 <__swhatbuf_r>
 80090dc:	9900      	ldr	r1, [sp, #0]
 80090de:	4605      	mov	r5, r0
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 f879 	bl	80091d8 <_malloc_r>
 80090e6:	b948      	cbnz	r0, 80090fc <__smakebuf_r+0x44>
 80090e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ec:	059a      	lsls	r2, r3, #22
 80090ee:	d4ef      	bmi.n	80090d0 <__smakebuf_r+0x18>
 80090f0:	f023 0303 	bic.w	r3, r3, #3
 80090f4:	f043 0302 	orr.w	r3, r3, #2
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	e7e3      	b.n	80090c4 <__smakebuf_r+0xc>
 80090fc:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <__smakebuf_r+0x7c>)
 80090fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	6020      	str	r0, [r4, #0]
 8009104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	9b00      	ldr	r3, [sp, #0]
 800910c:	6163      	str	r3, [r4, #20]
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	6120      	str	r0, [r4, #16]
 8009112:	b15b      	cbz	r3, 800912c <__smakebuf_r+0x74>
 8009114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009118:	4630      	mov	r0, r6
 800911a:	f000 f983 	bl	8009424 <_isatty_r>
 800911e:	b128      	cbz	r0, 800912c <__smakebuf_r+0x74>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	89a0      	ldrh	r0, [r4, #12]
 800912e:	4305      	orrs	r5, r0
 8009130:	81a5      	strh	r5, [r4, #12]
 8009132:	e7cd      	b.n	80090d0 <__smakebuf_r+0x18>
 8009134:	08008ec9 	.word	0x08008ec9

08009138 <_free_r>:
 8009138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800913a:	2900      	cmp	r1, #0
 800913c:	d048      	beq.n	80091d0 <_free_r+0x98>
 800913e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009142:	9001      	str	r0, [sp, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f1a1 0404 	sub.w	r4, r1, #4
 800914a:	bfb8      	it	lt
 800914c:	18e4      	addlt	r4, r4, r3
 800914e:	f000 f98b 	bl	8009468 <__malloc_lock>
 8009152:	4a20      	ldr	r2, [pc, #128]	; (80091d4 <_free_r+0x9c>)
 8009154:	9801      	ldr	r0, [sp, #4]
 8009156:	6813      	ldr	r3, [r2, #0]
 8009158:	4615      	mov	r5, r2
 800915a:	b933      	cbnz	r3, 800916a <_free_r+0x32>
 800915c:	6063      	str	r3, [r4, #4]
 800915e:	6014      	str	r4, [r2, #0]
 8009160:	b003      	add	sp, #12
 8009162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009166:	f000 b985 	b.w	8009474 <__malloc_unlock>
 800916a:	42a3      	cmp	r3, r4
 800916c:	d90b      	bls.n	8009186 <_free_r+0x4e>
 800916e:	6821      	ldr	r1, [r4, #0]
 8009170:	1862      	adds	r2, r4, r1
 8009172:	4293      	cmp	r3, r2
 8009174:	bf04      	itt	eq
 8009176:	681a      	ldreq	r2, [r3, #0]
 8009178:	685b      	ldreq	r3, [r3, #4]
 800917a:	6063      	str	r3, [r4, #4]
 800917c:	bf04      	itt	eq
 800917e:	1852      	addeq	r2, r2, r1
 8009180:	6022      	streq	r2, [r4, #0]
 8009182:	602c      	str	r4, [r5, #0]
 8009184:	e7ec      	b.n	8009160 <_free_r+0x28>
 8009186:	461a      	mov	r2, r3
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	b10b      	cbz	r3, 8009190 <_free_r+0x58>
 800918c:	42a3      	cmp	r3, r4
 800918e:	d9fa      	bls.n	8009186 <_free_r+0x4e>
 8009190:	6811      	ldr	r1, [r2, #0]
 8009192:	1855      	adds	r5, r2, r1
 8009194:	42a5      	cmp	r5, r4
 8009196:	d10b      	bne.n	80091b0 <_free_r+0x78>
 8009198:	6824      	ldr	r4, [r4, #0]
 800919a:	4421      	add	r1, r4
 800919c:	1854      	adds	r4, r2, r1
 800919e:	42a3      	cmp	r3, r4
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	d1dd      	bne.n	8009160 <_free_r+0x28>
 80091a4:	681c      	ldr	r4, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	6053      	str	r3, [r2, #4]
 80091aa:	4421      	add	r1, r4
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	e7d7      	b.n	8009160 <_free_r+0x28>
 80091b0:	d902      	bls.n	80091b8 <_free_r+0x80>
 80091b2:	230c      	movs	r3, #12
 80091b4:	6003      	str	r3, [r0, #0]
 80091b6:	e7d3      	b.n	8009160 <_free_r+0x28>
 80091b8:	6825      	ldr	r5, [r4, #0]
 80091ba:	1961      	adds	r1, r4, r5
 80091bc:	428b      	cmp	r3, r1
 80091be:	bf04      	itt	eq
 80091c0:	6819      	ldreq	r1, [r3, #0]
 80091c2:	685b      	ldreq	r3, [r3, #4]
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	bf04      	itt	eq
 80091c8:	1949      	addeq	r1, r1, r5
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	6054      	str	r4, [r2, #4]
 80091ce:	e7c7      	b.n	8009160 <_free_r+0x28>
 80091d0:	b003      	add	sp, #12
 80091d2:	bd30      	pop	{r4, r5, pc}
 80091d4:	20012ee4 	.word	0x20012ee4

080091d8 <_malloc_r>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	1ccd      	adds	r5, r1, #3
 80091dc:	f025 0503 	bic.w	r5, r5, #3
 80091e0:	3508      	adds	r5, #8
 80091e2:	2d0c      	cmp	r5, #12
 80091e4:	bf38      	it	cc
 80091e6:	250c      	movcc	r5, #12
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	4606      	mov	r6, r0
 80091ec:	db01      	blt.n	80091f2 <_malloc_r+0x1a>
 80091ee:	42a9      	cmp	r1, r5
 80091f0:	d903      	bls.n	80091fa <_malloc_r+0x22>
 80091f2:	230c      	movs	r3, #12
 80091f4:	6033      	str	r3, [r6, #0]
 80091f6:	2000      	movs	r0, #0
 80091f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fa:	f000 f935 	bl	8009468 <__malloc_lock>
 80091fe:	4921      	ldr	r1, [pc, #132]	; (8009284 <_malloc_r+0xac>)
 8009200:	680a      	ldr	r2, [r1, #0]
 8009202:	4614      	mov	r4, r2
 8009204:	b99c      	cbnz	r4, 800922e <_malloc_r+0x56>
 8009206:	4f20      	ldr	r7, [pc, #128]	; (8009288 <_malloc_r+0xb0>)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	b923      	cbnz	r3, 8009216 <_malloc_r+0x3e>
 800920c:	4621      	mov	r1, r4
 800920e:	4630      	mov	r0, r6
 8009210:	f000 f83c 	bl	800928c <_sbrk_r>
 8009214:	6038      	str	r0, [r7, #0]
 8009216:	4629      	mov	r1, r5
 8009218:	4630      	mov	r0, r6
 800921a:	f000 f837 	bl	800928c <_sbrk_r>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	d123      	bne.n	800926a <_malloc_r+0x92>
 8009222:	230c      	movs	r3, #12
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f924 	bl	8009474 <__malloc_unlock>
 800922c:	e7e3      	b.n	80091f6 <_malloc_r+0x1e>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	1b5b      	subs	r3, r3, r5
 8009232:	d417      	bmi.n	8009264 <_malloc_r+0x8c>
 8009234:	2b0b      	cmp	r3, #11
 8009236:	d903      	bls.n	8009240 <_malloc_r+0x68>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	441c      	add	r4, r3
 800923c:	6025      	str	r5, [r4, #0]
 800923e:	e004      	b.n	800924a <_malloc_r+0x72>
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	42a2      	cmp	r2, r4
 8009244:	bf0c      	ite	eq
 8009246:	600b      	streq	r3, [r1, #0]
 8009248:	6053      	strne	r3, [r2, #4]
 800924a:	4630      	mov	r0, r6
 800924c:	f000 f912 	bl	8009474 <__malloc_unlock>
 8009250:	f104 000b 	add.w	r0, r4, #11
 8009254:	1d23      	adds	r3, r4, #4
 8009256:	f020 0007 	bic.w	r0, r0, #7
 800925a:	1ac2      	subs	r2, r0, r3
 800925c:	d0cc      	beq.n	80091f8 <_malloc_r+0x20>
 800925e:	1a1b      	subs	r3, r3, r0
 8009260:	50a3      	str	r3, [r4, r2]
 8009262:	e7c9      	b.n	80091f8 <_malloc_r+0x20>
 8009264:	4622      	mov	r2, r4
 8009266:	6864      	ldr	r4, [r4, #4]
 8009268:	e7cc      	b.n	8009204 <_malloc_r+0x2c>
 800926a:	1cc4      	adds	r4, r0, #3
 800926c:	f024 0403 	bic.w	r4, r4, #3
 8009270:	42a0      	cmp	r0, r4
 8009272:	d0e3      	beq.n	800923c <_malloc_r+0x64>
 8009274:	1a21      	subs	r1, r4, r0
 8009276:	4630      	mov	r0, r6
 8009278:	f000 f808 	bl	800928c <_sbrk_r>
 800927c:	3001      	adds	r0, #1
 800927e:	d1dd      	bne.n	800923c <_malloc_r+0x64>
 8009280:	e7cf      	b.n	8009222 <_malloc_r+0x4a>
 8009282:	bf00      	nop
 8009284:	20012ee4 	.word	0x20012ee4
 8009288:	20012ee8 	.word	0x20012ee8

0800928c <_sbrk_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d06      	ldr	r5, [pc, #24]	; (80092a8 <_sbrk_r+0x1c>)
 8009290:	2300      	movs	r3, #0
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7f7 fdea 	bl	8000e70 <_sbrk>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_sbrk_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_sbrk_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20013238 	.word	0x20013238

080092ac <_raise_r>:
 80092ac:	291f      	cmp	r1, #31
 80092ae:	b538      	push	{r3, r4, r5, lr}
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	d904      	bls.n	80092c0 <_raise_r+0x14>
 80092b6:	2316      	movs	r3, #22
 80092b8:	6003      	str	r3, [r0, #0]
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092c2:	b112      	cbz	r2, 80092ca <_raise_r+0x1e>
 80092c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092c8:	b94b      	cbnz	r3, 80092de <_raise_r+0x32>
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f830 	bl	8009330 <_getpid_r>
 80092d0:	462a      	mov	r2, r5
 80092d2:	4601      	mov	r1, r0
 80092d4:	4620      	mov	r0, r4
 80092d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092da:	f000 b817 	b.w	800930c <_kill_r>
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d00a      	beq.n	80092f8 <_raise_r+0x4c>
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	d103      	bne.n	80092ee <_raise_r+0x42>
 80092e6:	2316      	movs	r3, #22
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	2001      	movs	r0, #1
 80092ec:	e7e7      	b.n	80092be <_raise_r+0x12>
 80092ee:	2400      	movs	r4, #0
 80092f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092f4:	4628      	mov	r0, r5
 80092f6:	4798      	blx	r3
 80092f8:	2000      	movs	r0, #0
 80092fa:	e7e0      	b.n	80092be <_raise_r+0x12>

080092fc <raise>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <raise+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f7ff bfd3 	b.w	80092ac <_raise_r>
 8009306:	bf00      	nop
 8009308:	20000098 	.word	0x20000098

0800930c <_kill_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	; (800932c <_kill_r+0x20>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7f7 fd21 	bl	8000d60 <_kill>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d102      	bne.n	8009328 <_kill_r+0x1c>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b103      	cbz	r3, 8009328 <_kill_r+0x1c>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop
 800932c:	20013238 	.word	0x20013238

08009330 <_getpid_r>:
 8009330:	f7f7 bd0e 	b.w	8000d50 <_getpid>

08009334 <__sread>:
 8009334:	b510      	push	{r4, lr}
 8009336:	460c      	mov	r4, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	f000 f8a0 	bl	8009480 <_read_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	bfab      	itete	ge
 8009344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009346:	89a3      	ldrhlt	r3, [r4, #12]
 8009348:	181b      	addge	r3, r3, r0
 800934a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800934e:	bfac      	ite	ge
 8009350:	6563      	strge	r3, [r4, #84]	; 0x54
 8009352:	81a3      	strhlt	r3, [r4, #12]
 8009354:	bd10      	pop	{r4, pc}

08009356 <__swrite>:
 8009356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	461f      	mov	r7, r3
 800935c:	898b      	ldrh	r3, [r1, #12]
 800935e:	05db      	lsls	r3, r3, #23
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	4616      	mov	r6, r2
 8009366:	d505      	bpl.n	8009374 <__swrite+0x1e>
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	2302      	movs	r3, #2
 800936e:	2200      	movs	r2, #0
 8009370:	f000 f868 	bl	8009444 <_lseek_r>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	4632      	mov	r2, r6
 8009382:	463b      	mov	r3, r7
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	f000 b817 	b.w	80093bc <_write_r>

0800938e <__sseek>:
 800938e:	b510      	push	{r4, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009396:	f000 f855 	bl	8009444 <_lseek_r>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	bf15      	itete	ne
 80093a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093aa:	81a3      	strheq	r3, [r4, #12]
 80093ac:	bf18      	it	ne
 80093ae:	81a3      	strhne	r3, [r4, #12]
 80093b0:	bd10      	pop	{r4, pc}

080093b2 <__sclose>:
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 b813 	b.w	80093e0 <_close_r>
	...

080093bc <_write_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4d07      	ldr	r5, [pc, #28]	; (80093dc <_write_r+0x20>)
 80093c0:	4604      	mov	r4, r0
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	602a      	str	r2, [r5, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f7f7 fcff 	bl	8000dce <_write>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_write_r+0x1e>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_write_r+0x1e>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20013238 	.word	0x20013238

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7f7 fd0b 	bl	8000e06 <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20013238 	.word	0x20013238

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f7 fd06 	bl	8000e1e <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20013238 	.word	0x20013238

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f7 fd05 	bl	8000e3e <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20013238 	.word	0x20013238

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	; (8009464 <_lseek_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f7 fcfe 	bl	8000e54 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20013238 	.word	0x20013238

08009468 <__malloc_lock>:
 8009468:	4801      	ldr	r0, [pc, #4]	; (8009470 <__malloc_lock+0x8>)
 800946a:	f7ff bdff 	b.w	800906c <__retarget_lock_acquire_recursive>
 800946e:	bf00      	nop
 8009470:	20013230 	.word	0x20013230

08009474 <__malloc_unlock>:
 8009474:	4801      	ldr	r0, [pc, #4]	; (800947c <__malloc_unlock+0x8>)
 8009476:	f7ff bdfa 	b.w	800906e <__retarget_lock_release_recursive>
 800947a:	bf00      	nop
 800947c:	20013230 	.word	0x20013230

08009480 <_read_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d07      	ldr	r5, [pc, #28]	; (80094a0 <_read_r+0x20>)
 8009484:	4604      	mov	r4, r0
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	602a      	str	r2, [r5, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7f7 fc80 	bl	8000d94 <_read>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_read_r+0x1e>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_read_r+0x1e>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20013238 	.word	0x20013238

080094a4 <_init>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	bf00      	nop
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr

080094b0 <_fini>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	bf00      	nop
 80094b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b6:	bc08      	pop	{r3}
 80094b8:	469e      	mov	lr, r3
 80094ba:	4770      	bx	lr
